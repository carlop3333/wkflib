{"Z1":"Object","Z2":"Persistent object","Z3":"Key","Z4":"Type","Z50":"Error type","Z5":"Error","Z6":"String","Z7":"Function call","Z8":"Function","Z9":"Reference","Z60":"Natural language","Z11":"Monolingual text","Z12":"Multilingual text","Z61":"Programming language","Z16":"Code","Z14":"Implementation","Z17":"Argument declaration","Z18":"Argument reference","Z20":"Test case","Z21":"Unit","Z22":"Evaluation result","Z23":"Nothing","Z24":"void","Z31":"Monolingual stringset","Z32":"Multilingual stringset","Z39":"Key reference","Z40":"Boolean","Z41":"true","Z42":"false","Z80":"[do not use] Byte","Z86":"[do not use] Code point","Z99":"Quote","Z101":"Validate object","Z102":"Validate persistent object","Z103":"Validate key","Z104":"Validate type","Z105":"Validate error","Z106":"Validate string","Z107":"Validate function call","Z108":"Validate function","Z109":"Validate reference","Z111":"Validate monolingual text","Z112":"Validate multilingual text","Z114":"Validate implementation","Z116":"Validate code","Z117":"Validate argument declaration","Z118":"Validate argument reference","Z120":"Validate test case","Z121":"Validate Unit","Z122":"Validate Evaluation result","Z123":"Validate nothing","Z131":"Validate monolingual stringset","Z132":"Validate multilingual stringset","Z139":"Validate key reference","Z140":"Validate boolean","Z150":"Validate error type","Z160":"Validate natural language","Z161":"Validate programming language","Z180":"Validate byte","Z186":"Validate code point","Z199":"Validate quote","Z201":"Validate object built-in","Z202":"Validate persistent object built-in","Z203":"Validate key built-in","Z204":"Validate type built-in","Z205":"Validate error built-in","Z206":"Validate string built-in","Z207":"Validate function call built-in","Z208":"Validate function built-in","Z209":"Validate reference built-in","Z211":"Validate monolingual text built-in","Z212":"Validate multilingual text built-in","Z214":"Validate implementation built-in","Z216":"Validate code built-in","Z217":"Validate argument declaration built-in","Z218":"Validate argument reference built-in","Z220":"Validate test case built-in","Z221":"Validate unit built-in","Z222":"Built-in implementation of Validate Evaluation result","Z223":"Validate nothing built-in","Z231":"Validate monolingual stringset built-in","Z232":"Validate multilingual stringset built-in","Z239":"Validate key reference built-in","Z240":"Validate Boolean built-in","Z250":"Validate error type built-in","Z260":"Validate natural language built-in","Z261":"Validate programming language built-in","Z280":"Validate byte built-in","Z286":"Validate code point built-in","Z299":"Validate quote built-in","Z500":"Unspecified error","Z501":"JSON syntax error","Z502":"Not wellformed","Z503":"no connected implementation yet","Z504":"ZID not found","Z505":"Number of arguments mismatch","Z506":"Argument type mismatch","Z507":"Error in evaluation","Z508":"Competing keys","Z509":"List of errors","Z510":"NIL","Z511":"Key not found","Z512":"Test failed","Z513":"Resolved persistent object without value","Z514":"Built-in does not exist","Z515":"Built-in ID is erroneous","Z516":"Argument value error","Z517":"Return type mismatch","Z518":"Object type mismatch","Z519":"Undefined list type in benjamin array","Z520":"Wrong list type in benjamin array","Z521":"Objects must not be a number or Boolean or null","Z522":"Array element not wellformed","Z523":"Missing Z1K1","Z524":"Z1K1 must not be a string or array","Z525":"Invalid key","Z526":"Key value not wellformed","Z531":"Z6 must have two keys","Z532":"Z6 without Z6K1","Z533":"Z6K1 must be a string","Z534":"Z9 must have two keys","Z535":"Z9 without Z9K1","Z536":"Z9K1 must be a string","Z537":"Z9K1 must look like a reference","Z538":"Wrong namespace","Z539":"wrong content type","Z540":"Invalid language code","Z541":"Language code not found","Z542":"Unexpected Object type","Z543":"Type not found","Z544":"Conflicting type names","Z545":"Conflicting type identifiers (ZIDs)","Z546":"Built-in type not found","Z547":"Invalid format","Z548":"Invalid JSON","Z549":"Invalid reference","Z550":"Unknown reference","Z551":"Schema type mismatch","Z552":"Array element type mismatch","Z553":"Disallowed root type","Z554":"Label for a given language clashes with another Object's label","Z555":"Unmatching ZID and page title","Z556":"Invalid page title","Z557":"User does not have permission to edit","Z558":"Invalid programming language","Z559":"User not permitted to evaluate function","Z570":"Reached rate limit in orchestrator","Z571":"Reached rate limit in evaluator","Z600":"JavaScript","Z601":"JavaScript ES5","Z602":"JavaScript ES2015","Z603":"JavaScript ES2016","Z604":"JavaScript ES2017","Z605":"JavaScript ES2018","Z606":"JavaScript ES2019","Z607":"JavaScript ES2020","Z608":"JavaScript ES2021","Z610":"Python","Z611":"Python 3","Z612":"Python 3.5","Z613":"Python 3.6","Z614":"Python 3.8","Z615":"Python 3.9","Z620":"Lua","Z801":"Echo","Z802":"If","Z803":"Value by key","Z804":"Values by keys","Z805":"Reify","Z808":"Abstract","Z810":"prepend element to list","Z811":"first element","Z812":"list without first element","Z813":"Is empty list","Z820":"Trigger metadata","Z821":"Get first item of a Typed pair","Z822":"Get second element of a Typed pair","Z823":"Get envelope from function call","Z828":"fetch Persistent object","Z831":"Validate against schema","Z844":"Boolean equality","Z860":"Language code to language","Z866":"string equality","Z868":"String to codepoint list","Z872":"Filter Function","Z873":"Map Function","Z876":"Reduce Function","Z881":"Typed list","Z882":"Typed pair","Z883":"Typed Map","Z885":"Errortype to type","Z886":"Codepoint list to string","Z888":"Code point equality","Z889":"List equality","Z899":"Unquote","Z901":"Built-in implementation of Echo","Z902":"Built-in implementation of If","Z903":"Built-in implementation of Value by key","Z904":"Built-in implementation of Values by keys","Z905":"Built-in implementation of Reify","Z908":"Built-in implementation of Abstract","Z910":"Built-in implementation of Prepend element to list","Z911":"Built-in implementation of First element","Z912":"Built-in implementation of List without first element","Z913":"Built-in implementation of Is empty","Z920":"Built-in implementation of Trigger metadata","Z921":"Built-in implementation of Get first item of a Typed pair","Z922":"Built-in implementation of Get second element of a Typed pair","Z923":"Built-in implementation of Get envelope from function call","Z928":"Built-in implementation of Fetch persistent Object","Z931":"Built-in implementation of Validate against schema","Z944":"Built-in implementation of Equals for Booleans","Z960":"Built-in implementation of Language code to language","Z966":"Built-in implementation of Equals for Strings","Z968":"Built-in implementation of Convert to list","Z972":"Built-in implementation of Filter","Z973":"Built-in implementation of Map","Z976":"Built-in implementation of Reduce","Z981":"Built-in implementation of Typed list","Z982":"Built-in implementation of Typed pair","Z983":"Built-in implementation of Typed map","Z985":"Built-in implementation of Errortype to type","Z986":"Built-in implementation of Convert to string","Z988":"Built-in implementation of Code point equality","Z989":"Built-in implementation for List equality","Z999":"Built-in implementation of Unquote","Z1001":"Arabic","Z1002":"English","Z1003":"Spanish","Z1004":"French","Z1005":"Russian","Z1006":"Chinese","Z1011":"Bangla","Z1012":"Malayalam","Z1013":"Hausa","Z1014":"Igbo","Z1015":"Dagbani","Z1016":"Baoulé","Z1017":"Berom","Z1018":"Pa'O","Z1019":"Gun","Z1020":"Karen","Z1021":"Norwegian","Z1022":"Samburu","Z1023":"Makasar","Z1024":"Welsh","Z1025":"Polish","Z1026":"Shawiya","Z1027":"Kaqchikel","Z1028":"Soninke","Z1029":"Marwari","Z1030":"Vai","Z1031":"Chinook Jargon","Z1032":"Ndonga","Z1033":"Bafia","Z1034":"Tongan","Z1035":"Maharashtrian Konkani","Z1036":"Geez","Z1037":"Portuguese","Z1038":"Makhuwa-Meetto","Z1039":"Swahili","Z1040":"Tsakhur","Z1041":"Kenyang","Z1042":"Kildin Sami","Z1043":"Rombo","Z1044":"Doteli","Z1045":"Moroccan Arabic","Z1046":"Crimean Tatar","Z1047":"Mandar","Z1048":"Vietnamese","Z1049":"Ancient Egyptian","Z1050":"Ngémba","Z1051":"Finnish","Z1052":"Ancient Greek","Z1053":"Sinhala","Z1054":"Acoli","Z1055":"Burmese","Z1056":"Shawiya (Tifinagh script)","Z1057":"Plautdietsch","Z1058":"Susu","Z1059":"Occitan","Z1060":"Interlingua","Z1061":"Danish","Z1062":"Czech","Z1063":"Gayo","Z1064":"Old Provençal","Z1065":"Pahlavi","Z1066":"Kirmanjki","Z1067":"Tok Pisin","Z1068":"Jutish","Z1069":"Saraiki (Arabic script)","Z1070":"Kazakh (Turkey)","Z1071":"Central Yupik","Z1072":"Southern Luri","Z1073":"Pidgin","Z1074":"Nyanja","Z1075":"Island Carib","Z1076":"Syriac","Z1077":"Maba","Z1078":"Indonesian","Z1079":"Banjar","Z1080":"Hakha-Chin","Z1081":"Aghem","Z1082":"Sassarese Sardinian","Z1083":"Punjabi (Shahmukhi)","Z1084":"Gheg Albanian","Z1085":"Tswana","Z1086":"Numidian","Z1087":"Oromo","Z1088":"Central Dusun","Z1089":"Embu","Z1090":"Rapanui","Z1091":"Ojibwa","Z1092":"Vlax Romani","Z1093":"Middle Dutch","Z1094":"Mizo","Z1095":"Haitian Creole","Z1096":"Zenaga","Z1097":"Aromanian","Z1098":"Kashmiri (Arabic script)","Z1099":"Luxembourgish","Z1100":"Kalmyk","Z1101":"Guianan Creole","Z1102":"Tayal","Z1103":"Louisiana Creole","Z1104":"Ume Sami","Z1105":"Church Slavic","Z1106":"Icelandic","Z1107":"Chinese (Taiwan)","Z1108":"Tigrinya","Z1109":"Chimborazo Highland Quichua","Z1110":"Estonian","Z1111":"Middle English","Z1112":"Mka'a","Z1113":"Australian English","Z1114":"Egyptian Arabic","Z1115":"Cree","Z1116":"Paiwan","Z1117":"Kawésqar","Z1118":"Fiji Hindi","Z1119":"Efik","Z1120":"Uzbek","Z1121":"Venda","Z1122":"Ingush","Z1123":"Kinyarwanda","Z1124":"Simple English","Z1125":"Iriga Bicolano","Z1126":"Crimean Tatar (Latin script)","Z1127":"European Spanish","Z1128":"Dogrib","Z1129":"Xiang","Z1130":"Fon","Z1131":"Kanuri","Z1132":"Belarusian (Taraškievica orthography)","Z1133":"Mexican Spanish","Z1134":"Jinyu (Traditional)","Z1135":"Zoroastrian Dari","Z1136":"Tobelo","Z1137":"Papiamento","Z1138":"Tokelau","Z1139":"Sukuma","Z1140":"Zhuang","Z1141":"Inupiaq","Z1142":"Kera","Z1143":"Medumba","Z1144":"Samoan","Z1145":"Bakako","Z1146":"Low German","Z1147":"Dzongkha","Z1148":"Bishnupriya","Z1149":"Kvensk","Z1150":"Gagauz","Z1151":"Manipuri","Z1152":"Literary Chinese","Z1153":"Monégasque","Z1154":"Samaritan Aramaic","Z1155":"Waray","Z1156":"Chickasaw","Z1157":"Dutch","Z1158":"Serbian","Z1159":"Friulian","Z1160":"Eastern Mari","Z1161":"Traveller Norwegian","Z1162":"Ido","Z1163":"Talossan","Z1164":"Buriat","Z1165":"Lower Sorbian","Z1166":"Taíno","Z1167":"Taita","Z1168":"Turoyo","Z1169":"Guernésiais","Z1170":"Galician","Z1171":"Japanese (Hiragana script)","Z1172":"Mohawk","Z1173":"Iloko","Z1174":"Hungarian (formal)‎","Z1175":"Ligurian","Z1176":"Teso","Z1177":"Konkani","Z1178":"Pular","Z1179":"Tyap","Z1180":"Vunjo","Z1181":"Serbian (Cyrillic script)","Z1182":"Colognian","Z1183":"Western Mari","Z1184":"Amharic","Z1185":"Interlingue","Z1186":"Hebrew","Z1187":"Zaza","Z1188":"Muslim Tat","Z1189":"Divehi","Z1190":"Dakota","Z1191":"Sindhi","Z1192":"Goan Konkani (Latin script)","Z1193":"Gbaya","Z1194":"Eastern Frisian","Z1195":"Adyghe","Z1196":"Abaza","Z1197":"Assamese","Z1198":"Classical Newari","Z1199":"British English","Z1200":"Sursilvan","Z1201":"Kemi Sámi","Z1202":"Cantonese","Z1203":"Makaa","Z1204":"Eastern Canadian Inuktitut (Latin script)","Z1205":"Mi'kmaq","Z1206":"Marathi","Z1207":"Tajik","Z1208":"Cypriot Greek","Z1209":"Dogri","Z1210":"Sinte Romani","Z1211":"Bashkir","Z1212":"Atsam","Z1213":"Mapuche","Z1214":"Saisiyat","Z1215":"Carpathian Romani","Z1216":"Western Frisian","Z1217":"Chamorro","Z1218":"Faroese","Z1219":"Kachin","Z1220":"Khmer","Z1221":"Minnan","Z1222":"Kinaray-a","Z1223":"Luo","Z1224":"Kaingang","Z1225":"Chilcotin","Z1226":"Filipino","Z1227":"Norwegian Bokmål","Z1228":"Livonian","Z1230":"Limburgish","Z1231":"German (formal address)","Z1232":"Nigerian Pidgin","Z1233":"Middle Low German","Z1234":"Ugaritic","Z1235":"Alabama","Z1236":"Nugunu","Z1237":"Turkish","Z1238":"Chipewyan","Z1239":"Moldavian","Z1240":"Pohnpeian","Z1241":"Kumyk","Z1242":"Yao","Z1243":"Kʼicheʼ","Z1244":"Phoenician","Z1245":"Middle French","Z1246":"Akan","Z1247":"Sakizaya","Z1248":"Ndaʼndaʼ","Z1249":"Yapese","Z1250":"Lojban","Z1251":"Fula","Z1252":"Palauan","Z1253":"Massa","Z1254":"Tsakonian","Z1255":"Kuanyama","Z1256":"Welsh-Romani","Z1257":"Votic","Z1258":"mahore comorian","Z1259":"Eastern Cham (Cham script)","Z1260":"Gilaki","Z1261":"Old Norse (Runic script)","Z1262":"Hakka","Z1263":"Coptic","Z1264":"Khasi","Z1265":"Dari","Z1266":"Middle Irish","Z1267":"Lak","Z1268":"Grebo","Z1269":"Aragonese","Z1270":"Walser","Z1271":"Lakota","Z1272":"Croatian","Z1273":"Megleno-Romanian","Z1274":"Norfuk / Pitkern","Z1275":"Old Japanese (Hiragana script)","Z1276":"Norwegian Nynorsk","Z1277":"Judeo-Persian","Z1278":"Pite Sami","Z1279":"Uyghur (Arabic script)","Z1280":"Yambeta","Z1281":"Tulu","Z1282":"Breton","Z1283":"Ghomala","Z1284":"Ekajuk","Z1285":"Maithili","Z1286":"Siberian Tatar","Z1287":"Zarma","Z1288":"Central Kurdish","Z1289":"Balinese","Z1290":"Kabardian (Cyrillic script)","Z1291":"Northern Thai","Z1292":"Dalecarlian","Z1293":"Brahui","Z1294":"European Portuguese","Z1295":"Sindarin","Z1296":"Southern Balochi","Z1297":"Angika","Z1298":"Sicilian","Z1299":"Jamaican Creole English","Z1300":"Avestan","Z1301":"Muscogee","Z1302":"Tumbuka","Z1303":"Khakas","Z1304":"Silesian","Z1305":"Kutenai","Z1306":"Navajo","Z1307":"Lahnda","Z1308":"Umbundu","Z1309":"Lower Silesian","Z1310":"Eyak","Z1311":"Kongo","Z1312":"Maori","Z1313":"Arawak","Z1314":"Basque","Z1315":"Bislama","Z1316":"Maltese","Z1317":"Adangme","Z1318":"Mauritian Creole","Z1319":"Mentawai","Z1320":"Chadian Arabic","Z1321":"Mingrelian","Z1322":"Quenya","Z1323":"Hmong","Z1324":"Rabha","Z1325":"Bulu","Z1326":"Japanese (Kanji script)","Z1327":"Western Cham (Cham script)","Z1328":"Carib","Z1329":"Corsican","Z1330":"Zulu","Z1331":"Baltic Romani","Z1332":"Ukrainian","Z1333":"Old English","Z1334":"Cajun French","Z1335":"Chechen","Z1336":"Fanti","Z1337":"Jèrriais","Z1338":"Zeelandic","Z1339":"Scottish Gaelic","Z1340":"Talysh","Z1341":"Algerian Arabic","Z1342":"Sardinian","Z1343":"Sogdian","Z1344":"Twi","Z1345":"Sasak","Z1346":"Võro","Z1347":"Koyukon","Z1348":"Cheyenne","Z1349":"Ambonese Malay","Z1350":"Shona","Z1351":"Tamasheq","Z1352":"Inari Sami","Z1353":"Goan Konkani (Devanagari script)","Z1354":"Lule Sami","Z1355":"Lingua Franca Nova","Z1356":"Romagnol","Z1357":"Guarani","Z1358":"Congo Swahili","Z1359":"Araona","Z1360":"multiple languages","Z1361":"Romani","Z1362":"Javanese","Z1363":"Venetian","Z1364":"Chuukese","Z1365":"South Azerbaijani","Z1366":"Braj","Z1367":"Rarotongan","Z1368":"Etruscian","Z1369":"Lamba","Z1370":"Volapük","Z1371":"Rwa","Z1372":"Gan (Traditional)","Z1373":"Putèr","Z1374":"Chakma","Z1375":"Gan (Simplified)","Z1376":"Delaware","Z1377":"Meru","Z1378":"Arpitan","Z1379":"Hupa","Z1380":"Old High German","Z1381":"Brazilian Portuguese","Z1382":"Bikol","Z1383":"Atikamekw","Z1384":"Kabiye","Z1385":"Luba-Lulua","Z1386":"Old Japanese","Z1387":"Karachay-Balkar","Z1388":"Latgalian","Z1389":"Swati","Z1390":"Kwasio","Z1391":"O'odham","Z1392":"Shan","Z1393":"Warlpiri","Z1394":"Serbian (Latin script)","Z1395":"Central Atlas Tamazight","Z1396":"Gothic","Z1397":"Rundi","Z1398":"Amis","Z1399":"Eastern Yiddish","Z1400":"Herero","Z1401":"Tatar","Z1402":"Macedonian","Z1403":"Latin","Z1404":"Tachelhit (Latin script)","Z1405":"Waali","Z1406":"Chinese (Macau)","Z1407":"Zazaki","Z1408":"Bakhtiari","Z1409":"Terena","Z1410":"Gusii","Z1411":"Chinese (China)","Z1412":"Serbo-Croatian","Z1413":"Bodo","Z1414":"Uyghur (Latin script)","Z1415":"Hiri Motu","Z1416":"Roviana","Z1417":"Russia Buriat","Z1418":"Kazakh (Latin script)","Z1419":"Odia","Z1420":"Komi","Z1421":"Abkhazian","Z1422":"Awadhi","Z1423":"Spanish (formal)‎","Z1424":"Laki","Z1425":"Seselwa Creole French","Z1426":"Kurdish (Arabic script)","Z1427":"Luiseno","Z1428":"Kalenjin","Z1429":"Telugu","Z1430":"German","Z1431":"Pitjantjatjara","Z1432":"Kpelle","Z1433":"Tunen","Z1434":"Malay (Jawi script)","Z1435":"Selkup","Z1436":"Madurese","Z1437":"Canadian English","Z1438":"N’Ko","Z1439":"Uzbek (Latin script)","Z1440":"Avaric","Z1441":"Kazakh","Z1442":"Duala","Z1443":"Akkala Sámi","Z1444":"Japanese (Kana script)","Z1445":"Hawaiian","Z1446":"Papiamento (Aruba)","Z1447":"Lithuanian","Z1448":"Lingala","Z1449":"Iban","Z1450":"Southern Sotho","Z1451":"Udmurt","Z1452":"Lombard","Z1453":"Aleut","Z1454":"Myene","Z1455":"Kyrgyz","Z1456":"Northern Sotho","Z1457":"Hiligaynon","Z1458":"Tachelhit (Tifinagh script)","Z1459":"Munsee","Z1460":"Chibcha","Z1461":"Caddo","Z1462":"Ibibio","Z1463":"Palatine German","Z1464":"Bemba","Z1465":"Mirandese","Z1466":"Ga","Z1467":"Kabardian","Z1468":"Mafa","Z1469":"Sango","Z1470":"Cornish","Z1471":"Sundanese","Z1472":"Standard Moroccan Tamazight","Z1473":"Bosnian","Z1474":"Uzbek (Cyrillic script)","Z1475":"Adyghe (Cyrillic script)","Z1476":"Romansh","Z1477":"Northwestern Ojibwe","Z1478":"Kazakh (Cyrillic script)","Z1479":"Sanskrit (Siddham script)","Z1480":"Sichuan Yi","Z1481":"Central Bikol","Z1482":"Dutch Low Saxon","Z1483":"Ladino","Z1484":"Malawian Tonga","Z1485":"Basaa","Z1486":"Cebuano","Z1487":"Hittite","Z1488":"Slovak","Z1489":"Chukchi","Z1490":"Papora-Hoanya","Z1491":"Neapolitan","Z1492":"Hazaragi","Z1493":"Mari","Z1494":"Koro Maninka","Z1495":"Western Armenian","Z1496":"Chagatai","Z1497":"Lao","Z1498":"Montenegrin","Z1499":"Old French","Z1500":"Classical Syriac","Z1501":"Minnan (Pe̍h-ōe-jī)","Z1502":"Pangasinan","Z1503":"Bhojpuri","Z1504":"Chinese (Singapore)","Z1505":"Western Balochi","Z1506":"Korean (North Korea)","Z1507":"Shawiya (Arabic script)","Z1508":"Alemannic German","Z1509":"Ewe","Z1510":"Chuvash","Z1511":"Saurashtra","Z1512":"Komi-Permyak","Z1513":"Hungarian","Z1514":"Main-Franconian","Z1515":"Swiss High German","Z1516":"Lunda","Z1517":"Flemish","Z1518":"Ingrian","Z1519":"Northern Sami","Z1520":"Innu","Z1521":"Old Persian","Z1522":"Western Cham (Arabic script)","Z1523":"Nauru","Z1524":"Kosraean","Z1525":"East Cree","Z1526":"Mandaic","Z1527":"Tibetan","Z1528":"Arakanese","Z1529":"Afrihili","Z1530":"Fijian","Z1531":"Malay","Z1532":"Afrikaans","Z1533":"Sakha","Z1534":"Klingon","Z1535":"Luba-Katanga","Z1536":"Kazakh (Kazakhstan)","Z1537":"Elamite","Z1538":"Mycenaean Greek","Z1539":"Eastern Cham (Arabic script)","Z1540":"Tachelhit","Z1541":"Armenian","Z1542":"Megleno-Romanian (Greek script)","Z1543":"Karelian","Z1544":"Kimbundu","Z1545":"Timne","Z1546":"Naskapi","Z1547":"Latin American Spanish","Z1548":"Western Cham (Latin script)","Z1549":"Kannada","Z1550":"Kelantan-Pattani Malay","Z1551":"Aramaic","Z1552":"Sumerian","Z1553":"Newari","Z1554":"Mongolian","Z1555":"West Flemish","Z1556":"Kurdish","Z1557":"Kanembu","Z1558":"Rajasthani","Z1559":"Inuktitut","Z1560":"Old Norse","Z1561":"Kashmiri","Z1562":"Acehnese","Z1563":"Wolaytta","Z1564":"Lozi","Z1565":"Tungag","Z1566":"Khotanese","Z1567":"Mara","Z1568":"Mende","Z1569":"Kashmiri (Devanagari script)","Z1570":"Balkan Romani","Z1571":"Surmiran","Z1572":"Eastern Cham","Z1573":"Jju","Z1574":"Karakalpak","Z1575":"Zapotec","Z1576":"Esperanto","Z1577":"Mindong","Z1578":"Fiji Hindi (Latin script)","Z1579":"Dyula","Z1580":"Talysh (Cyrillic script)","Z1581":"Kurukh","Z1582":"Tunisian Arabic","Z1583":"Sranan Tongo","Z1584":"Megleno-Romanian (Cyrillic script)","Z1585":"Manchu","Z1586":"Novial","Z1587":"Somali","Z1588":"Blissymbols","Z1589":"Chinese (Hong Kong)","Z1590":"Ewondo","Z1591":"Chinese (Malaysia)","Z1592":"Swedish","Z1593":"Choctaw","Z1594":"Ao Naga","Z1595":"Bafut","Z1596":"Thao","Z1597":"Azerbaijani","Z1598":"Saterland Frisian","Z1599":"Dargwa","Z1600":"Santali","Z1601":"Old Japanese (Kanji script)","Z1602":"Nias","Z1603":"Kamba","Z1604":"Nogai","Z1605":"Wallisian","Z1606":"Bunun","Z1607":"Bambara","Z1608":"Albanian","Z1609":"Pampanga","Z1610":"Taroko","Z1611":"Sirionó","Z1612":"Tetum","Z1613":"Koyraboro Senni","Z1614":"Bena","Z1615":"Sandawe","Z1616":"Slovenian","Z1617":"Riffian","Z1618":"Pali","Z1619":"Judeo-Arabic","Z1620":"Mon","Z1621":"Carolinian","Z1622":"Belarusian","Z1623":"Buginese","Z1624":"Modern Standard Arabic","Z1625":"Malagasy","Z1626":"Tiv","Z1627":"Manx","Z1628":"Tigre","Z1629":"Machame","Z1630":"Betawi","Z1631":"Northern Luri","Z1632":"Luyia","Z1633":"Tunisian Arabic (Arabic script)","Z1634":"Megleno-Romanian (Latin script)","Z1635":"Cayuga","Z1636":"Tsonga","Z1637":"Jinyu (Simplified)","Z1638":"Arapaho","Z1639":"Magahi","Z1640":"Canadian French","Z1641":"Pashto","Z1642":"Upper Sorbian","Z1643":"Korean","Z1644":"Marwari (India)","Z1645":"Chinese (Simplified Han script)","Z1646":"Skolt Sami","Z1647":"Minnan (Han script)","Z1648":"Shambala","Z1649":"Rotuman","Z1650":"Northern Frisian","Z1651":"Haida","Z1652":"Pontic","Z1653":"Serbo-Croatian (Cyrillic)","Z1654":"Mongo","Z1655":"Vallader","Z1656":"Tsimshian","Z1657":"Punjabi (Gurmukhi)","Z1658":"Gondi","Z1659":"Eastern Balochi","Z1660":"Ejagham","Z1661":"Niuean","Z1662":"Bini","Z1663":"Slave","Z1664":"Romanian","Z1665":"Kashubian","Z1666":"Siraya","Z1667":"Biblical Hebrew","Z1668":"Moldovan","Z1669":"Serbo-Croatian (Latin)","Z1670":"Phoenician (Phoenician script)","Z1671":"Mazanderani","Z1672":"Chinese (Traditional Han script)","Z1673":"Isu","Z1674":"Dazaga","Z1675":"Nepali","Z1676":"Batak Toba (Latin script)","Z1677":"Nomaande","Z1678":"Quechua","Z1679":"Tarantino","Z1680":"Frafra","Z1681":"Tornedalen Finnish","Z1682":"Tlingit","Z1683":"Sidamo","Z1684":"Kawi","Z1685":"Nheengatu","Z1686":"Wayuu","Z1687":"Kabyle","Z1688":"Selayar","Z1689":"American English","Z1690":"Ladin","Z1691":"Shawiya (Latin script)","Z1692":"Hunsrik","Z1693":"Kikuyu","Z1694":"Tamil","Z1695":"Kotava","Z1696":"Gujarati","Z1697":"Piedmontese","Z1698":"Sena","Z1699":"Kazakh (Arabic script)","Z1700":"Gwichʼin","Z1701":"Nyoro","Z1702":"Eastern Canadian (Aboriginal syllabics)","Z1703":"Marshallese","Z1704":"Ngombala","Z1705":"Eastern Cham (Latin script)","Z1706":"Høgnorsk","Z1707":"Finnish Kalo","Z1708":"Tunisian Arabic (Latin script)","Z1709":"Latvian","Z1710":"Rukai","Z1711":"Blin","Z1712":"Akkadian","Z1713":"Ngiemboon","Z1714":"Washo","Z1715":"Laz","Z1716":"Erzya","Z1717":"Urdu","Z1718":"Nama","Z1719":"Saraiki","Z1720":"Ngomba","Z1721":"Phoenician (Latin script)","Z1722":"Serer","Z1723":"Xhosa","Z1724":"Tatar (Cyrillic script)","Z1725":"Eton","Z1726":"Emilian","Z1727":"Osage","Z1728":"Persian","Z1729":"Soga","Z1730":"Bavarian","Z1731":"Kazakh (China)","Z1732":"Asturian","Z1733":"Jola-Fonyi","Z1734":"Ainu","Z1735":"Lezghian","Z1736":"Japanese (Katakana script)","Z1737":"Tajik (Cyrillic script)","Z1738":"Southern Sami","Z1739":"Tuvalu","Z1740":"Krio","Z1741":"Prussian","Z1742":"Manado","Z1743":"Asu","Z1744":"Punic","Z1745":"Dinka","Z1746":"Southern Altai","Z1747":"Baluchi","Z1748":"Ter Sámi","Z1749":"Sanskrit","Z1750":"Interslavic (Latin script)","Z1751":"Mossi","Z1752":"Uyghur","Z1753":"Saho","Z1754":"Sangu","Z1755":"Samogitian","Z1756":"Georgian","Z1757":"Swiss French","Z1758":"Zuni","Z1759":"Gilbertese","Z1760":"Pali (Siddham script)","Z1761":"Tajik (Latin script)","Z1762":"Toki Pona","Z1763":"American Sign Language","Z1764":"Walloon","Z1765":"Mundang","Z1766":"Moksha","Z1767":"Batak Mandailing","Z1768":"Rumantsch Grischun","Z1769":"Old Turkish","Z1770":"Makonde","Z1771":"Gamilaraay","Z1772":"Wolof","Z1773":"Badaga","Z1774":"Dutch (informal address)‎","Z1775":"Crimean Tatar (Cyrillic script)","Z1776":"Southern Kurdish","Z1777":"Siksika","Z1778":"Nzima","Z1779":"Lamnso'","Z1780":"Tuvinian","Z1781":"Puyuma","Z1782":"Chavacano","Z1783":"Tuki","Z1784":"Livvi-Karelian","Z1785":"Ngambay","Z1786":"Kurdish (Latin script)","Z1787":"Italian","Z1788":"Pazeh","Z1789":"Catalan","Z1790":"Khowar","Z1791":"Chiga","Z1792":"Bamun","Z1793":"Nuer","Z1794":"Middle High German","Z1795":"Kom","Z1796":"Nyamwezi","Z1797":"Turkmen","Z1798":"Ossetic","Z1799":"Seri","Z1800":"Koyra Chiini","Z1801":"Baka","Z1802":"Old Irish","Z1803":"Ganda","Z1804":"Gan","Z1805":"Gorontalo","Z1806":"Kabuverdianu","Z1807":"Tatar (Latin script)","Z1808":"Beja","Z1809":"Jinyu","Z1810":"Yemba","Z1811":"Tasawaq","Z1812":"Yiddish","Z1813":"Kalaallisut","Z1814":"Masai","Z1815":"Rusyn","Z1817":"Batak Toba","Z1818":"Yoruba","Z1819":"Vute","Z1820":"Hindi","Z1821":"Balinese (Balinese script)","Z1822":"Afar","Z1823":"Bulgarian","Z1824":"Sutsilvan","Z1825":"Ottoman Turkish","Z1826":"Banyumasan","Z1827":"Greek","Z1828":"Langi","Z1829":"Picard","Z1830":"Japanese","Z1831":"Fang","Z1832":"Western Abenaki","Z1833":"Kako","Z1834":"Nāhuatl","Z1835":"North Ndebele","Z1836":"Cherokee","Z1837":"Wu","Z1838":"Nyankole","Z1839":"Metaʼ","Z1840":"Seneca","Z1841":"Extremaduran","Z1842":"Western Cham","Z1843":"Austrian German","Z1844":"Tagalog","Z1845":"South Ndebele","Z1846":"Musi","Z1847":"Fe'Fe'","Z1848":"Mandingo","Z1849":"Norman","Z1850":"Goan Konkani","Z1851":"Thai","Z1852":"Igala","Z1853":"Najdi Arabic","Z1854":"West Coast Bajau","Z1855":"Akoose","Z1856":"Tahitian","Z1857":"Capiznon","Z1858":"Okinawan","Z1859":"Pennsylvania German","Z1860":"Minangkabau","Z1861":"Scots","Z1862":"Yangben","Z1863":"Eastern Pwo","Z1864":"Nyungar","Z1865":"Aymara","Z1866":"Irish","Z1867":"Veps","Z1868":"Nanai","Z1869":"Nawdm","Z1870":"Northern Sami (Finland)","Z1871":"Northern Sami (Norway)","Z1872":"Northern Sami (Sweden)","Z1873":"Makhuwa","Z1874":"Pannonian Rusyn","Z1875":"Tai Nuea","Z1876":"Campidanese Sardinian","Z1877":"Ghanaian Pidgin","Z1878":"Sylheti","Z1879":"Arbëresh","Z1880":"Hindko","Z1881":"Pig Latin","Z1882":"Láadan","Z1883":"Kusaal","Z1884":"Levantine Arabic","Z1885":"Southern Dagaare","Z1886":"Haryanvi","Z1887":"Tausug","Z1888":"Obolo","Z1889":"Mesopotamian Arabic","Z1890":"Dendi","Z1891":"Crimean Tatar (Romania)","Z1892":"Minnan (Traditional Han script)","Z1893":"Minnan (Latin script)","Z1894":"Ta'izzi-Adeni Arabic","Z1895":"Chokwe","Z1896":"Tamasheq (Tifinagh script)","Z1897":"Tamasheq (Latin script)","Z1898":"Guadeloupean French Creole","Z1899":"Wu (Simplified Han)","Z1900":"Wu (Traditional Han)","Z1901":"Cantonese (Simplified Han)","Z1902":"Cantonese (Traditional Han)","Z1903":"Pu–Xian","Z1904":"Pu–Xian (Traditional Han script)","Z1905":"Pu–Xian (Simplified Han script)","Z1906":"Pu–Xian (Hinghwa romanization)","Z1907":"Brazilian Sign Language","Z1908":"Buginese (Lontara script)","Z1909":"Buginese (Latin script)","Z1910":"Pintupi-Luritja","Z8010":"Echo Test case for Strings","Z8011":"Echo Test case for UTF8 Strings","Z8012":"Echo Test case for Booleans","Z8013":"Echo Test case for Typed List","Z8020":"Test case for If with String values","Z8021":"Test case for If with List values","Z8100":"String Test case for Prepend element to list","Z8110":"Test case for First element With Strings","Z8120":"Test case for List without first element With Strings","Z8130":"Test case for Is empty With Empty List","Z8131":"Test case for Is empty With Non-Empty List","Z8210":"Test case for First element of pair With Strings","Z8220":"Test case for Second element of pair With Strings","Z8440":"Test case for Boolean equality True True","Z8441":"Test case for Boolean equality True False","Z8442":"Test case for Boolean equality False True","Z8443":"Test case for Boolean equality False False","Z8660":"Test case for String equality with same string","Z8661":"Test case for String equality with Capitalization Difference","Z8662":"Test case for String equality with Different Strings","Z8880":"⇒ is the same code point as ⇒","Z8881":"⇒ is not the same code point as =","Z8882":"𝕋 = 𝕋","Z10000":"join two strings","Z10001":"join: 'Hello, ' & 'World!'","Z10002":"join: 'Wiki' & 'functions'","Z10003":"join: 'Hello, ' & 'World' (Farsi)","Z10004":"using + in Python","Z10005":"join using + in JavaScript","Z10006":"a+b = ab","Z10007":"join empty strings","Z10008":"is empty string","Z10009":"\"\" is empty","Z10010":"\"abc\" is not empty","Z10011":"compare to \"\" in Python","Z10012":"reverse string","Z10013":"reverse Python","Z10014":"abc reversed is cba","Z10015":"JavaScript implementation of Echo","Z10016":"reverse: 'stressed' is 'desserts'","Z10017":"reverse JavaScript","Z10018":"to uppercase","Z10019":"uppercase JavaScript","Z10020":"to uppercase: 'capital' is 'CAPITAL'","Z10021":"uppercase Python","Z10022":"Turkish final-obstruent devoicing for string","Z10023":"Turkish final-obstruent devoicing for string Python","Z10024":"Turkish \"yaprak\" → \"yaprağ\"","Z10025":"Turkish \"kanat\" → \"kanad\"","Z10026":"Turkish \"ahenk\" → \"aheng\"","Z10027":"Turkish \"sevinç\" → \"sevinc\"","Z10028":"Turkish \"şarap\" → \"şarab\"","Z10029":"Turkish syllable counter","Z10030":"Turkish syllable counter Python","Z10031":"Turkish syllable counter 'ağaç'","Z10032":"count syllables in Turkish \"yol\"","Z10033":"Turkish syllabication","Z10034":"to uppercase: Georgian letters","Z10036":"to uppercase: 'Even Title Case Becomes Upper!'","Z10037":"(!) get lemma string from Lexeme JSON","Z10038":"(!) get lemma string from Lexeme JSON (Python)","Z10039":"bn lemma of L301993 at revision 1202251564 is 'হৃদয়'","Z10040":"de lemma of L301993 at revision 1202251564 is '∅'","Z10041":"(!) get language item from Lexeme JSON","Z10042":"(!) get language item from Lexeme JSON (Python)","Z10043":"language of L301993 at revision 1202251564 is 'Q9610'","Z10044":"echo composition","Z10045":"is empty string composition impl","Z10046":"compare to \"\" in JavaScript","Z10047":"to lowercase","Z10048":"lowercase JavaScript","Z10049":"to lowercase: 'Hello World' is 'hello world'","Z10050":"lowercase Python","Z10051":"to lowercase: 'LOWERCASE' is 'lowercase'","Z10052":"remove regular spaces","Z10053":"remove spaces JavaScript","Z10054":"remove spaces Python","Z10055":"remove spaces: 'hello world' is 'helloworld'","Z10056":"remove spaces: '123 456 789' is '123456789'","Z10057":"Base64 Encode","Z10058":"Base64 Encode JavaScript","Z10059":"Base64 Encode: 'Hello World' is 'SGVsbG8gV29ybGQ='","Z10060":"Base64 Encode Python","Z10061":"Base64 Encode: '123456' is 'MTIzNDU2'","Z10062":"Base64 decode","Z10063":"Base64 Decode: 'SGVsbG8gV29ybGQ=' is 'Hello World'","Z10064":"Base64 Decode: 'MTIzNDU2' is '123456'","Z10065":"Base64 Decode JavaScript","Z10066":"Base64 Decode Python","Z10067":"SHA-512","Z10068":"SHA-512: hash for 'hello world'","Z10069":"SHA-512 Python","Z10070":"has substring","Z10071":"has substring: 'hello world' and 'hello' is true","Z10072":"has substring: 'hello world' and 'test' is false","Z10073":"has substring JavaScript","Z10074":"has substring, Python","Z10075":"replace all substrings","Z10076":"replace all Python","Z10077":"remove spaces by replacing all","Z10078":"non-BMP characters reverse","Z10079":"trim string","Z10080":"removes spaces around a string","Z10081":"trim, JavaScript implementation","Z10082":"trim, Python implementation","Z10083":"is string blank","Z10084":"remove leading spaces","Z10085":"python implementation of Remove Leading Spaces","Z10086":"Composition implementation of is blank","Z10087":"remove leading spaces: '  hello' is 'hello'","Z10088":"Tests returns true if string just contains space","Z10089":"non-blank string returns false","Z10090":"JavaScript implementation of is blank","Z10091":"Python implementation of is blank","Z10092":"remove leading spaces: only strip leading spaces","Z10094":"JavaScript implementation of String start padding","Z10095":"Remove trailing spaces","Z10096":"is a palindrome","Z10097":"python rstrip","Z10098":"' a b c ' → ' a b c'","Z10099":"Python implementation of is palindrome","Z10100":"Only remove spaces at the end, not anywhere else","Z10101":"reverse -> remove leading spaces -> reverse","Z10102":"reverse -> remove trailing spaces -> reverse","Z10103":"remove leading -> remove trailing","Z10104":"'returruter' is a palindrome","Z10105":"reverse == orig","Z10106":"test if the string 'palindrome' is a palindrome","Z10108":"string end padding","Z10109":"JavaScript implementation of string end padding","Z10110":"Python implementation of string end padding","Z10111":"compose","Z10112":"function return type","Z10113":"js get function return type","Z10114":"get function return type","Z10115":"Compose functions in Python","Z10116":"Compose functions (Composition)","Z10117":"Replace All: 'hello world', 'o', 'a' is 'hella warld'","Z10118":"Replace All JavaScript","Z10119":"Sandbox-Function","Z10120":"Replace All: 'banana', 'na', '' is 'ba'","Z10121":"Sandbox-Implementation","Z10122":"Sandbox-Test","Z10123":"Sandbox-Implementation 2","Z10124":"SHA-256","Z10125":"SHA-256 encode Python","Z10126":"SHA-256 of empty string","Z10127":"SHA-256, python","Z10128":"SHA-256 of lowercase a","Z10129":"SHA-512 of empty string","Z10130":"SHA-256, Python","Z10131":"\t Sandbox-Implementation 3","Z10132":"SHA-384","Z10133":"SHA-384 encode Python","Z10134":"SHA-384 of empty string","Z10135":"MD2","Z10136":"MD4","Z10137":"MD5","Z10138":"RIPEMD-128","Z10139":"RIPEMD-160","Z10140":"BLAKE2b-160","Z10141":"BLAKE2b-256","Z10142":"BLAKE2b-384","Z10143":"BLAKE2b-512","Z10144":"BLAKE2s-128","Z10145":"BLAKE2s-160","Z10146":"BLAKE2s-224","Z10147":"BLAKE2s-256","Z10148":"SHA-1","Z10149":"SHA-224","Z10150":"SHAKE-128","Z10151":"SHAKE-256","Z10152":"SHA3-224","Z10153":"SHA3-256","Z10154":"SHA3-384","Z10155":"SHA3-512","Z10156":"scrypt","Z10157":"pbkdf2_hmac","Z10158":"MD5 encode Python","Z10159":"MD5 of empty string","Z10160":"SHA-224 encode Python","Z10161":"SHA-224 hash of \"test\"","Z10162":"SHA-1 encode Python","Z10163":"sha1(\"hello world\")","Z10164":"SHAKE-256 encode Python","Z10165":"SHAKE-128 encode Python","Z10166":"\t Sandbox-Implementation 4","Z10171":"remove all characters except ASCII digits, uppercase Latin letters and lowercase Latin letters","Z10172":"remove all characters except ASCII digits, uppercase Latin letters and lowercase Latin letters (JS)","Z10173":"\"X Y-Z\" returns \"XYZ\"","Z10174":"and","Z10175":"Python and","Z10176":"true and true is true","Z10177":"true and false is false","Z10178":"Punycode encode","Z10179":"Punycode encode Python","Z10180":"Punycode encode \"测试\"","Z10181":"Punycode decode","Z10182":"Punycode decode Python","Z10183":"Punycode decode \"0zwm56d\"","Z10184":"or","Z10185":"IDNA encode","Z10186":"Python or","Z10187":"IDNA encode Python","Z10188":"IDNA decode","Z10189":"false and true is false","Z10190":"IDNA decode in Python","Z10191":"false and false is false","Z10192":"true or true is true","Z10193":"replace all (regex, case sensitive)","Z10194":"Replace all regex matches Python","Z10195":"true or false is true","Z10196":"regular expression match","Z10197":"regex match Python","Z10198":"false or true is true","Z10199":"replace Punjabi Shahmukhi arlam with original lam","Z10200":"false or false is false","Z10201":"JavaScript or","Z10202":"&& in JavaScript","Z10203":"replacing Punjabi Shahmukhi arlam with original lam in \"ناࣇ\" gives \"نال\"","Z10204":"replacing Punjabi Shahmukhi arlam with original lam in \"اُنگࣇِیاں\" gives \"اُنگلِیاں\"","Z10205":"replace Punjabi Shahmukhi arlam with original lam, composition","Z10206":"nullary false","Z10207":"Nullary false in Python","Z10208":"Nullary false in JavaScript","Z10209":"nullary false returns false","Z10210":"nullary true","Z10211":"nullary true in Python","Z10212":"nullary true in JavaScript","Z10213":"true == true","Z10214":"unary false","Z10215":"Boolean identity","Z10216":"not","Z10217":"unary true","Z10218":"JavaScript unary false","Z10219":"boolean identity in JavaScript","Z10220":"JavaScript negation","Z10221":"JavaScript unary true","Z10222":"get lexical category from Lexeme JSON","Z10223":"(!) get lexical category from Lexeme JSON (Python)","Z10224":"lexical category of L301993 at revision 1202251564 is 'Q1084'","Z10225":"(!) lexeme form JSON has desired grammatical feature","Z10226":"(!) lexeme form JSON has desired grammatical feature (Python)","Z10227":"L301993-F1 at revision 1202251564 has feature 'Q131105'","Z10230":"remove all characters except ASCII digits, uppercase Latin letters and lowercase Latin letters, composition","Z10231":"nor","Z10232":"NOR composition of NOT OR","Z10233":"true nor true is false","Z10234":"true nor false is false","Z10235":"false nor true is false","Z10236":"false nor false is true","Z10237":"Boolean inequality","Z10238":"true XOR true is false","Z10239":"true XOR false is true","Z10240":"false XOR true is true","Z10241":"false XOR false is false","Z10242":"XOR composition of NOT XNOR","Z10243":"nand","Z10244":"NAND composition of NOT AND","Z10245":"true NAND true is false","Z10246":"true NAND false is true","Z10247":"false NAND true is true","Z10248":"false NAND false is true","Z10249":"K combinator","Z10250":"Python xnor","Z10251":"to Title Case","Z10252":"Title case - hello","Z10253":"Title case - hello, world!","Z10254":"Python Title case","Z10255":"Title case - HELLO, WORLD!","Z10256":"Title case - hELLO, wORLD!","Z10257":"binary false","Z10258":"Binary False - False, False is False","Z10259":"Binary False is False Value","Z10260":"Binary False - False, True is False","Z10261":"Binary False - True, False is False","Z10262":"Binary False - True, True is False","Z10263":"Python Binary False","Z10264":"JavaScript Binary False","Z10265":"Boolean Left","Z10266":"Boolean Left - False, False is False","Z10267":"Boolean Left - False, True is False","Z10268":"Boolean Left - True, False is True","Z10269":"Boolean Left - True, True is True","Z10270":"Python Boolean Left","Z10271":"Composition Boolean Left","Z10272":"Boolean not left","Z10273":"Boolean Not Left - False, False is True","Z10274":"Boolean Not Left - False, True is True","Z10275":"Boolean Not Left - True, False is False","Z10276":"Boolean Not Left - True, True is False","Z10277":"Composition Boolean Not Left","Z10278":"Python Boolean Not Left","Z10279":"Python nor","Z10280":"Python NAND","Z10281":"to snake_case","Z10282":"snake case - hello world","Z10283":"snake case - Hello World","Z10284":"Composition To Snake Case","Z10285":"(!) snake case - ID card Number","Z10286":"Python To Snake Case","Z10287":"binary true","Z10288":"Binary True - False, False is True","Z10289":"Binary True - False, True is True","Z10290":"to PascalCase","Z10291":"Binary True - True, False is True","Z10292":"Binary True - True, True is True","Z10293":"pascal case - hello world","Z10294":"pascal case - Hello World","Z10295":"snake case to pascal case","Z10296":"Composition - Binary True","Z10297":"Python To Pascal Case","Z10298":"Boolean right","Z10299":"Boolean right - False, False is False","Z10300":"Boolean right - False, True is True","Z10301":"Boolean right - True, False is False","Z10302":"Boolean right - True, True is True","Z10303":"Python Boolean Right","Z10304":"Composition Binary Right","Z10305":"Python Binary True","Z10306":"Boolean not right","Z10307":"Boolean Not Right - False, False is True","Z10308":"Boolean Not Right - False, True is False","Z10309":"encode NATO phonetic alphabet code","Z10310":"Boolean Not Right - True, False is True","Z10311":"Boolean Not Right - True, True is False","Z10312":"encode NATO phonetic alphabet - DCD → 'DELTA CHARLIE DELTA'","Z10313":"replace all kind of whitespaces with a single U+0020 space","Z10314":"Composition: Not (Boolean Right)","Z10315":"Python Boolean Not Right","Z10316":"replace all spaces with a single space in JavaScript","Z10317":"encode NATO phonetic alphabet - LFSG330","Z10318":"unary false - False is False","Z10319":"encode NATO phonetic alphabet - A","Z10320":"unary false - True is False","Z10321":"Composition unary false","Z10322":"encode NATO phonetic alphabet - J","Z10323":"Python encode NATO phonetic alphabet","Z10324":"is snake case","Z10325":"\"hello_world\" is snake case","Z10326":"\"abc\" is snake case","Z10327":"\"\" is snake case","Z10328":"\"Hello World\" is not snake case","Z10329":"Boolean implication","Z10330":"Is snake case (composition; equality check with to snake case)","Z10331":"Python Boolean implication","Z10332":"true implies true is true","Z10333":"Replace three spaces to single space","Z10334":"true implies false is false","Z10335":"false implies true is true","Z10336":"is uppercase","Z10337":"false implies false is true","Z10338":"\"CAPITAL\" is uppercase","Z10339":"\"Capital\" is not uppercase","Z10340":"Replace tab to single space","Z10341":"\"capital\" is not uppercase","Z10342":"\"CONSTANT_NAME\" is uppercase","Z10343":"\"\" is uppercase","Z10344":"is uppercase if value equals To Uppercase(value) in Composition","Z10345":"implication as a composition of OR and NOT","Z10346":"is lowercase","Z10347":"\"\" is lowercase","Z10348":"backwards Boolean implication","Z10349":"\"capital\" is lowercase","Z10350":"\"variable_name\" is lowercase","Z10351":"\"Paris\" is not lowercase","Z10352":"backwards implication as a composition","Z10353":"\"WIKIFUNCTIONS\" is not lowercase","Z10354":"is lowercase if value equals To Lowercase(value)","Z10355":"true implied by true is true","Z10356":"true implied by false is true","Z10357":"compact JSON string","Z10358":"Compact JSON string JavaScript","Z10359":"false implied by true is false","Z10360":"false implied by false is true","Z10361":"Compact JSON of \"{ 'x' : 2 }\" should be \"{'x':2}\"","Z10362":"Compact JSON string Python","Z10363":"is pascal case","Z10364":"\"\" is pascal case","Z10365":"\"PlayerNode\" is pascal case","Z10366":"string to hex (UTF-8)","Z10367":"\"Lorraine\" is pascal case","Z10368":"String to Hex Python","Z10369":"\"quiche lorraine\" is not pascal case","Z10370":"\"capital\" is not pascal case","Z10371":"\"Planet_Earth\" is not pascal case","Z10372":"is pascal case if value equals To Pascal Case(value)","Z10373":"hex (string) to string (UTF-8)","Z10374":"hex to string (UTF-8), python","Z10375":"is title case","Z10376":"\"\" is title case","Z10377":"\"A Fantastic Message\" is title case","Z10378":"\"My tailor is rich\" is not title case","Z10379":"string inequality","Z10380":"is title case if value equals To Title Case(value)","Z10381":"composition of not and string equality","Z10382":"41cc8a → Å","Z10383":"e284ab → Å","Z10384":"normalize Unicode","Z10385":"normalize Unicode, python","Z10386":"normalize hex string e284ab","Z10387":"to NFD","Z10388":"to NFD, python","Z10389":"test hex e284ab to NFD","Z10390":"to NFKC","Z10391":"to NFKC, python","Z10392":"① in NFKC = 1","Z10393":"Levenshtein Distance","Z10394":"to NFKD","Z10395":"to NFKD, python","Z10396":"① in NFKD = 1","Z10397":"is NFC","Z10398":"is NFD","Z10399":"is NFKC","Z10400":"is NFKD","Z10401":"is NFC, python","Z10402":"is NFD, python","Z10403":"is NFKC, python","Z10404":"is NFKD, python","Z10405":"① is NFC","Z10406":"Å is not NFC","Z10407":"① is NFD","Z10408":"① is not NFKC","Z10409":"① is not NFKD","Z10410":"is valid email address","Z10411":"wiki@wikimedia.org is valid email address","Z10412":"local part - no quotes","Z10413":"local part - start with a period","Z10414":"local part - end with a period","Z10415":"local part - consecutive periods","Z10416":"local part - no quotes with @","Z10417":"local part - no quotes with backslash","Z10418":"local part - no quotes with \"","Z10419":"local part - no quotes with comma","Z10420":"local part - no quotes with square brackets","Z10421":"local part - escaped","Z10422":"local part - quoted","Z10423":"are strings anagrams","Z10424":"local part - more than 64 chars","Z10425":"valid address examples in rfc 3696 section 3 - 1/10","Z10426":"valid address examples in rfc 3696 section 3 - 2/10","Z10427":"valid address examples in rfc 3696 section 3 - 3/10","Z10428":"valid address examples in rfc 3696 section 3 - 4/10","Z10429":"valid address examples in rfc 3696 section 3 - 5/10","Z10430":"valid address examples in rfc 3696 section 3 - 6/10","Z10431":"valid address examples in rfc 3696 section 3 - 7/10","Z10432":"valid address examples in rfc 3696 section 3 - 8/10","Z10433":"valid address examples in rfc 3696 section 3 - 9/10","Z10434":"empty strings are anagrams","Z10435":"valid address examples in rfc 3696 section 3 - 10/10","Z10436":"anagram function is case sensitive","Z10437":"anagram function is whitespace sensitive","Z10438":"'listen' is an anagram of 'silent'","Z10439":"anagrams javascript impl","Z10440":"implementation of K combinator using composition","Z10441":"Brainfuck Interpreter","Z10442":"brainfuck interpreter in python","Z10443":"brainfuck: hello, world!","Z10450":"is Esperanto adjective","Z10451":"\"granda\" is an adjective","Z10452":"\"famaj\" is an adjective","Z10453":"\"la\" is not an adjective!","Z10454":"\"freŝan\" is an adjective","Z10455":"\"hastemajn\" is an adjective","Z10456":"\"scivoligi\" is not an adjective","Z10457":"is Esperanto adjective Python","Z10458":"to h-system","Z10459":"to x-system","Z10460":"\"ĉ\" is \"ch\" in h-system","Z10461":"\"ĝ\" is \"gh\" in h-system","Z10462":"\"ĥ\" is \"hh\" in h-system","Z10463":"\"ĵ\" is \"jh\" in h-system","Z10464":"\"ŝ\" is \"sh\" in h-system","Z10465":"\"ŭ\" is \"u\" in h-system","Z10466":"\"ĉ\" is \"cx\" in x-system","Z10467":"\"ĝ\" is \"gx\" in x-system","Z10468":"\"ĥ\" is \"hx\" in x-system","Z10469":"\"ĵ\" is \"jx\" in x-system","Z10470":"\"ŝ\" is \"sx\" in x-system","Z10471":"\"ŭ\" is \"ux\" in x-system","Z10472":"\"ĝi ŝanĝiĝas\" is \"gxi sxangxigxas\" in x-system","Z10473":"Python to x-system","Z10474":"eĥoŝanĝo ĉiuĵaŭde in x-system","Z10475":"hyphenate ISBN-10","Z10476":"is IPv4","Z10477":"127.0.0.1 is a valid IPv4","Z10478":"127.1 is a valid IPv4","Z10479":"999.999.999.999 is not a valid IPv4","Z10480":"๑๒๓.१२३.١٢٣.२३३ is not a valid IPv4","Z10481":"0.0.0.0 is a valid IPv4","Z10482":"Esperanto plural","Z10483":"\"radetoj\" is already plural","Z10484":"\"grandaj\" is the plural of \"granda\"","Z10485":"\"ungonte\" (adverb) does not have a plural form","Z10486":"\"ungojn\" is the plural of \"ungon\"","Z10487":"\"eĥi\" (verb) does not have a plural form","Z10488":"\"la\" does not have a plural form","Z10489":"\"alaĵoj\" is the plural of \"alaĵo\"","Z10490":"Python Esperanto plural","Z10491":"is Esperanto adverb","Z10492":"\"mole\" is an adverb","Z10493":"\"monstro\" is not an adverb","Z10494":"is Esperanto adverb, python","Z10495":"(!) get representation string from form JSON","Z10496":"(!) get representation string from form JSON (Python)","Z10497":"bn representation of L301993-F1 at revision 1202251564 is 'হৃদয়'","Z10498":"de representation of L301993-F1 at revision 1202251564 is '∅'","Z10499":"(!) get gloss string from sense JSON","Z10500":"(!) get gloss string from sense JSON (Python)","Z10501":"bn gloss of L301993-S1 at revision 1202251772 is 'অন্তঃকরণ'","Z10502":"de gloss of L301993-S1 at revision 1202251772 is '∅'","Z10503":"(?) \"miaj amikoj\" is the plural form of \"mia amiko\"","Z10504":"regexp","Z10505":"Replace all regex matches JavaScript","Z10506":"pattern is case-sensitive","Z10507":"Unicode character name ","Z10508":"Unicode character name in Python (unicodedata)","Z10509":"Å is named LATIN CAPITAL LETTER A WITH RING ABOVE","Z10510":"hex:e284ab is named ANGSTROM SIGN","Z10511":"Sandbox-Test 2","Z10512":"true negated is false","Z10513":"false negated is true","Z10514":"is Esperanto noun","Z10515":"\"gujavo\" is a noun","Z10516":"\"fruktoj\" is a noun","Z10517":"\"avokadon\" is a noun","Z10518":"\"pistakojn\" is a noun","Z10519":"\"acide\" is not a noun","Z10520":"\"uzadi\" is not a noun","Z10521":"\"monata\" is not a noun","Z10522":"\"nelegeblajn\" is not a noun","Z10523":"is noun in Python","Z10524":"is Whyte notation","Z10525":"0-2-2 is a valid Whyte notation","Z10526":"0-3-0 is a valid Whyte notation","Z10527":"4-6-2 is a valid Whyte notation","Z10528":"2-2 is not a valid Whyte notation","Z10529":"4-6-2+2-6-4 is a valid Whyte notation","Z10530":"2-8-8-8-2 is a valid Whyte notation","Z10531":"2-6-6-2 is a valid Whyte notation","Z10532":"2-12-2 is a valid Whyte notation","Z10533":"3-5-1 is not a valid Whyte notation","Z10534":"is Whyte notation Python regex","Z10535":"is palindrome JavaScript","Z10536":"\"été\" is a palindrome","Z10537":"negation as a composition","Z10538":"Python negation","Z10539":"case-insensitive string equality","Z10540":"\"lorem ipsum\" should be equal to itself","Z10541":"case-insensitive string equality, lowercase composition","Z10542":"\"Lorem ipsuM\" should be equal to \"loREM IPsUm\"","Z10543":"JS to x-system","Z10544":"JS to h-system","Z10545":"line feed to hex gives \"0a\"","Z10546":"Hyphenation & ŭ→u: La flughaveno fermiĝas hodiaŭ.","Z10547":"string having non-BMP unicode characters","Z10548":"reverse string (grapheme level)","Z10549":"Reverse String (grapheme level) JS","Z10550":"reverse string of hex values","Z10551":"\"eěe\" from UTF-8 hex is a palindrome","Z10552":"reverse UTF-8 string: shìlìwénběn","Z10553":"is palindrome (grapheme level)","Z10554":"is palindrome (grapheme level) JS","Z10555":"is 👨‍👩‍👧‍👦 palindrome (grapheme level)","Z10556":"is 👨‍👩‍👧‍👦 palindrome","Z10557":"\"test\" does not equal \"test2\"","Z10558":"\"0\" is not an empty string","Z10559":"inverse binary number","Z10560":"Inverse binary number JavaScript","Z10561":"is character Hebrew?","Z10562":"Σ → σ","Z10563":"ὈΔΥΣΣΕΎΣ → ὀδυσσεύς","Z10564":"tschüß → TSCHÜSS","Z10565":"IsHebrew? (JS)","Z10566":"Latin not recognized as Hebrew","Z10567":"DMS coordinate to decimal","Z10568":"Hebrew recognized as Hebrew","Z10569":"only first character considered","Z10570":"DMS coordinate to decimal Python","Z10571":"44° 24′ 25.87″ N → 44.40718611111111","Z10572":"Case insensitive, punctuation filtering Python implementation","Z10573":"Straw? No, too stupid. I put soot on warts.","Z10574":"from x-system","Z10575":"\"cx\" is \"ĉ\"","Z10576":"\"jx\" is \"ĵ\"","Z10577":"\"hx\" is \"ĥ\"","Z10578":"\"gx\" is \"ĝ\"","Z10579":"\"sx\" is \"ŝ\"","Z10580":"\"ux\" is \"ŭ\"","Z10581":"\"ehxosxangxo cxiujxauxde\" is \"eĥoŝanĝo ĉiuĵaŭde\"","Z10582":"\"Gxi sxangxigxas\" is \"Ĝi ŝanĝiĝas\"","Z10583":"JavaScript boolean ===","Z10584":"JavaScript boolean !==","Z10585":"Python !=","Z10586":"negation in JavaScript function syntax","Z10587":"bangla grapheme split","Z10588":"Bangla grapheme split in Python","Z10589":"splitting all the graphemes in \"ট্রাক্টর\" gives ['ট্রা','ক্ট', 'র']","Z10590":"String equality using __eq__","Z10591":"genitive case of Bangla word","Z10592":"আম -> আমের","Z10593":"পরীরা -> পরীদের","Z10594":"genitive case of Bangla word in Python","Z10595":"is uppercase Python","Z10596":"nth string from a dashed list of strings","Z10597":"String equality JavaScript","Z10598":"is uppercase JavaScript","Z10603":"(!) number is between","Z10604":"number is between JavaScript","Z10605":"4 is between 1 and 10","Z10606":"-6.6 is not between 7 and 50","Z10608":"encode URI component","Z10609":"encode URI component JavaScript","Z10610":"URL encode \"Hello, world!\"","Z10611":"JavaScript nor","Z10613":"JavaScript String.prototype.normalize()","Z10614":"Normalize \"Résumé\" → \"Résumé\"","Z10615":"string starts with","Z10616":"JavaScript String.prototype.startsWith()","Z10617":"\"Hello, world!\" starts with \"Hell\"","Z10618":"string ends with","Z10619":"JavaScript String.prototype.endsWith()","Z10620":"\"Hello, world!\" ends with exclamation point","Z10621":"using concat in JavaScript","Z10622":"… using array join in JavaScript","Z10623":"string ends with Python","Z10624":"string starts with Python","Z10625":"encode URI component Python","Z10627":"ROT13 (Latin alphabet)","Z10628":"ROT13 in Python","Z10629":"Hello World! → Uryyb Jbeyq!","Z10630":"ROT13 in JavaScript","Z10631":"replace all spaces with a single space (composition)","Z10632":"Don't change single spaces","Z10633":"Replace trailing spaces regex","Z10634":"JavaScript binary true","Z10635":"JavaScript snake case","Z10636":"JavaScript boolean implication","Z10637":"Punycode encode emoji (😳)","Z10638":"HTML anchor tag","Z10639":"HTML anchor tag in JavaScript","Z10640":"is lowercase JavaScript","Z10641":"is alphanumeric","Z10642":"Python isalnum()","Z10643":"\"hello123\" is alphanumeric","Z10644":" replace all spaces with a single space in Python","Z10645":"Tajik morpheme join","Z10646":"чумак + ҳо = чумакҳо","Z10647":"кутволӣ + ҳо = кутволиҳо","Z10648":"парранда + ҳо = паррандаҳо","Z10649":"ҷоду + ро = ҷодуро","Z10650":"инсон + он = инсонон","Z10651":"одамӣ + он = одамиён","Z10652":"ҷоду + он = ҷодувон","Z10653":"парранда + он = паррандагон","Z10654":"мо + он = моён","Z10655":"форсӣ + и = форсии","Z10656":"китобҳо + и = китобҳои","Z10657":"китобҳо + ат = китобҳоят","Z10658":"combine Arabic morphemes","Z10659":"آن + آن = آنان","Z10660":"آن + ان = آنن","Z10671":"سوں + دا = سوندا","Z10672":"अ॒र → अर","Z10673":"get URI scheme","Z10674":"URI scheme of \"https://localhost\" is \"https\"","Z10675":"URI scheme of \"mailto:email@example.com\" is \"mailto\"","Z10676":"URI scheme of \"tel:123\" is \"tel\"","Z10677":"URI scheme of \"steam://run/1707400\" is \"steam\"","Z10678":"Composition implementation of get URI scheme","Z10679":"get URI scheme Python","Z10680":"Remove the beginning and ending space from a string ","Z10681":"JavaScript To Pascal Case","Z10682":"is it a Turkish vowel?","Z10683":"Is \"a\" a vowel? (Yes)","Z10684":"Is \"ae\" a vowel? (No, it's not one character)","Z10685":"Is \"2\" a vowel? (No, it's not a letter.)","Z10686":"Is \"é\" a vowel? (Technically yes, but it's not a Turkish vowel)","Z10687":"Is \"î\" a vowel? (Yes, it's not one of the main letters, but it's a vowel used in Turkish.)","Z10688":"is a Turkish vowel, python","Z10689":"is a Turkish consonant","Z10690":"Is \"î\" a Turkish consonant? (No)","Z10691":"Is \"h\" a Turkish consonant? (Yes)","Z10692":"Is \"2\" a consonant? (No, it's not a letter.)","Z10693":"Is \"kt\" a Turkish consonant? (No, it's not one character.)","Z10694":"is a Turkish consonant, python","Z10695":"is a Turkish consonant, javascript","Z10696":"is it a valid Qid?","Z10697":"Check Q1","Z10698":"Check Q7","Z10699":"JavaScript is valid Qid","Z10700":"Check text string","Z10701":"Check number","Z10702":"Python unary false","Z10703":"Python unary true","Z10704":"true returns true","Z10705":"false returns true","Z10706":"Composition unary true","Z10707":"Check QQ1","Z10708":"Perso-Arabic breaking character","Z10709":"ا is a Perso-Arabic breaking character","Z10710":"ة is a Perso-Arabic breaking character","Z10711":"ے is a Perso-Arabic breaking character","Z10712":"ږ is a Perso-Arabic breaking character","Z10713":"ہ is not a Perso-Arabic breaking character","Z10714":"z is not a Perso-Arabic breaking character","Z10715":"is numeric","Z10716":"Python isnumeric()","Z10717":"2023 is numeric","Z10718":"123abc is not numeric","Z10719":"¾ is numeric","Z10720":"JavaScript string inequality","Z10721":"Python string inequality","Z10722":"JavaScript case-insensitive string equality","Z10723":"Python case-insensitive string equality","Z10724":"Accented case-insensitive string equality","Z10725":"join booleans","Z10726":"join boolean with .toString() and + JavaScript","Z10727":"true + false = truefalse","Z10728":"join boolean with str() and + Python","Z10729":"joined booleans are lowercase","Z10730":"boolean to string","Z10731":"stringified boolean is lowercase","Z10732":"stringified true","Z10733":"stringified false","Z10734":"boolean to string JavaScript","Z10735":"boolean to string Python","Z10736":"join booleans composition","Z10737":"reverse lines","Z10738":"JavaScript split() reverse() join()","Z10739":"JavaScript isNaN()","Z10740":"case-insensitive string equality: \"zażółć gęślą jaźń\" (Polish)","Z10741":"5e10 is not numeric","Z10742":"remove all non-digits","Z10743":"remove all non-digits JavaScript regex","Z10744":"1,234,567 → 1234567","Z10745":"file name to file extension","Z10746":"file name to file extension JavaScript regex","Z10747":"File:George H. Sharpe.jpg → jpg","Z10748":"validate Boolean true returns true","Z10749":"Match \"Wikifunctions\" & /function/","Z10750":"regex match JavaScript","Z10751":"Match \"Wikifunctions\" & /Function/","Z10752":"Match \"Wikifunctions\" & /functionz/","Z10753":"duplicate string","Z10754":"duplicate 'Wiki'","Z10755":"duplicate '' (Empty string)","Z10756":"duplicate ' ' (Space)","Z10757":"duplicate string Composition","Z10758":"duplicate string Python","Z10759":"duplicate string JavaScript","Z10760":"duplicate '1.1'","Z10761":"URI percent encode","Z10762":"ASCII letters and numbers are kept as is (encode)","Z10763":"duplicate '¨'","Z10764":"encodeURI(input)","Z10765":"is ISSN","Z10766":"Scandinavian characters are encoded","Z10768":"Emojis are encoded","Z10769":"check valid ISSN 1764-5107","Z10770":"duplication with space","Z10771":"sentence case","Z10772":"incorrect check digit in ISSN","Z10773":"duplicate Wiki = Wiki Wiki","Z10774":"URI percent decode","Z10775":"testing \"this is a test\"","Z10776":"wrong chars in ISSN","Z10777":"decodeURI(label)","Z10778":"ASCII letters and numbers are kept as is (decode)","Z10779":"Python capitalize()","Z10780":"Emojis are decoded","Z10781":"duplication with space composition","Z10782":"add two integer strings","Z10783":"Round-tripped encoded string is kept as is","Z10784":"boolean identity in Python","Z10785":"Unicode code point encode hex","Z10786":"is IPv6","Z10787":"2001:0db8:85a3:0000:0000:8a2e:0370:7334 is IPv6","Z10788":"is ISSN (py)","Z10789":"is IPv6 regex composition","Z10790":"true is true","Z10791":"ipaddress.IPv4Address","Z10792":"check valid ISSN 0026-9395","Z10793":"check valid ISSN 0242-6870","Z10794":"check valid ISSN 0150-391X","Z10795":"identity (composition)","Z10796":"false is false","Z10797":"duplication with space JavaScript","Z10798":"duplication with space Python","Z10800":"not not in JavaScript","Z10801":"false is not true","Z10802":"is IP","Z10803":"is IP (composition)","Z10804":"JS NAND","Z10805":"test for ::1","Z10806":"banana is not an IP","Z10807":"Python ipaddress.IPv6Address","Z10808":"empty string is not IPv6","Z10809":"ipaddress.ip_address","Z10810":"192.0.2.1 is an IP address","Z10811":"Boolean identity, not(not(Z40))","Z10812":"remove punctuation","Z10813":"remove punctuation JavaScript","Z10814":"remove punctuation 'Hello, World !'","Z10815":"URI encode Python","Z10816":"to camelCase","Z10817":"Hello World camel case","Z10818":"to camelCase 'hello world'","Z10819":"to camelCase 'hello-world_'","Z10820":"to camelCase Python","Z10821":"is EAN","Z10822":"check correct EAN-13","Z10823":"is EAN (js)","Z10824":"empty string is not valid EAN","Z10825":"wrong check digit","Z10826":"invalid character in EAN","Z10827":"check valid EAN-8","Z10828":"to camelCase JavaScript","Z10831":"string intersperse","Z10832":"JavaScript implementation of String Intersperse","Z10833":"Python implementation of String Intersperse","Z10834":"String Intersperse test","Z10835":"Clappify emoji test","Z10836":"check string length of 0 in JavaScript","Z10837":"check string length of 0 in Python","Z10838":"zero width joiner (\"‍\") not empty","Z10839":"empty element has no effect","Z10840":"empty list has no effect","Z10841":"non-BMP characters can be in the first argument","Z10842":"negating string in JavaScript","Z10846":"ROT1 (Latin alphabet)","Z10847":"ROT1(Test) = Uftu","Z10848":"ROT1(Zanzibar) = Aboajcbs","Z10849":"ROT1(HeLlo WorLD) = IfMmp XpsME","Z10850":"ROT1 in Python","Z10851":"ROT25 (Latin alphabet)","Z10852":"ROT25(Test) = Sdrs","Z10853":"ROT25(Zanzibar) = Yzmyhazq","Z10854":"ROT25(HeLlo WorLD) = GdKkn VnqKC","Z10855":"ROT25 in Python","Z10856":"ROT13 composition","Z10860":"1234::5678::9abc is invalid IPv6","Z10861":"1234:5678:::9abc is invalid IPv6","Z10862":"(!) multiply two numeric strings (full stop input/output format)","Z10863":"ROT25 in JavaScript","Z10864":"JavaScript multiplication","Z10865":"ROT1 in JavaScript","Z10866":"string after other string","Z10867":"string after other string – enwiktionary URL","Z10868":"string after other string, python","Z10869":"Norwegian genitive","Z10870":"Norwegian genitive, Javascript","Z10871":"Norwegian genitive, Python","Z10872":"Norwegian genitive of Sveits is Sveits’","Z10873":"Norwegian genitive of \"TV 2\" is \"TV 2s\"","Z10874":"string after other string – non-initial match","Z10875":"string after other string – no match","Z10876":"UTF-8 code points that are 2 bytes uppercase and 3 bytes lowercase","Z10877":"UTF-8 code points that are 3 bytes lowercase and 2 bytes uppercase","Z10878":"is hiragana","Z10879":"is hiragana(char)","Z10880":"\"A\" is not hiragana","Z10881":"\"は\" is hiragana","Z10882":"\"ハ\" is not hiragana","Z10883":"is katakana","Z10884":"is katakana(char)","Z10885":"\"A\" is not katakana","Z10886":"\"ハ\" is katakana","Z10887":"\"は\" is not katakana","Z10888":"to final form (Hebrew)","Z10889":"to final form (Hebrew), composition","Z10890":"Hebrew to final form, כמנפצ","Z10891":"final to normal form (Hebrew)","Z10892":"Hebrew final to normal form, composition","Z10893":"Hebrew final to normal form, \"ךםןףץ\"","Z10894":"Hebrew convert to Maqaf / En dash (Basic)","Z10895":"Hebrew convert to Maqaf, python","Z10896":"Sandbox-Implementation 5","Z10897":"is camel case","Z10898":"is camel case composition","Z10899":"\"test\" is camel case","Z10900":"\"Test\" is not camel case","Z10901":"get first character of string","Z10902":"get first character of a string in python","Z10903":"first character of \"test\" is \"t\"","Z10904":"\"testString\" is camel case","Z10905":"\"test string\" is not camel case","Z10906":"is camel case in python","Z10907":"first character of \" \" is \" \"","Z10908":"dashes to hyphen-minus","Z10909":"dashes to hyphen, regex composition","Z10910":"71 dashes to 71 hyphen-minuses","Z10911":"duplicate string N times","Z10912":"duplicate string N times (python str.join)","Z10913":"duplicate string from duplicate string N=2 times","Z10914":"duplication with space, composition","Z10915":"wf~wf~wf~wf","Z10916":"6 times 👏™️","Z10917":"zero duplicates is empty string","Z10918":"underscores replaced with hyphen-minuses","Z10919":"csv record to wikitable row","Z10920":"Mon,Tue,Wed,... to Mon||Tue||Wed||...","Z10921":"pipe and all-comma replacement (composition)","Z10922":"pipe and unquoted-comma replacement (Python)","Z10923":"sequence with empty values (CSV to wikitable row)","Z10924":"quoted commas don't split CSV fields","Z10925":"is hiragana(char) in JavaScript","Z10926":"is katakana(char) in JavaScript","Z10927":"is Han character","Z10928":"is Han character, python","Z10929":"is Han character in JavaScript","Z10930":"pipes inside fields should not break the wikitable row","Z10931":"\"a\" is not a Han character","Z10932":"\"ハ\" is not Han character","Z10933":"\"は\" is not Han character","Z10934":"\"森\" is Han character (common)","Z10935":"\"㐭\" is Han character (rare, CJK Ext A)","Z10936":"| = 7c","Z10937":"roundtrip hex2string(string2hex(string)) == string","Z10938":"unescape named HTML characters","Z10939":"unescape from Python html","Z10940":"&Exists; = ∃","Z10941":"encode 'Paris' with NATO phonetic alphabet","Z10942":"number is between Python","Z10943":"10 is between 0 and 10","Z10944":"international morse code encode","Z10945":"international morse code encode in Python","Z10946":"correctly encodes lowercase letters","Z10947":"correctly encodes \"Hello World\"","Z10948":"correctly encodes digits","Z10949":"correctly encodes punctuation marks and miscellaneous signs","Z10950":"ignores invalid symbols","Z10951":"handles multiple spaces","Z10952":"duplicate string using repeat (Javascript)","Z10953":"from h-system","Z10954":"&lt;div&gt; = <div>","Z10955":"JS from x-system","Z10956":"international morse code decode","Z10957":"python unicode code point spaced encode","Z10958":"\"ABC ₤\" ⇒ \"41 42 43 20 20A4\" (case insensitive)","Z10959":"correctly decodes lowercase letters","Z10960":"international morse code decode in Python","Z10961":"correctly decodes digits","Z10962":"not boolean implication","Z10963":"composition of not(boolean implication(A,B))","Z10964":"not backwards Boolean implication","Z10965":"composition of not (backwards Boolean implication(A,B))","Z10968":" international morse code encode in JavaScript","Z10969":"correctly encodes uppercase letters","Z10970":"decode NATO phonetic alphabet code","Z10971":"Python decode NATO phonetic alphabet","Z10972":"decode NATO phonetic alphabet - A","Z10973":"is anagram (simple)","Z10974":"is anagram (sorting, Python)","Z10975":"transliterate Javanese script","Z10976":"equal strings","Z10977":"reversed strings","Z10978":"different character","Z10979":"transliterate Javanese script, javascript","Z10980":"different frequency","Z10981":"same frequencies","Z10982":"ꦲ is \"ha\"","Z10983":"Chars -־– do not change themselves","Z10984":"is anagram (sorting, JavaScript)","Z10985":"'(ישירה) - הגדרת' becomes '(ישירה) – הגדרת'","Z10987":"HTML named character escape","Z10988":"escape from Python html","Z10989":"∃ = &exist;","Z10991":"convert dashes in a sentence about DNA","Z10993":"Hebrew convert to Maqaf / En dash","Z10994":"Z10993 by Z10894","Z10995":"<div> = &lt;div&gt;","Z10996":"is leap year (natural number Gregorian calendar)","Z10997":"Check the year 2000 is a leap year","Z10998":"is leap year (Python)","Z10999":"Check the year 2100 is not a leap year","Z11000":"Check the year 1980 is a leap year ","Z11001":"Check the year 1999 is not a leap year","Z11003":"Base16 Encode","Z11004":"Base16 Encode Python","Z11005":"Base16 Encode: 'Hello World' is '48656C6C6F20576F726C64'","Z11006":"Base16 Encode: '123456' is '313233343536'","Z11007":"Base16 Decode","Z11008":"Base16 Decode Python","Z11009":"Base16 Decode: '48656C6C6F20576F726C64' is 'Hello World'","Z11010":"Base16 Decode: '313233343536' is '123456'","Z11011":"is leap year (Jalali calendar)","Z11012":"Check year 1399 (Jalali calendar) is a leap year","Z11013":"Check year 1400 (Jalali calendar) is not a leap year","Z11014":"is Jalali leap year (Python)","Z11015":"is leap year (Julian calendar)","Z11016":"Check year 2100 (in Julian calendar) is a leap year","Z11017":"Check year 2001 (in Julian calendar) is not a leap year","Z11018":"is Julian leap year (Python)","Z11019":"italicise a simple string in Wikitext","Z11020":"italicise \"Hello World\" in Wikitext","Z11021":"composition of two joins, adding a double ' at the start and end of the string","Z11022":"Arabic to Roman numeral","Z11023":"Roman to Arabic numeral","Z11024":"3473 → MMMCDLXXIII","Z11025":"MMMCDLXXIII = 3473","Z11026":"integer to roman Python","Z11027":"Roman numeral to arabic numeral, python","Z11028":"Palindrome: 'kayak' returns 'kayak'","Z11029":"SHA-512 in JavaScript","Z11030":"pipe and unquoted-comma replacement (JavaScript)","Z11031":"isLeapYear(Javascript)","Z11032":"isJulianLeap(JavaScript)","Z11033":"is Jalali Leap Year(JavaScript)","Z11034":"Check year 1412 (Jalali calendar) is a leap year","Z11035":"get language item from Lexeme JSON (JavaScript)","Z11036":"Is monosyllabic (Turkish)","Z11037":"Is \"saat\" monosyllabic?","Z11038":"Is \"tek\" monosyllabled?","Z11039":"Is monosyllabic in Turkish (python implementation)","Z11040":"string length","Z11041":"string length in Javascript ","Z11042":"\"Wednesday\" ends in \"day\"","Z11043":"string length in Python","Z11044":"URL Fragment","Z11045":"Get URL Fragment in Python","Z11046":"Testcase testing normal fragment","Z11047":"Testcase to handle multiple fragments","Z11048":"Get URL Fragment in JS","Z11049":"URL parameter","Z11050":"get URL parameter with JavaScript regex","Z11051":"extract search query from Wikifunctions link","Z11052":"no \"action\" parameter found in URL","Z11053":"URL query string","Z11054":"get query string with JavaScript split","Z11055":"Wikipedia search extract whole URL query","Z11056":"no URL fragment","Z11057":"(!) 2*3=6","Z11058":"-4*9=-36","Z11059":"-5*-5=25","Z11060":"get last character of string","Z11061":"last character of \"block\" is \"k\"","Z11062":"get last character of string composition","Z11063":"Composition implementation of URL fragment","Z11064":"get URL Fragment in python using urlparse","Z11065":"Empty URL","Z11066":"Get URL Fragment using URL object ","Z11067":"Empty fragment","Z11068":"get last character of string Python","Z11069":"get URL fragment from invalid URL","Z11070":"No scheme","Z11071":"Get Text Fragment","Z11072":"Composition implementation of get Text Fragment","Z11073":"Normal text fragments","Z11074":"No text fragment","Z11075":"Python implementation of Get Text Fragment","Z11076":"non-text fragment","Z11077":"Classical to standard Bengali","Z11078":"Sadhu → Cholito: convert classical to standard Bengali, Python","Z11079":"খেলিতেছিলাম → খেলছিলাম","Z11080":"last character of \"887006\" is \"6\"","Z11081":"last character of \"اختبار\" is \"ر\"","Z11082":"fallback if string is empty","Z11083":"fallback if string is empty in JavaScript","Z11084":"return \"none\" since string is empty","Z11085":"return string since it is not empty","Z11089":"English plural","Z11090":"plural of \"molecule\" is \"molecules\"","Z11091":"plural of \"human\" is \"humans\"","Z11092":"plural of \"woman\" is \"women\"","Z11093":"plural of \"child\" is \"children\"","Z11094":"string is element of CSV","Z11095":"Tuesday is on the list of days of the week","Z11096":"plural of octopus is one of three options","Z11097":"string split across two elements is not an element","Z11099":"composition of substring tests","Z11100":"\"day\" is not on the list of English days","Z11101":"string is element of CSV, Python","Z11102":"remove duplicate characters","Z11103":"remove duplicate characters JavaScript","Z11104":"remove duplicate characters - Hello, world!","Z11105":"string is element of CSV, Javascript","Z11106":"quoted commas don't split fields","Z11107":"quoted fields match the whole quoted item","Z11108":"robust match by trimming surrounding whitespace differences","Z11109":"robust match by trimming quotes","Z11110":"don't ignore quoted spaces","Z11111":"English plural composition (add -s)","Z11112":"general rules (Grammarly), Python","Z11113":"plural of \"Candy\" is \"Candies\"","Z11114":"plural of \"scratch\" is \"scratches\"","Z11115":"plural of \"DUI\" is \"DUIs\"","Z11116":"plural of \"wolf\" is \"wolves\"","Z11117":"plural of \"species\" is \"species\"","Z11118":"plural of \"computer mouse\" is \"computer mice\"","Z11119":"plural of \"goose\" is \"geese\"","Z11120":"plural of \"thesis\" is \"theses\"","Z11121":"plural of \"tooth\" is \"teeth\"","Z11122":"python implementation of remove duplicated characters","Z11123":"plural of \"knife\" is \"knives\"","Z11124":"plural of \"tomato\" is \"tomatoes\"","Z11125":"plural of \"taxon\" is \"taxa\"","Z11126":"plural of \"boy\" is \"boys\"","Z11127":"Bengali url with subdomain","Z11128":"plural of \"son-in-law\" is \"sons-in-law\"","Z11129":"is valid positive integer","Z11130":"123 is a positive integer","Z11131":"string \"ten\" is not a number","Z11132":"abc is not a positive integer","Z11133":"'0' is not a positive integer","Z11134":"'1.0' is not a positive integer","Z11135":"cast to int","Z11136":"'-0' is not a positive integer","Z11137":"¾ is not a positive integer","Z11138":"-5 is not a positive integer","Z11139":"bold in Wikitext","Z11140":"composition of two joins","Z11141":"Hello, World! in bold Wikitext","Z11143":"another English plural, Python","Z11144":"plural of \"soliloquy\" is \"soliloquies\"","Z11145":"wrap string","Z11146":"wrap string with composition joins","Z11147":"Hello → \"Hello\"","Z11148":"wrap string JavaScript","Z11149":"wrap string Python","Z11150":"composition wrapping string with triple '","Z11151":"unwrap string","Z11152":"unwrap string JavaScript","Z11153":"unwrap quotes from \"Hello\"","Z11154":"don't unwrap if not on both sides","Z11155":"no need to unwrap","Z11156":"wrap with XML tag","Z11157":"simple XML tag wrap JavaScript","Z11158":"add <nowiki> tag to formatted string","Z11159":"bold in Wikitext, Python","Z11160":"Not Boolean implication: (false , false) is false","Z11161":"Not Boolean implication: (false , true) is false","Z11162":"Not Boolean implication: (true, false) is true","Z11163":"Not Boolean Implication: (true, true) = false","Z11165":"regular Croatian feminine genitive singular","Z11166":"ljubav → ljubavi","Z11167":"zvijezda → zvijezde","Z11168":"kuća → kuće","Z11169":"laž → laži","Z11170":"remove at end","Z11171":"abcdef - def = abc","Z11172":"abcdef - cde = abcdef","Z11173":"aaa - a = aa","Z11174":"a a - a = \"a \"","Z11175":"input[:-len(suffix)]","Z11176":"a - aa = a","Z11177":"input.slice(0, -suffix.length)","Z11178":"replace at end","Z11179":"abcd, cd, yz → abyz","Z11180":"abcd, bc, yz → abcd","Z11181":"join(remove at end(input, suffix), replacement)","Z11182":"replace ending \"a\" with \"e\" else add \"i\"","Z11183":"plural of \"man\" is \"men\"","Z11184":"Convert wikitable to list","Z11185":"Convert wikitable into list","Z11186":"plural of \"bacterium\" is \"bacteria\"","Z11187":"plural of \"minutia\" is \"minutiae\" or \"minutiæ\"","Z11188":"plural of \"harmonia\" is \"harmoniai\"","Z11189":"rare alternative plural of “rationale” is “rationalia”","Z11190":"plural of \"stroma\" is \"stromata\"","Z11191":"plural of \"varix\" is \"varices\"","Z11192":"plural of \"encephalitis\" is \"encephalitides\"","Z11193":"remove interpunction","Z11194":"Remove interpunction, regular sentence","Z11195":"Remove a lot of standard interpunctions","Z11196":"remove interpunction, Python","Z11197":"remove interpunction, JavaScript","Z11198":"wikitable containing Hebrew is converted to list","Z11199":"regular Croatian feminine dative singular","Z11200":"muzika → muzici","Z11201":"kuća - kući","Z11202":"ljubav - ljubavi","Z11203":"ka->ci, a->i, else +i","Z11204":"regular Croatian feminine accusative singular","Z11205":"Finnish nominative plural","Z11206":"plural of valo = valot","Z11207":"Finnish nominative plural, Python","Z11208":"is SMILES notation","Z11209":"valid SMILES for dinitrogen","Z11210":"valid SMILES for methyl isocyanate","Z11211":"valid SMILES for copper(II) sulfate","Z11212":"valid (isomeric) SMILES for oxytocin","Z11213":"valid (canonical) SMILES for oxytocin","Z11214":"reversed 'Q1' is '1Q'","Z11215":"'laatikko' becomes 'laatikot'","Z11216":"plural of vanhempi = vanhemmat","Z11217":"ROT25 of \"The quick brown fox...\"","Z11218":"English count plurality","Z11219":"count plurality, Python","Z11220":"plural(1,'egg','eggs') == 'egg' ","Z11221":"plural(0,'egg','eggs') == 'eggs' ","Z11222":"plural(2,'egg','eggs')  == 'eggs'","Z11223":"if left then right else false","Z11224":"not backward Boolean implication(F,F) = F","Z11225":"not backward Boolean implication(F,T) = T","Z11226":"not backward Boolean implication(T,F) = F","Z11227":"not backward Boolean implication(T,T) = F","Z11228":"accusative of 'ruža' is 'ružu'","Z11229":"accusative of 'ljubav' is 'ljubav'","Z11230":"replace a at end with u","Z11231":"regular Croatian feminine locative singular","Z11232":" plural(-1,'egg','eggs') == 'egg'","Z11233":"plural(-2.3,'egg','eggs') == 'eggs'","Z11234":"plural(-2,'egg','eggs') == 'eggs'","Z11235":"(!) absolute value (numeric string)","Z11236":"abs(1) == 1","Z11237":"abs(-1) == 1","Z11238":"abs(-1.2) == 1.2","Z11239":"abs(0) == 0","Z11240":"Python Absolute Value","Z11241":"locative of \"riba\" is \"ribi\"","Z11242":"locative of \"povijest\" is \"povijesti\"","Z11243":"locative of \"slika\" is \"slici\"","Z11244":"ka -> ca, remove a, add i","Z11245":"regular Croatian feminine vocative singular","Z11246":"return false","Z11247":"return true","Z11248":"Adds a preposition 'na' to a word (Igbo)","Z11249":"Adds a preposition 'na' to a word (JavaScript)","Z11250":"if true then true else false","Z11251":"vocative of \"sova\" is \"sovo\"","Z11252":"vocative of \"ljubav\" is \"ljubavi\"","Z11253":"replace a with o, else add i","Z11254":"regular Croatian feminine instrumental singular","Z11255":"'0x123' is not a valid integer","Z11256":"regular German First person singular present verb","Z11257":"lesen: Ich lese","Z11258":"gehen: Ich gehe","Z11259":"stem German verb","Z11260":"stem of \"denken\" is \"denk\"","Z11261":"stem of \"lesen\" is \"les\"","Z11262":"remove \"en\" at end","Z11263":"stem + e","Z11264":"regular German Second person singular present verb","Z11265":"denken: Du denkst","Z11266":"gehen: Du gehst","Z11267":"stem + st","Z11268":"regular German First person plural present verb","Z11269":"\"denken\" → \"denken\"","Z11270":"\"lösen\" → \" lösen\"","Z11271":"regular German First person plural present verb, composition","Z11272":"regular German verb in the second person plural present","Z11273":"\"lachen\" → \"lacht\"","Z11274":"\"drücken\" → \"drückt\"","Z11275":"stem + t","Z11276":"composition: replace at end with empty string","Z11277":"regular Croatian feminine nominative singular","Z11278":"nominative of \"riječ\" is \"riječ\"","Z11279":"nominative of \"lavica\" is \"lavica\"","Z11280":"the lemma is the nominative singular","Z11281":"instrumental of \"škola\" is \"školom\"","Z11282":"instrumental of \"obitelj\" is \"obitelji\"","Z11283":"If ends with a replace with om else add i","Z11284":"regular Croatian feminine nominative plural","Z11285":"plural of \"budućnost\" is \"budućnosti\"","Z11286":"plural of \"knjiga\" is \"knjige\"","Z11287":"if ends with \"a\" replace it with \"e\" else add \"i\"","Z11288":"regular Croatian feminine genitive plural","Z11289":"sort letters of a string","Z11290":"sort wiki: iikw","Z11291":"sort فارسی‎‎: ارسفی‎‎","Z11292":"join(sorted)","Z11293":"sort Wikifunctions: Wcfiiiknnostu","Z11294":"split.sort.join","Z11295":"budućnost: genitive plural - budućnosti","Z11296":"rupa - genitive plural: rupa","Z11297":"if not ends with \"a\", add \"i\"","Z11298":"regular Croatian feminine dative plural","Z11299":"stvar - dative plural: stvarima","Z11300":"škola - dative plural: školama","Z11301":"if ends with \"a\" add \"ma\" else \"ima\"","Z11302":"English possessive","Z11303":"possessive of \"John\" is \"John's\"","Z11304":"possessive of \"bricks\" is \"bricks'\"","Z11305":"add ' if it ends with \"s\", otherwise add 's","Z11306":"is an Igbo vowel ","Z11307":"is Igbo vowel JavaScript","Z11308":"regular Croatian feminine accusative plural","Z11309":"ljubav accusative plural: ljubavi","Z11310":"mačka accusative plural: mačke","Z11311":"if ends with a, replace with e, else add i","Z11312":"html escape: Python using entitydefs","Z11313":"Ŷ = &Ycirc;","Z11314":"regular Croatian feminine locative plural","Z11315":"boca locative plural: bocama","Z11316":"kost locative plural: kostima","Z11317":"if ends with a add ma, else add ima","Z11318":"\"gcf\" returns \"Guadeloupean French Creole\"?","Z11319":"regular Croatian feminine vocative plural","Z11320":"muha vocative plural: muhe","Z11321":"smrt vocative plural: smrti","Z11322":"turn a to e, else add i","Z11323":"Compact JSON of '[ \"a\", \"b\" ]' should be '[\"a\",\"b\"]'","Z11324":"Compact JSON doesn't remove space or comma within value","Z11325":"&Ycirc; = Ŷ","Z11326":"regular Croatian feminine vocative plural Python","Z11327":"not not in Python","Z11328":"hamming distance between two strings","Z11329":"Wikipedia and Wikimedia have a hamming distance of 1","Z11330":"hamming distance between two strings Python","Z11331":"hamming distance between \"abc\" and \"xyz\" should be 3.","Z11332":"regular Croatian feminine instrumental plural","Z11333":"brojka instrumental plural: brojkama","Z11334":"laž instrumental plural: lažima","Z11335":"if ends with a, add ma, otherwise add ima","Z11336":"regular Croatian masculine nominative singular","Z11337":"četverokut nominative singular: četverokut","Z11338":"poklon nominativ singular: poklon","Z11339":"itself","Z11340":"regular Croatian masculine genitive singular","Z11341":"prst genitive singular: prsta","Z11342":"is DNA nucleic acid notation","Z11343":"complete ENSG00000198125:ENST00000401702.5 with linebreaks","Z11344":"\"AATCCGCTAG\" is DNA notation","Z11345":"\" \" is uppercase","Z11346":"svršetak genitive singular: svršetka","Z11347":"lovac genitive singular: lovca","Z11348":"if ak->ka, if ac->ca, else +a","Z11349":"has and is uppercase","Z11350":"\"\" does not have uppercase","Z11351":"\"CAPITAL\" has and is uppercase","Z11352":"\"Capital\" has but is not uppercase","Z11353":"Suffix a verb to get it imperative form (Igbo)","Z11354":"Get the imperative form","Z11355":"Croatian masculine noun declension","Z11356":"jezik, u → jeziku","Z11357":"pondeljak, e → ponedeljke","Z11358":"palac, a → palca","Z11359":"replace ak->k, ac-<c, and then add suffix","Z11360":"masculine noun declension with \"a\"","Z11361":"regular Croatian masculine dative singular","Z11362":"prosinac dative singular: prosincu","Z11363":"početak dative singular: početku","Z11364":"galeb dative singular: galebu","Z11365":"masculine declension with \"u\"","Z11366":"regular Croatian masculine accusative singular","Z11367":"oganj accusative singular: oganj","Z11368":"ključ accusative singular: ključ","Z11369":"masculine accusative singular is the same as the lemma ","Z11370":"regular Croatian masculine locative singular","Z11371":"prosinac locative singular: prosincu","Z11372":"ožujak locative singular: ožujku","Z11373":"dan locative singular: danu","Z11374":"masculine declension with u","Z11375":"'ло́л' is a palindrome","Z11376":"Imperative verb of 'Gụ' is 'Gụọ'","Z11377":"imperative verb of 'ri' is 'rie'.","Z11378":"Brainfuck interpreter in JavaScript","Z11379":"Brainfuck: Simple print of `!`","Z11380":"\"!\" does not have uppercase","Z11381":"\"!\" is equal to it's own lowercase","Z11382":"has and is uppercase composition","Z11383":"has and is lowercase","Z11384":"\"capital\" has and is lowercase","Z11385":"\"\" does not have lowercase","Z11386":"has and is lowercase composition","Z11387":"\"!\" does not have lowercase","Z11388":"\"Capital\" has but is not fully lowercase","Z11389":"islower() in python","Z11390":"English verb to agent noun","Z11391":"\"sing\" → \"singer\"","Z11392":"\"dance\" → \"dancer\"","Z11393":"\"run\" → \"runner\"","Z11394":"\"act\" → \"actor\"","Z11395":"English verb to agent noun, python","Z11396":"\"author\" → \"author\"","Z11397":"\"navigate\" → \"navigator\"","Z11398":"\"engineer\" → \"engineer\"","Z11399":"\"survey\" → \"surveyor\"","Z11400":"\"correspond\" → \"correspondent\"","Z11401":"\"illustrate\" → \"illustrator\"","Z11402":"\"mentor\" → \"mentor\"","Z11403":"\"worry\" → \"worrier\"","Z11404":"\"swim\" → \"swimmer\"","Z11405":"\"listen\" → \"listener\"","Z11406":"is lowercase Python","Z11407":"is uppercase in Python","Z11408":"Equality is case-sensitive","Z11409":"Identical strings are not unequal","Z11410":"discard from start of first substring","Z11411":"discard from \"hello\" in \"Hello, hello, hello!\"","Z11412":"discard from end of first substring","Z11413":"discard from after hello in \"Hello, hello, hello!\"","Z11414":"discard from start of last substring","Z11415":"discard from last hello in \"Hello, hello, hello!\"","Z11416":"discard from end of last substring","Z11417":"discard from end of last hello in \"Hello, hello, hello!\"","Z11418":"discard until start of first substring","Z11419":"discard until hello in \"Hello, hello, hello!\"","Z11420":"discard until end of first substring","Z11421":"discard until the end of the first hello in \"Hello, hello, hello!\"","Z11422":"discard until start of last substring","Z11423":"discard until last hello in \"Hello, hello, hello!\"","Z11424":"discard until end of last substring","Z11425":"discard until the end of final hello in \"Hello, hello, hello!\"","Z11426":"italicise wrap composition","Z11427":"unescape: lookup from JSON list, python","Z11428":";\\\"áèïøæ example","Z11429":"&#7923; ?= ỳ","Z11430":"Composition: discard until last, then discard first","Z11431":"Composition: discard from end of first, then from start of last","Z11432":"composition: discard from start of first, then join the substring back on","Z11433":"composition: join substring with discard until end of first substring","Z11434":"composition: remove until end of last, then remove at end","Z11435":"composition: discard from start of last, then join substring","Z11436":"composition: discard from start of last of reversed strings","Z11437":"composition: regex replace \"substring.*\" with \"\"","Z11438":"composition: reverse of discard from start of first reverses","Z11439":"composition: join substring with discard until end of last","Z11440":"substring includes regex wildcards","Z11441":"regular Croatian masculine vocative singular","Z11442":"galeb vocative singular: galebe","Z11443":"časopis vocative singular: časopise","Z11444":"add \"e\"","Z11445":"regular Croatian masculine instrumental singular","Z11446":"rječnik instrumental singular: rječnikom","Z11447":"jezik instrumental singular: jezikom","Z11448":"add \"om\"","Z11449":"regular Croatian masculine nominative plural","Z11450":"muškarac nominative plural: muškarci","Z11451":"poklon nominative plural: pokloni","Z11452":"masculine noun declension with \"i\"","Z11453":"regular Croatian masculine genitive plural","Z11454":"pčelar gentive plural: pčelara","Z11455":"avion genitive plural: aviona","Z11456":"add \"a\"","Z11457":"regular Croatian masculine dative plural","Z11458":"dan dative plural: danima","Z11459":"časopis dative plural: časopisima","Z11460":"add \"ima\"","Z11461":"PCRE escape","Z11462":"PCRE escape, python","Z11463":"escape string of wildcards","Z11464":"PCRE escape, javascript","Z11465":"robust match by trimming quotes in CSV list","Z11466":"composition of remove at end after discard from end of first","Z11467":"composition of discard until end of first of reverses","Z11468":"composition of regex replace up to first occurrence of (PCRE escaped) substring","Z11469":"regex wildcard (.*) match","Z11470":"regular Croatian masculine accusative plural","Z11471":"escaped wildcards (\\.\\*) no match","Z11472":"požar accusative plural: požare","Z11473":"krokodil accusative plural: krokodile","Z11474":"escaped wildcard literal match","Z11475":"add \"e\" for accusative plural","Z11476":"regular Croatian masculine locative plural","Z11477":"same as dative plural","Z11478":"regular Croatian masculine instrumental plural","Z11479":"just as dative plural","Z11480":"regular Croatian masculine vocative plural","Z11481":"same as nominative plural","Z11482":"regular Croatian neuter nominative singular","Z11483":"just the lemma","Z11484":"pretty \"","Z11485":"curved “quotation” marks","Z11486":"composition of regex replaces","Z11487":"«Guillemets at the start and end of a string.»","Z11490":"pretty '","Z11491":"composition of regex replaces for '","Z11492":"left/inner/right mark replacement","Z11493":"composition of regex replacements testing position relative to spaces (or start/end of strings)","Z11494":"composition of general left/inner/right replacement","Z11495":"apostrophe replacement: 'What's going on here?'","Z11496":"‘This mightn’t behave as expected.’","Z11497":"composition of general left/inner/right replacement of '","Z11498":"javascript trimEnd","Z11499":"AaaaaA AaaAaaA aaAaAaaA → 1aaaa3 1aa2aa3 aa2a2aa3","Z11500":"isolated common mark currently replaced with right replacement","Z11501":"general positional mark replacement","Z11502":"a_aaa_a_bb_a → 5_132_4_bb_6","Z11503":"composition of regex replacements based on relative positions to spacers","Z11504":"general positional mark replacement, python","Z11505":"composition of general positional replacement","Z11506":"『Shows the function°s ≪abilities≫ with ' quotes.』","Z11507":"test against repeated substitution","Z11508":"single replaceable character defaults to isolated replacement","Z11509":"pretty \" composition of general positional replacement","Z11510":"single \" is not left or right: default to right","Z11511":"isolated ' \" ' defaults to right","Z11512":"single ' defaults to right","Z11513":"isolated ' defaults to right","Z11514":"pretty ' composition of general positional replacement","Z11515":"unicode of first character","Z11516":"python ord()","Z11517":"ord(a) = 97","Z11518":"ord(😀)=128512","Z11519":"longer string","Z11520":"\"aaaaaa\" is longer than \"b\"","Z11521":"longer string, python","Z11522":"choose first from equal length strings","Z11523":"first letter of strings: codepoints in ascending order","Z11524":"\"a\" < \"b\"","Z11525":"! (\"b\" <= \"a\")","Z11526":"only consider the first character","Z11527":"codepoints in order, python","Z11528":"in codepoint order (three characters)","Z11529":"composition of two codepoints in order","Z11530":"a <= b <= c","Z11531":"remove characters in character range","Z11532":"remove [b-d] from abcde","Z11533":"remove [a-z] from \"Wikifunctions\" → \"W\"","Z11534":"chr of codepoint","Z11535":"chr(65) = A","Z11536":"chr() in python","Z11537":"chr(128512 ) = 😀","Z11538":"next character","Z11539":"\"a\" → \"b\"","Z11540":"next character, python","Z11541":"😄→😅","Z11542":"if (string output)","Z11543":"if (string type), python","Z11544":"if(true,A,B) = A","Z11545":"recursive composition with remove all and next character","Z11546":"remove characters in character range, python","Z11547":"single replaceable character replaced with right","Z11548":"French regular plural","Z11549":"'chien' becomes 'chiens'","Z11550":"French plural, Python","Z11551":"'aurochs' is not modified","Z11552":"remove emoticons from phrase","Z11553":"remove emoticons/emoji","Z11554":"'phœnix' is not modified","Z11555":"\"😀🙋🙏🏿🌍🌜︎🌶️🗺️🏋🏾👫🏽💕🕇\" → \"\"","Z11556":"composition of remove in character range","Z11557":"is Breton plural","Z11558":"'tra' is not a Breton plural","Z11559":"'traoù' is a Breton plural","Z11560":"is Breton plural, Python","Z11561":"'pesked' is a Breton plural","Z11562":"'ebeulien' is a Breton plural","Z11563":" 'ebeulion' is a Breton plural","Z11564":"previous character","Z11565":"previous character, python","Z11566":"\"b\" → \"a\"","Z11567":"😅 → 😄","Z11568":"recursive composition with remove all and previous character","Z11569":"remove characters in character range, javascript","Z11570":"next character, JavaScript","Z11571":"previous character, javascript","Z11572":"previous(next(😄)) = 😄","Z11573":"is heterogram","Z11574":"is heterogram, python","Z11575":"subdermatoglyphic is a heterogram","Z11576":"\"Fix, Schwyz!\", quäkt Jürgen blöd vom Paß.","Z11577":"is tautogram","Z11578":"is tautogram, python","Z11579":"Veni, Vidi, Vici","Z11580":"English tautogram: all begin with \"i\"","Z11581":"Ukrainian tautogram with special punctuation character","Z11582":"next(previous(😄)) = 😄","Z11583":"binary true returns boolean","Z11584":"remove punctuation '句点は、日本語・中国語の文書で、文の終わりに打たれる約物である。'","Z11585":"link in wikitext","Z11586":"implementation using python format strings","Z11587":"link with hash","Z11588":"test for a link","Z11589":"French adjective to adverb","Z11590":"French masculine adjective to feminine","Z11591":"python French masculine adjective to feminine","Z11592":"actif → active","Z11593":"heureux → heureuse","Z11594":"général → générale","Z11595":"does with word mutate in Breton?","Z11596":"\"ki\" mutates","Z11597":"\"filip\" does not mutate","Z11598":"\"leon\" does not mutate","Z11599":"\"broc'h\" mutates","Z11600":"test for mutation, python","Z11601":"test for mutation, composition","Z11602":"string identity","Z11603":"string identity, composition","Z11604":"\"\" → \"\"","Z11605":"\"Hello, World!\"","Z11606":"X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*","Z11607":"brillant → brillamment","Z11608":"heureux → heureusement","Z11609":"premier → première","Z11610":"utilisateur → utilisatrice","Z11611":"Breton plural in -où","Z11612":"plural of \"tra\" is \"traoù\"","Z11613":"Breton -où plural, python","Z11614":"plural of \"pesk\" is \"pesked\"","Z11615":"irregular plural of \"bran\" is \"brini\"","Z11616":"Breton singulative","Z11617":"the singular form of “gwez” is “gwezenn”","Z11618":"singulative in Breton, Python","Z11619":"Breton soft mutation","Z11620":"\"ki\" converts to \"gi\"","Z11621":"\"pesk\" converts to \"besk\"","Z11622":"\"toukan\" converts to \"doukan\"","Z11623":"\"broc'h\" converts to \"vroc'h\"","Z11624":"\"dourgi\" converts to \"zourgi\"","Z11625":"\"gavr\" converts to \"c'havr\"","Z11626":"soft mutation in Breton, Python","Z11627":"Breton hard mutation","Z11628":"\"gavr\" converts to \"kavr\"","Z11629":"\"dourgi\" converts to \"tourgi\"","Z11630":"\"broc'h\" converts to \"proc'h\"","Z11631":"hardened form in Breton, python","Z11632":"Breton aspirant mutation","Z11633":"\"ki\" converts to \"c'hi\"","Z11634":"\"toukan\" converts to \"zoukan\"","Z11635":"\"peroked\" converts to \"feroked\"","Z11636":"fricative mutation in Breton, python","Z11637":"Breton plural in -où and soft mutation","Z11638":"\"bag\" converts to \"vagoù\"","Z11639":"plural in -où and soft mutation in Breton, Composition","Z11640":"Hindko plural","Z11641":"\"ALFA BRAVO CHARLIE NINE\" = \"ABC9\"","Z11642":"NATO phonetic alphabet ICAO pronunciations encode","Z11643":"\"ABC9\" → \"AL FAH. BRAH VOH. CHAR LEE. NIN-er.\"","Z11644":"NATO phonetic alphabet ICAO pronunciation encode, python","Z11645":"possessive of \"it\" is \"its\"","Z11646":"English adjective to adverb","Z11647":"\"loving\" → \"lovingly\"","Z11648":"\"fast\" → \"fast\"","Z11649":"add \"ly\", composition","Z11650":"\"merciful\" → \"mercifully\"","Z11651":"English nominative to accusative","Z11652":"\"he\" → \"him\"","Z11653":"\"she\" → \"her\"","Z11654":"\"it\" → \"it\"","Z11655":"\"they\" → \"them\"","Z11656":"\"we\" → \"us\"","Z11657":"\"I\" → \"me\"","Z11658":"\"none\" → \"none\"","Z11659":"\"who\" → \"whom\"","Z11660":"Breton plural in -où and hard mutation","Z11661":"\"bag\" → \"pagoù\"","Z11662":"Breton plural and hard form, composition","Z11663":"Breton aspirant plural in -où","Z11664":" \"pae\" → \"faeoù\"","Z11665":"Breton aspirant plural, composition","Z11666":"Hindko plural, python","Z11667":"create a link using composition","Z11668":"NATO phonetic alphabet ICAO pronunciations decode","Z11669":"\"AL FAH. BRAH VOH. CHAR LEE. NIN-er.\" = \"ABC9\"","Z11670":"NATO phonetic alphabet ICAO IPA transcription encode","Z11671":"\"ABC9\" = \"ˈælfa ˈbraːˈvo ˈtʃɑːli ˈnaɪnə\"","Z11672":"NATO phonetic alphabet ICAO IPA transcription decode","Z11673":"\"ˈælfa ˈbraːˈvo ˈtʃɑːli ˈnaɪnə\" = \"ABC9\"","Z11674":"NATO phonetic alphabet DIN 5009 IPA transcription encode","Z11675":"\"ABC9\" = \"ˈalfa ˈbravo ˈtʃali ˈnaɪnə\"","Z11676":"NATO phonetic alphabet DIN 5009 IPA transcription decode","Z11677":"\"ˈalfa ˈbravo ˈtʃali ˈnaɪnə\" = \"ABC9\"","Z11678":"has specified chars paired","Z11679":"has correctly paired brackets, python","Z11680":"({[(abc)]}) has paired brackets","Z11681":")( is not paired","Z11682":"[](){} is paired","Z11683":"[(]) is not paired","Z11684":"has all brackets paired","Z11685":"specified bracket pairing composition","Z11686":"() is paired","Z11687":"⦕⦖ is paired","Z11688":"〗〖 is not paired","Z11689":"({)} is not paired","Z11690":"strings equal length","Z11691":"\"a\" has the same length as \"b\"","Z11692":"strings equal length, python","Z11693":"string only has characters from alphabet","Z11694":"string only has characters from alphabet, python","Z11695":"\"ab\" characters are in \"abc\" alphabet","Z11696":"not all characters in \"abcd\" are from \"abc\" alphabet","Z11697":"string contains only ACGT or space, composition","Z11698":"\"Nadine\" includes all letters in \"and\"","Z11699":"case sensitive, \"ABC\" not in \"abc\"","Z11700":"Breton definite article","Z11701":"'delwenn' becomes 'an delwenn'","Z11702":"'labous' becomes 'al labous'","Z11703":"'yar' becomes 'ar yar'","Z11704":"Breton definite article, Python","Z11705":"is ISBN-10","Z11706":"ISBN-10 (python)","Z11707":"0-345-24223-8 is valid ISBN-10","Z11708":"9992158107 is valid ISBN-10","Z11709":"9971 5 0210 0 is valid ISBN-10","Z11710":"960-425-059-0 is valid ISBN-10","Z11711":"80-902734-1-6 is valid ISBN-10","Z11712":"0-8044-2957-X is valid ISBN-10","Z11713":"0 9752298 0-X is valid ISBN-10","Z11714":"invalid ISBN-10: wrong check digit","Z11715":"invalid ISBN-10: unsupported characters","Z11716":"invalid ISBN-10: mix uppercase X with lowercase x","Z11717":"invalid ISBN-10: misplaced X","Z11718":"invalid ISBN: more than 10 digits","Z11719":"invalid ISBN-10: less than 10 digits","Z11720":"has specified brackets paired, javascript","Z11721":"\"anonyme\" stays \"anonyme\"","Z11722":"German noun, -(e)n/-innen declension","Z11723":"Frau → Frauen","Z11724":"Henne → Hennen","Z11725":"Mauer → Mauern","Z11726":"Kordel → Kordeln","Z11727":"Bundeskanzlerin → Bundeskanzlerinnen","Z11728":"German noun, -(e)n declension, python","Z11729":"German noun, -s declension","Z11730":"Kamera → Kameras","Z11731":"Party → Partys","Z11732":"Jeans → Jeans","Z11733":"German noun, -s declension, python","Z11734":"Hase → Hasen","Z11735":"Bauer → Bauern","Z11736":"Mensch → Menschen","Z11737":"Herz → Herzen","Z11738":"Boden → Bodens","Z11739":"German noun, umlaut + -e declension","Z11740":"Baum → Bäume","Z11741":"Hang → Hänge","Z11742":"Saal → Säle","Z11743":"Sohn → Söhne","Z11744":"Frucht → Früchte","Z11745":"Angst → Ängste","Z11746":"Sau → Säue","Z11747":"German noun, umlaut + -e declension, javascript","Z11748":"German noun, umlaut + -e declension, python","Z11749":"German noun, -n declension","Z11750":"Bäume → Bäumen","Z11751":"Dramen → Dramen","Z11752":"German noun, -n declension, python","Z11753":"German noun, umlaut + -en declension","Z11754":"Baum → Bäumen","Z11755":"Hang → Hängen","Z11756":"Saal → Sälen","Z11757":"Sohn → Söhnen","Z11758":"Frucht → Früchten","Z11759":"Angst → Ängsten","Z11760":"Sau → Säuen","Z11761":"German noun, umlaut + -en declension, composition","Z11762":"German noun, -um/-en declension","Z11763":"Album → Alben","Z11764":"Podium → Podien","Z11765":"Interkolumnium → Interkolumnien","Z11766":"German noun, -um/-en declension, python","Z11767":"Hotel → Hotels","Z11768":"Euro → Euros","Z11769":"Leben → Leben","Z11770":"Breton plural in -ioù","Z11771":"plural of \"levr\" is \"levrioù\"","Z11772":"plural of \"tro\" is \"troioù\"","Z11773":"Breton plural -ioù, composition","Z11774":"Breton plural -où, composition","Z11775":"Breton plural in -ed","Z11776":"\"pesk\" → \"pesked\"","Z11777":"\"leon\" → \"leoned\"","Z11778":"Breton plural -ed, composition","Z11779":"Breton plural -ien","Z11780":"mevel → mevelien","Z11781":"\"ebeul\" → \"ebeulien\"","Z11782":"\"mab\" → \"mibien\" ","Z11783":"Breton plural -ien, composition","Z11784":"\"beleg\" → \"beleien\"","Z11785":"Breton plural -ien, python","Z11786":"Breton plural -ioù and soft mutation","Z11787":"Breton plural -ioù and soft mutation, composition","Z11788":"the soft plural of \"taol\" is \"daolioù\"","Z11789":"German noun, -e declension","Z11790":"Tier → Tiere","Z11791":"Schaf → Schafe (not Schäfe)","Z11792":"Gehege → Gehege","Z11793":"Gefolge → Gefolge (not Gefölge)","Z11794":"German noun, -e declension, python","Z11795":"English comparative adjective","Z11796":"high → higher","Z11797":"wide → wider","Z11798":"add \"er\" or \"r\", composition","Z11799":"remove all non-digits, regex composition","Z11800":"case-insensitive string equality, uppercase composition","Z11801":"valid smiles for titanium(IV) ion","Z11802":"\"Hello, world!\" doesn't end with a period","Z11803":"invalid SMILES for propionic acid","Z11804":"invalid SMILES (incomplete stereochemistry)","Z11805":"valid SMILES for beta carotene (isomeric)","Z11806":"valid SMILES for deuterochloroform","Z11807":"valid SMILES for cephalostatin-1","Z11808":"is SMILES notation, composition","Z11809":"[Nc] is not a valid atom","Z11810":"valid SMILES for (2S,5R)-chalcogran","Z11811":"remove isotopic specificity in SMILES","Z11812":"carbon-14 labelled benzene","Z11813":"deuterochloroform","Z11814":"remove isotopic specificity, composition","Z11815":"remove stereochemical specificity at tetrahedral sites in SMILES string","Z11816":"L-alanine","Z11817":"L-alanine, alternate order","Z11818":"remove single or double @, composition","Z11819":"invalid input, return unaltered","Z11820":"valid SMILES [O--]","Z11821":"\"LOWERCASE\" is not \"LOWERCASE\"","Z11822":"Urdu verb conjugation","Z11825":"valid cyclopropene ring-closing at double bond","Z11826":"alternate valid cyclopropene ring-closing at double bond","Z11827":"invalid cyclopropene explicitly specifies conflicting types for the ring-closing bond","Z11828":"and (quaternary)","Z11829":"true if all inputs true","Z11830":"composition of two binary ands","Z11831":"false if one of the inputs is false","Z11832":"quaternary and, Python","Z11833":"\"paint\" → \"painter\"","Z11834":"German noun, -(e)n declension","Z11835":"(!)composition implementation of -en German noun declension","Z11836":"German noun, -(e)n declension, Python","Z11837":"Pinguin → Pinguinen","Z11838":"Kürzel → Kürzeln","Z11839":"regular Croatian neuter genitive singular","Z11840":"genitive singluar of jezero: jezera","Z11841":"genitive singular of doba: doba","Z11842":"genitive singular of ekvinocij: ekvinocija","Z11843":"regular Croatian neuter accusative singular","Z11844":"accusative singular of kolo: kolo","Z11845":"accusative singular of glasovanje: glasovanje","Z11846":"accusative singular of let: let","Z11847":"same as nominative singular","Z11848":"last character of Café is é","Z11849":"and (octanary)","Z11850":"composition of two quaternary ands","Z11851":"and of 8 trues is true","Z11852":"pipe-separated chemical element symbols","Z11853":"empty string","Z11854":"is a chemical element symbol","Z11855":"C is the chemical symbol for carbon","Z11856":"is a chemical element symbol, composition","Z11857":"Na is the chemical symbol for sodium","Z11858":"NaCl is a compound not an element","Z11859":"Uuo was a temporary symbol but has been replaced and is no longer valid","Z11860":"\"carbon\" is the name of a chemical element, not the symbol","Z11861":"octanary and, Python","Z11862":"even one false means the and is false","Z11863":"is it one of AEIOU","Z11864":"A is in AEIOU","Z11865":"i is in AEIOU","Z11866":"'à' is considered one of A/E/I/O/U","Z11867":"y is not in AEIOU","Z11868":"'æ' is not one of A/E/I/O/U","Z11869":"ae is not in AEIOU","Z11870":"o is in AEIOU","Z11871":"Accent-ignorant (naïve) JavaScript implementation","Z11872":"in ['a', 'e', ... 'O', 'U']","Z11873":"u in AEIOU","Z11874":"replace vowel at end with suffix, else just add suffix","Z11875":"neuter noun declension with a","Z11876":"lijepo, e → lijepe","Z11877":"ruke, e → ruke","Z11878":"drag, a → draga","Z11879":"remove last character","Z11880":"omit final vowel and add suffix, composition ","Z11881":"remove last letter from ABC → AB","Z11882":"remove last letter from X → empty string","Z11883":"x[:-1]","Z11884":"condense to numeric charges in SMILES string","Z11885":"[Ti++++] → [Ti+4]","Z11886":"condense to numeric charges in SMILES string, python","Z11887":"[S--] → [S-2]","Z11888":"[Cu++].[O-]S(=O)(=O)[O-] → [Cu+2].[O-]S(=O)(=O)[O-]","Z11889":"leave [S-2] unchanged","Z11890":"C-C-O has bonds not charges, leave unchanged","Z11891":"correct bracketed atoms in SMILES","Z11892":"[Ti] is a valid atom","Z11893":"[Nc] is not a valid atom/element","Z11894":"tree of ors","Z11895":"composition to remove all valid atoms then see if any remain","Z11896":"remove valid [bracketed] atoms then test for remaining brackets, python","Z11897":"stereochemistry and explicit hydrogens are valid","Z11898":"CuSO4 numeric charges in brackets are fine","Z11899":"all characters in SMILES string are valid","Z11900":"all characters in SMILES are valid, python","Z11901":"cephalostatin-1 has only valid characters","Z11902":"\"Hello, World!\" has characters not allowed in a SMILES string","Z11903":"all bonds in SMILES string have atoms in between","Z11904":"cephalostatin-1 has valid bond sequences","Z11905":"bond sequence check, composition","Z11906":"- in [O--] are charges not sequential bonds","Z11907":"C--C has consecutive bonds","Z11908":"test for sequential bonds, python","Z11909":"beta-carotene has valid bond sequences","Z11910":"is SMILES notation, python","Z11911":"deuterium is valid","Z11912":"invalid SMILES [Cl(H)]","Z11913":"invalid SMILES [Cl(]H)","Z11914":"invalid SMILES [Cl[H]]","Z11915":"valid SMILES: ICONS","Z11916":"invalid SMILES: IKONS","Z11917":"correct unbracketed atoms in SMILES string","Z11918":"correct unbracketed atoms in SMILES, composition","Z11919":"I, C, O, N, S valid outside brackets","Z11920":"K not valid outside brackets","Z11921":"correct unbracketed atoms, python","Z11922":"valid SMILES: ring 2 before ring 1","Z11923":"invalid SMILES: ring 2 skipped","Z11924":"valid SMILES allene-like chirality class","Z11925":"valid SMILES with trigonal bipyramidal chiral class (up to #20)","Z11926":"allene like chirality class","Z11927":"valid trigonal bipyramidal chirality class","Z11928":"valid SMILES reusing ring number 0","Z11929":"Punjabi Gurmukhi masculine nominal ā > e","Z11930":"Punjabi Gurmukhi masculine nominal ā > e, Python","Z11931":"ਹੋਇਆ becomes ਹੋਏ","Z11932":"ਬਾਇਆਂ becomes ਬਾਏਂ","Z11933":"ਹੰਭਿਆ becomes ਹੰਭੇ","Z11934":"ਬਹਿਆਂ becomes ਬਹੇਂ","Z11935":"ਕੁੰਡਲੀਆ becomes ਕੁੰਡਲੀਏ","Z11936":"ਲੰਮਾ becomes ਲੰਮੇ","Z11937":"ਸ਼ਰਾਬੀ is not modified","Z11938":"Rohingya Hanifi noun ergative case","Z11939":"+e Python","Z11940":"𐴉𐴟𐴖𐴝 > 𐴉𐴟𐴖𐴝𐴘𐴠","Z11941":"is vowel from CSV options, composition","Z11942":"test for Breton mutation, CSV composition","Z11943":"valid SMILES for C60","Z11944":"regular Croatian neuter dative singular","Z11945":"dative singular žito: žitu","Z11946":"dative singular of let: letu","Z11947":"dative singular of oko: oku","Z11948":"neuter noun declension with u","Z11949":"regular Croatian neuter locative singular","Z11950":"locative singular of smjer: smjeru","Z11951":"locative singular of proljeće: proljeću","Z11952":"locative singular of podrijetlo: podrijetlu","Z11953":"same as dative singular","Z11954":"regular Croatian neuter vocative singular","Z11955":"vocative singular of ekvinocij: ekvinociju","Z11956":"vocative singular of more: more","Z11957":"vocative singular of sjećanje: sjećanje","Z11958":"if ends in vowel, identity else add u","Z11959":"Regex in JavaScript","Z11960":"regular Croatian neuter instrumental singular","Z11961":"ends with one of AEIOU","Z11962":"red does not end with AIEOU","Z11963":"blue does end with AIEOU","Z11964":"is AEIOU(last character(x))","Z11965":"rođenje instrumental singular: rođenjem","Z11966":"ljeto instrumental singular: ljetom","Z11967":"let instrumental singular: letom","Z11968":"add \"m\" if ends with vowel, else \"om\"","Z11969":"regular Croatian neuter nominative plural","Z11970":"područje nominative plural: područja","Z11971":"zlo nominative plural: zla","Z11972":"regular Croatian neuter declination with a","Z11973":"regular Croatian neuter genitive plural","Z11974":"grožđe genitive plural: grožđa","Z11975":"računalo genitive plural: računala","Z11976":"ekvinocij genitive plural: ekvinocija","Z11977":"replace vowel with a, else add a","Z11978":"regular Croatian neuter dative plural","Z11979":"stočarstvo dative plural: stočarstvima","Z11980":"srce dative plural: srcima","Z11981":"ekvinocij dative plural: ekvinocijima","Z11982":"remove vowel at end if any, then add ima","Z11983":"regular Croatian neuter accusative plural","Z11984":"same as genitive plural","Z11985":"regular Croatian neuter vocative plural","Z11986":"just as genitive plural","Z11987":"regular Croatian neuter locative plural","Z11988":"just like dative plural","Z11989":"regular Croatian neuter instrumental plural","Z11990":"equivalent to the dative plural","Z11991":"deprecated: German noun, -(e)s genitive declension","Z11992":"Haus → Hauses","Z11993":"Gehäuse → Gehäuses","Z11994":"'Kind' becomes 'Kinds'","Z11995":"Python German noun, -(e)s genitive declension","Z11996":"German noun, umlaut + -er declension","Z11997":"Haus → Häuser","Z11998":"composition German noun, umlaut + -er declension","Z11999":"Lamm → Lämmer","Z12000":"Kalb → Kälber","Z12001":"Loch → Löcher","Z12002":"Buch → Bücher","Z12003":"Licht → Lichter","Z12004":"German noun, umlaut + -ern declension","Z12005":"Haus → Häusern","Z12006":"Lamm → Lämmern","Z12007":"Kalb → Kälbern","Z12008":"Loch → Löchern","Z12009":"Buch → Büchern","Z12010":"Licht → Lichtern","Z12011":"German noun, umlaut + -ern declension, composition","Z1913":"Manchu (Mongolian script)","Z1914":"Manchu (Latin script)","Z12014":"Punjabi plural","Z12015":"ਸਾਇਆ becomes ਸਾਇਆਂ","Z12016":"ਬਾਇਆਂ is not modified","Z12017":"ਵਾਇਸਰਾਏ becomes ਵਾਇਸਰਾਇਆਂ","Z12021":"Punjabi plural of \"ਪਊਆ\"","Z12022":"Punjabi plural of \"ਭਾਈਆ\"","Z12023":"Punjabi plural of \"ਨਾਂਵ\"","Z12024":"Punjabi plural of  \"ਨਿਆਉਂ\"","Z12025":"Punjabi plural of \"ਡੇਮੂੰ\"","Z12026":"Punjabi plural of \"ਅਰਾਈਂ\"","Z12027":"Punjabi plural of \"ਸਮਾਂ\"","Z12028":"Punjabi plural of \"ਸ਼ੀਸ਼ਾ\"","Z12029":"Punjabi plural of \"ਨਹਿ\"","Z12030":"Punjabi plural of  \"ਸ਼ਰਾਬੀ\"","Z12036":"Punjabi feminine noun plural","Z12051":"Punjabi feminine noun plural (\"ਕਾਟੋ\")","Z12052":"Punjabi feminine noun plural (\"ਰੌ\")","Z12053":"Punjabi feminine noun plural (\"ਜੂੰ\")","Z12054":"Punjabi plural (\"ਰੇਡੀਓ\")","Z12055":"Punjabi plural (\"ਰੀਵੀਊ\")","Z12056":"Punjabi plural (\"ਨਿਆਇ\")","Z12058":"Punjabi Shahmukhi masculine nominal ā > e","Z12059":"Punjabi Shahmukhi masculine nominal ā > e (\"ہتھّ\")","Z12060":"Punjabi Shahmukhi masculine nominal ā > e (\"راہ\")","Z12071":"Punjabi Shahmukhi masculine nominal ā > e (\"شکریہ\")","Z12072":"Punjabi Shahmukhi masculine nominal ā > e (\"جٹوآ\")","Z12073":"Punjabi Gurmukhi masculine nominal ā > e (\"ਲਿਆ\")","Z12074":"Python Punjabi Shahmukhi masculine nominal ā > e","Z12075":"𐴉𐴟𐴌𐴟𐴥𐴐𐴢 > 𐴉𐴟𐴌𐴟𐴥𐴐𐴠","Z12076":"𐴒𐴡𐴤𐴌 > 𐴒𐴡𐴤𐴌𐴠","Z12077":"Punjabi Shahmukhi masculine nominal ā > e (\"کوہ\")","Z12078":"Persian plural","Z12079":"+ ha Python ","Z12080":"Persian plural (\"لنگوته\")","Z12082":"Brahui (Perso-Arabic) nominative case plural","Z12101":"Brahui (Perso-Arabic) nominative case plural ( \"کوڈ\" )","Z12102":"Brahui (Perso-Arabic) nominative case plural ( \"چوَٹ\" )","Z12103":"Brahui (Perso-Arabic) nominative case plural ( \"لوت\" )","Z12104":"Brahui (Perso-Arabic) nominative case plural ( \"لد\" )","Z12105":"Brahui (Perso-Arabic) nominative case plural ( \"مچ\" )","Z12106":"Brahui (Perso-Arabic) nominative case plural ( \"بج\" )","Z12107":"Brahui (Perso-Arabic) nominative case plural ( \"لوک\" )","Z12108":"Brahui (Perso-Arabic) nominative case plural ( \"سانگ\" )","Z12109":"Brahui (Perso-Arabic) nominative case plural ( \"ملخ\" )","Z12110":"Brahui (Perso-Arabic) nominative case plural ( \"تُغ\" )","Z12115":"-(r)(a) +(ģ)(á)k Python","Z12116":"Rohingya Hanifi noun genitive case","Z12117":"+r Python","Z12118":"𐴇𐴝𐴕 > 𐴇𐴝𐴕𐴡𐴌","Z12119":"𐴏𐴝𐴁𐴝𐴤𐴓𐴢 > 𐴏𐴝𐴁𐴝𐴤𐴓𐴡𐴌","Z12120":"𐴏𐴞𐴀𐴟𐴥 > 𐴏𐴞𐴀𐴟𐴥𐴌","Z12121":"Balochi (Sayad Hashmi orthography) adjective attributive form","Z12125":"Add two integers Python","Z12126":"\"3\" + \"4\" = \"7\"","Z12127":" Add two integers JavaScript","Z12128":"Rohingya Hanifi noun object case","Z12129":"+re composition ","Z12130":"Rohingya Hanifi noun locative case","Z12131":"+t Python","Z12132":"Rohingya Hanifi noun ablative case","Z12133":"+ttu, composition","Z12134":"Rohingya Hanifi noun benefactive case","Z12135":"+llu Python","Z12136":"suffix join composition","Z12137":"Tajik plural","Z12138":"+ho composition","Z12141":"Brahui (Perso-Arabic) genitive case plural","Z12142":"[plural]-k +tá composition","Z12144":"Brahui (Perso-Arabic) object case plural","Z12145":"[plural]-k +te composition","Z12147":"Brahui (Perso-Arabic) ablative case plural","Z12148":"[object plural]+án composition","Z12149":"Brahui (Perso-Arabic) instrumental case plural","Z12150":"[object plural]+aŧ composition","Z12151":"Brahui (Perso-Arabic) comitative case plural","Z12152":"[object plural] + to composition","Z12153":"Brahui (Perso-Arabic) inessive case plural","Z12154":"[object plural]+ŧí composition","Z12155":"Brahui (Perso-Arabic) allative case plural","Z12156":"[object plural]+ae composition","Z12157":"Brahui (Perso-Arabic) benefactive case plural","Z12158":"[object plural]+ki composition","Z12159":"Brahui (Perso-Arabic) adessive case plural","Z12160":"[object plural]+k composition","Z12161":"Brahui (Perso-Arabic) terminative case plural","Z12162":"[adessive plural]+á composition","Z12163":"Sindhi (Perso-Arabic) masculine u > a","Z12164":"u > a composition","Z12166":"Sindhi (Devanagari) masculine u > a","Z12167":"composition Sindhi (Devanagari) masculine u > a","Z12168":"Sindhi (Perso-Arabic) masculine u > ā~","Z12169":"[oblique base]+ā~ composition","Z12170":"Sindhi (Devanagari) masculine u > ā~","Z12171":"[oblique base]+ā~ composition (Devanagari)","Z12172":"Sindhi (Perso-Arabic) masculine u > ani","Z12173":"[oblique base]+ani composition (Perso-Arabic)","Z12174":"Sindhi (Devanagari) masculine u > ani","Z12175":"[oblique base]+ani composition (Devanagari)","Z12176":"is leap year (Nanakshahi calendar)","Z12177":"is Nanakshahi leap year (Python)","Z12178":"is 547 a leap year?","Z12179":"is 556 a leap year?","Z12180":"Sindhi (Perso-Arabic) feminine u > uni","Z12181":"-u +uni composition (Perso-Arabic)","Z12183":"Sindhi (Devanagari) feminine u > uni","Z12184":"-u +uni composition (Devanagari)","Z12186":"Rohingya Fonna noun ergative case","Z12187":"+e Python (Fonna)","Z12188":"شُنڑَ > شُنڑَيࣦ","Z12189":"Turkish valid final consonant cluster","Z12190":"validate word final cluster, Python ","Z12192":"legs","Z12194":"Rohingya Hanifi permissible geminate","Z12195":"match permitted consonant, Python","Z12196":"𐴉","Z12197":"𐴒","Z12198":"Punjabi Gurmukhi Dhanni gerund form","Z12199":"Gurmukhi Dhanni gerund, Python","Z12202":"speedy → speedier","Z12203":"English regular superlative form","Z12204":"Superlative of 'fast' is 'fastest'","Z12205":"Superlative of 'good' is 'best'","Z12206":"Superlative of 'expensive' is 'most expensive'","Z12207":"Superlative of 'speedy' is 'speediest'","Z12208":"Superlative of 'witty' is 'wittiest'","Z12209":"Superlative of 'small' is 'smallest'","Z12210":"Superlative of 'hot' is 'hottest'","Z12211":"add 'st' if ends with 'e', else add 'est'","Z12212":"good → better","Z12213":"big → bigger","Z12214":"hot → hotter","Z1911":"Bole","Z1912":"Karekare","Z560":"Invalid evaluation result","Z572":"Reached recursion limit in orchestrator","Z573":"Reached recursion limit in evaluator","Z12215":"Devanagari to Mundari Bani","Z12216":"Devanagari to Mundari Bani, python","Z12217":"Bilibili avid to bvid","Z12218":"Bilibili avid to bvid, python","Z12219":"Bilibili bvid to avid","Z12220":"Bilibili bvid to avid, python","Z12224":"extended unicode grafemes reverse","Z12225":"Urdu remove gerund suffix","Z12226":"-nā Urdu (Python)","Z12228":"Urdu verb stem from gerund","Z12229":"verb stem ending Urdu (python)","Z12230":"Urdu join verb stem to conjunctive adverbial","Z12231":"+[space]k Urdu (composition)","Z12232":"Urdu join verb stem to potential participle/gerund","Z12233":"+n Urdu (composition)","Z12234":"Urdu join verb stem to imperfect participle","Z12235":"+t Urdu (composition)","Z12236":"Urdu join masculine singular suffix","Z12237":"+ā Urdu (composition)","Z12238":"Urdu join masculine plural suffix","Z12239":"+e Urdu (composition)","Z12240":"Urdu oblique gerund / masculine plural","Z12241":"+ne Urdu (composition)","Z12242":"Urdu conjunctive adverbial","Z12243":"[stem] [k]+e Urdu (composition)","Z12244":"Urdu absolute construction","Z12245":"[stem] [k]+r Urdu (composition)","Z12246":"Urdu feminine singular potential participle","Z12247":"Urdu join feminine singular suffix","Z12248":"+ī Urdu (composition)","Z12249":"[stem][n]+e Urdu (composition)","Z12252":"Python unicodedata.normalize()","Z12253":"empty suffix","Z12254":"Python str.removesuffix()","Z12255":"What is this function?","Z12256":"What is this function?, javascript","Z12258":"has and is lowercase, javascript","Z12259":"is pascal case, regex composition","Z12260":"JavaScript decode NATO phonetic alphabet","Z12261":"JavaScript count plurality","Z12262":"Finnish genitive singular","Z12263":"Finnish genitive plural, javascript","Z12264":"\"hi12!€\" is not alphanumeric","Z12265":"vieux → vieille","Z12266":"beau → belle","Z12267":"is anagram (letter counting, Python)","Z12268":"is Breton verb","Z12269":"bezañ is a Breton verb","Z12270":" beajiñ is a Breton verb","Z12271":"berraat is a Breton verb","Z12272":"is Breton verb, python","Z12273":"JavaScript Regex","Z12274":"Boolean as String, composition (if)","Z12275":"\"0_1\" is not a valid positive integer","Z12276":"is valid positive integer Composition (Regex)","Z12277":"To Pascal Case - already pascal","Z12278":"Empty string to pascal case","Z12279":"is numeric Regex Composition","Z12280":"is alphanumeric Regex Composition","Z12281":"Breton plural in –ioù with hard mutation","Z12283":"Breton plural in –ioù with hard mutation Composition","Z12284":"Breton aspirant plural in -ioù","Z12287":"Breton aspirant plural in -ioù, composition","Z12288":"Breton plural in -ed and soft mutation","Z12290":"Breton plural in -ed and soft mutation, composition","Z12291":"Breton plural in -ed and hard mutation","Z12293":"Breton plural in -ed and hard mutation, composition","Z12294":"is leap year (Hebrew Calendar)","Z12295":"Breton plural in -ed and aspirant mutation","Z12297":"composition Breton plural in -ed and aspirant mutation","Z12298":"Breton plural in -ien and soft mutation","Z12300":"composition Breton plural in -ien and soft mutation","Z12301":"Breton plural in -ien and hard mutation","Z12303":"is Hebrew Calendar leap year (Python)","Z12305":"Breton plural in -ien and aspirant mutation","Z12308":"check year 5784 was  a leap year","Z12309":"is Hebrew Calendar leap year (JavaScript)","Z12310":"check year 5783 was not a leap year","Z12311":"unwrap string Python using slice notation","Z12312":"fallback if string is empty Python","Z12313":"JavaScript boolean left","Z12314":"JavaScript implementation of Get first item of a Typed pair","Z12315":"Convert line endings: CRLF to LF","Z12316":"regular expression substitute with flags","Z12317":"Javascript Regular expresion substitute","Z12318":"Duplicate characters","Z12319":"lookaheads and lookbehinds","Z12320":"Breton conjugation present 1st person singular","Z12323":"Breton conjugation present 2nd person singular","Z12326":"Breton conjugation present 3rd person singular","Z12330":"Breton conjugation present 1st person plural","Z12333":"Breton 2nd person plural present tense","Z12335":"Breton 2nd person plural present tense Composition","Z12336":"Breton conjugation present 3rd person plural","Z12339":"Breton conjugation present person 0","Z12342":"Breton conjugation future 1st person singular","Z12345":"Breton conjugation future 2nd person singular","Z12348":"Breton conjugation future 3rd person singular","Z12351":"Breton conjugation future 2nd person plural (-oc'h)","Z12354":"Breton conjugation future 2nd person plural (-ot)","Z12357":"Breton conjugation future 1st person plural","Z12359":"Breton conjugation future 1st person plural, composition","Z12360":"Breton conjugation future 3rd person plural","Z12362":"Breton conjugation future 3rd person plural, composition","Z12363":"Breton conjugation future person 0","Z12365":"Breton conjugation future person 0, composition","Z12366":"Breton conjugation imperfect 1st person singular","Z12368":"Breton conjugation imperfect 1st person singular, composition","Z12369":"Breton conjugation imperfect 2nd person singular","Z12371":"Breton conjugation imperfect 2nd person singular, composition","Z12372":"Breton conjugation imperfect 3rd person singular","Z12374":"Breton conjugation imperfect 3rd person singular, composition","Z12375":"Breton conjugation imperfect 1st person plural","Z12377":"Breton conjugation imperfect 1st person plural, composition","Z12378":"Breton conjugation imperfect 2nd person plural","Z12380":"Breton conjugation imperfect 2nd person plural, composition","Z12381":"Breton conjugation imperfect 3rd person plural","Z12383":"Breton conjugation imperfect 3rd person plural, composition","Z12384":"Breton conjugated form","Z12387":"plural of \"news\" is \"news\"","Z12388":"lowercase: PİJAMALI HASTA, YAĞIZ ŞOFÖRE ÇABUCAK GÜVENDİ.","Z12390":"(!) replicate string n-times Python (duplicate?)","Z12391":"Remove diacritics","Z12392":"Remove diacritics (Python)","Z12393":"Diacritics removed from \"été\"","Z12394":"if (string type), JavaScript","Z12395":"'ora per poi io preparo' is palindrome","Z12396":"\"Hello_World\" is not snake case","Z12397":"Remove diacritics (JavaScript)","Z12398":"Remove diacritics (empty string)","Z12399":"Remove diacritics (nothing to remove)","Z12400":"Has diacritics","Z12401":"Has diacritics (composition with remove diacritics)","Z12402":"Has diacritics (empty string: no)","Z12403":"Has diacritics (string with none: none)","Z12404":"Has diacritics (été: yes)","Z12405":"Has diacritics (JavaScript)","Z12406":"if(false,A,B) = B","Z12407":"plural of \"attorney general\" is \"attorneys general\"","Z12408":"is an Igbo pseudo-vowel(myiriụdaume)","Z12409":"Check Igbo word for pseudo -vowel ","Z12410":"'nke'  Test ","Z12411":"'Mma' Test","Z12412":"'Mke' Test","Z12413":"'nje' test","Z12418":"aigu → aiguë","Z12419":"pareil → pareille","Z12420":"secret → secrète","Z12421":"muet → muette","Z12422":"délicieux → délicieuse","Z12423":"antérieur → antérieure","Z12424":"menteur → menteuse","Z12425":"frais → fraîche","Z12426":"méchant → méchamment","Z12427":"is prime","Z12428":"is prime (Python)","Z12429":"(!) numeric integer string is odd","Z12430":"number is odd (python)","Z12431":"2 is not odd","Z12432":"3 is odd","Z12433":"17 is prime","Z12434":"529 is not prime","Z12435":"number is odd (JavaScript)","Z12436":"Does this French verb belong to 1st group?","Z12439":"Does this French verb belong to 2nd group?","Z12440":"Does this French verb belong to 3rd group?","Z12441":"Does this French verb belong to 1st group comp","Z12442":"\"lancer\" belongs to 1st group","Z12443":"\"my_string\" is snake case","Z12444":"\"aller\" does not belong to the 1st group","Z12445":"\"finir\" doesn't belong to 1st group","Z12446":"Does this French verb belong to 2nd group comp","Z12447":"\"finir\" belongs to 2nd group","Z12448":"Breton conjugation preterite 1st person singular (-is)","Z12450":"Breton conjugation preterite 1st person singular (-is), composition","Z12451":"Breton conjugation preterite 1st person singular (-jon)","Z12453":"Breton conjugation preterite 1st person singular (-jon), composition","Z12454":"Breton conjugation preterite 2nd person singular","Z12456":"Breton conjugation preterite 2nd person singular, composition","Z12457":"Breton conjugation preterite 3rd person singular","Z12459":"Breton conjugation preterite 3rd person singular, composition","Z12460":"Breton conjugation preterite 1st person plural","Z12462":"Breton conjugation preterite 1st person plural, composition","Z12463":"Breton conjugation preterite 2nd person plural","Z12465":"Breton conjugation preterite 2nd person plural, composition","Z12466":"Breton conjugation preterite 3rd person plural","Z12468":"Breton conjugation preterite 3rd person plural, composition","Z12469":"Breton conjugation preterite person 0","Z12471":"Breton conjugation preterite person 0, composition","Z12472":"JavaScript Absolute Value","Z12473":"(!) cosine","Z12474":"JavaScript cosine","Z12475":"cos(1.047) == 0.5001710745970701","Z12476":"(!) modulo - string types","Z12477":"mod(2, 2) == 0","Z12478":"JavaScript modulo","Z12479":"mod(3,2) == 1","Z12480":"(!) numeric string is even","Z12481":"Composite modulo 2","Z12482":"is even: 2 is even","Z12483":"JavaScript modulo 2","Z12484":"is even: 3 is not even","Z12485":"Composite negated is even","Z12486":"Composite negated is odd","Z12487":"Composite negated modulo 2","Z12488":"is even: -1 is not even","Z12489":"is even: 2.4 is not even (or odd)","Z12490":"is even: 0 is even","Z12491":"Does this French verb belong to 3rd group comp","Z12492":"\"aller\" belongs to 3rd group","Z12493":"\"voir\" belongs to 3rd group","Z12494":"\"haïr\" doesn't belong to 3rd group","Z12495":"\"voir\" doesn't belong to 2nd group","Z12496":"\"prendre\" belongs to 3rd group","Z12497":"(!) inverse cosine","Z12498":"acos(-0.5) = 2.0943951023931957","Z12499":"JavaScript Math.acos()","Z12500":"(!) inverse hyperbolic cosine","Z12501":"acosh(1) = 0","Z12502":"acosh(2) = 1.3169578969248166","Z12503":"acosh(2.5) = 1.566799236972411","Z12504":"JavaScript Math.acosh()","Z12505":"(!) inverse sine","Z12506":"asin(-0.5) = -0.5235987755982989","Z12507":"JavaScript Math.asin","Z12509":"(!) inverse hyperbolic sine","Z12510":"asinh(1) = 0.881373587019543","Z12511":"asinh(0) = 0","Z12512":"asinh(-1) = -0.881373587019543","Z12513":"asinh(2) = 1.4436354751788103","Z12514":"JavaScript Math.asinh","Z12516":"Multiplication: 2*3=6","Z12517":"Multiplication: 2*-3=-6","Z12518":"Multiplication: -2*3=-6","Z12519":"Multiplication: -2*-3=6","Z12520":"JavaScript *","Z12521":"Multiplication: 0.25*4=1","Z12522":"(!) division of numeric strings","Z12523":"Division: 1/2=0.5","Z12524":"Division: 2/1=2","Z12525":"JavaScript /","Z12526":"(!) Body Mass Index (metric)","Z12527":"BMI: 80/1.80=24","Z12528":"Breton conjugation present conditional 1st person singular","Z12530":"Breton conjugation present conditional 1st person singular, composition","Z12531":"Composite Division","Z12532":"BMI (metric): JavaScript /","Z12533":"Breton conjugation present conditional 2nd person singular","Z12535":"Breton conjugation present conditional 2nd person singular, composition","Z12536":"Breton 3rd person singular present conditional form","Z12538":"Breton 3rd person singular present conditional form Composition","Z12539":"Breton conjugation present conditional 1st person plural","Z12541":"Breton conjugation present conditional 1st person plural, composition","Z12542":"Breton conjugation present conditional 2nd person plural","Z12544":"Breton conjugation present conditional 2nd person plural, composition","Z12545":"Breton conjugation present conditional 3rd person plural","Z12547":"Breton conjugation present conditional 3rd person plural, composition","Z12548":"Breton conjugation present conditional person 0","Z12550":"Breton conjugation present conditional person 0, composition","Z12551":"1st person singular past conditional conjugation in Breton","Z12553":"1st person singular past conditional conjugation in Breton, composition","Z12554":"Breton conjugation past conditional 2nd person singular","Z12556":"Breton conjugation past conditional 2nd person singular, composition","Z12557":"Breton conjugation past conditional 3rd person singular","Z12559":"Breton conjugation past conditional 3rd person singular, composition","Z12560":"Breton conjugation past conditional 1st person plural","Z12562":"Breton conjugation past conditional 1st person plural, composition","Z12563":"Breton conjugation past conditional 2nd person plural","Z12565":"Breton conjugation past conditional 2nd person plural, composition","Z12566":"Breton conjugation past conditional 3rd person plural","Z12568":"Breton conjugation past conditional 3rd person plural, composition","Z12569":"Breton conjugation past conditional person 0","Z12572":"(!) Body Mass Index (imperial)","Z12573":"BMI (imperial): 180/72=24","Z12574":"Composite BMI Metric Conversion","Z12575":"BMI (imperial): JavaScript","Z12576":"Convert line endings: CRLF to LF, composition","Z12578":"regular Croatian positive definite masculine singular nominative adjective form","Z12579":"positive definite masculine singular nominative of vruć: vruć","Z12580":"positive definite masculine singular nominative of ljut: ljut","Z12581":"positive definite masculine singular nominative of mal: mal","Z12582":"positive definite masculine singular nominative of brz: brz","Z12583":"positive definite masculine singular nominative of dobar: dobar","Z12584":"positive definite masculine singular nominative of crn: crn","Z12585":"the lemma, unchanged","Z12586":"return lemma","Z12587":"regular Croatian positive definite masculine singular genitive adjective form","Z12588":"add 'a'","Z12589":"positive definite masculine singular genitive of vruč: vruča","Z12590":"positive definite masculine singular genitive of ljut: ljuta","Z12591":"positive definite masculine singular genitive of brz: brza","Z12592":"join strings: JavaScript template strings","Z12593":"insert \"的\" between two Strings","Z12597":" discard from end of last substring (python)","Z12598":"discard until start of last substring (python)","Z12599":"classical Chinese arrange and negate verb + direct object","Z12600":"classical Chinese arrange and negate verb + direct object, javascript","Z12601":"( 思 ,  我 ) → 不我思","Z12602":"(!) kronecker delta","Z12603":"kronecker delta python implementation","Z12604":"kronecker delta: i = 10 and j = 10 results in 1","Z12606":"Round to decimal places","Z12607":"Round to decimal places (python)","Z12608":"Simplified Chinese classifier","Z12610":"Simplified Chinese classifier, python","Z12611":"expand from numeric charges in SMILES string","Z12612":"expand from numeric charges in SMILES string (python)","Z12613":"[Ti+4] → [Ti++++]","Z12614":"[S-2] → [S--]","Z12615":"[Cu+2].[O-]S(=O)(=O)[O-] → [Cu++].[O-]S(=O)(=O)[O-]","Z12616":"Leave [S--] unchanged","Z12617":"remove charges from SMILES string","Z12618":"remove charges from SMILES string (python)","Z12619":"[Cu+2].[O-]S(=O)(=O)[O-]","Z12620":"[Cu++].[O-]S(=O)(=O)[O-]","Z12621":"remove charges from SMILES string (regex composition)","Z12623":"balanced brackets, python","Z12624":"Replicate string n-times","Z12625":"replicate string n-times, python","Z12626":"is pangram (Latin alphabet)","Z12627":"Dutch plural","Z12628":"Python Dutch plural","Z12629":"appels","Z12630":"Esperanto accusative","Z12631":"Python Esperanto accusative","Z12632":"Accusative of \"hundo\" is \"hundon\"","Z12633":"Accusative of \"mojosa\" is \"mojosan\"","Z12634":"Accusative (indicating destination) of \"hejme\" is \"hejmen\"","Z12635":"Accusative of \"hundoj\" is \"hundojn\"","Z12636":"is Armstrong number","Z12637":"is Armstrong number, python","Z12638":"auto's","Z12639":"ontwikkelaars","Z12640":"meisjes","Z12641":"voorwaarden","Z12642":"redenen","Z12643":"boeken","Z12644":"bijen","Z12645":"enzymen","Z12646":"uien","Z12647":"Belgen","Z12648":"zonnen","Z12649":"zonen","Z12650":"gladiolen","Z12651":"lessen","Z12652":"spionnen","Z12653":"ideeën","Z12654":"raven","Z12655":"kazen","Z12656":"kinderen","Z12657":"steden","Z12658":"dagen","Z12659":"waarheden","Z12660":"politici","Z12661":"koeien","Z12662":"JS reverse using `Array.from()`","Z12664":"Urdu feminine singular potential participle, python","Z12665":"(!) exponentiation","Z12666":"(!) exponentiation, javascript **","Z12668":"reverse untyped list","Z12669":"Reverse a list in Python","Z12670":"[\"1\", \"3\", \"5\", \"7\", \"9\"] → [\"9\", \"7\", \"5\", \"3\", \"1\"] (strings)","Z12671":"sort a list by string length","Z12672":"sort a list with Array.prototype.sort()","Z12675":" [\"abc\", \"ab\", \"a\", \"abcd\", \"1\", \"12\"] sorted is [ \"a\", \"1\", \"ab\", \"12\", \"abc\", \"abcd\" ]","Z12676":"flat a list","Z12677":"flat a list with Array.prototype.flat(depth)","Z12678":"is Bangla word","Z12679":"python implementation of \"is Bangla word\"","Z12680":"\"eĥi\" (verb) does not have a accusative form","Z12681":"length of a list","Z12682":"length of a list, Python len()","Z12683":"Size of a list: three string elements in object list","Z12684":"are all true","Z12685":"are all true in Python","Z12686":"all of [T, T, T] are true","Z12687":"not all of [T, F] are true","Z12688":"all items of empty list are true","Z12689":"German noun, -(e)s genitive declension","Z12690":"Kind → [Kinds, Kindes]","Z12691":"Haus → [Hauses]","Z12692":"Gehäuse → [Gehäuses]","Z12693":"German noun, -(e)s genitive declension, python","Z12694":"number is even, python","Z12695":"3.5 is not odd (or even)","Z12696":"contains","Z12697":"The list of English days of the week includes “Wednesday”","Z12698":"is any true","Z12699":"empty list has no truth","Z12700":"any(true,false,false) → true","Z12701":"any(true,true,false) → true","Z12702":"any(true) → true","Z12703":"any(false) → false","Z12704":"using any in Python","Z12705":"some((x) => x === true)","Z12706":"recursive call to is any true","Z12707":"any of [false, true] is true","Z12708":"every(x => x)","Z12709":"are all true (recursive) Composition","Z12710":"calculate World Athletics points","Z12711":"JavaScript .includes() implementation","Z12712":"Hindustani (Urdu) verb conjugation","Z12713":"verb form list (JavaScript)","Z12714":"Hindustani (Hindi) verb conjugation","Z12715":"Hindi form list (JavaScript)","Z12716":"to string(reverse list(to list(x)))","Z12717":"reversing empty list","Z12718":"an empty list does not contain \"Hello, world!\"","Z12719":"codepoint test for prepend element to list","Z12720":"(!) sum list of numeric strings","Z12721":"sum list, python","Z12722":"sum([2,3]) == 5","Z12723":"list mean","Z12724":"list mean, python","Z12725":"mean of 1 & 10 is 5.5","Z12726":"mean of 1 & 3 is 2","Z12727":"(!) list median","Z12728":"python implementation","Z12729":"Burrows–Wheeler transform","Z12730":"Burrows–Wheeler transform, python","Z12731":"transform SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES","Z12733":"reverse strings in list","Z12734":"string test for prepend element to list","Z12735":"all meet criteria","Z12736":"all meet criteria, composition","Z12737":"all are uppercase","Z12738":"any meet criteria","Z12739":"any meet criteria, composition","Z12740":"one list item is uppercase","Z12741":"is permutation","Z12742":"(b,c,a) is a permutation of (a,b,c)","Z12743":"(a,a,a) is not a permutation of (a,b,c)","Z12744":"(b,c) is not a permutation of (a,b,c)","Z12745":"all distinct permutations","Z12746":"(a,b,a) is a permutation of (a,a,b)","Z12747":"(b,b,a) is not a permutation of (a,a,b)","Z12748":"filter for only the uppercase words in a list","Z12749":"two equal lists of strings","Z12750":"three identical elements are not the same as two","Z12751":"lists of the same elements in different order are not equal","Z12752":"empty lists are equal","Z12753":"right fold","Z12754":"test fold by concatenating three strings","Z12755":"is single element list","Z12756":"list with one element","Z12757":"empty list is not a single element list","Z12758":"list with more than one element","Z12759":"is two element list","Z12760":"list with two elements","Z12761":"empty list does not have two elements","Z12762":"single element list doesn't have two elements","Z12763":"list with more than two elements","Z12764":"24 / (6 / 2) = 8","Z12765":"one is not uppercase","Z12766":"string test of list without first element","Z12767":"concatenate two untyped lists","Z12768":"[a,b,c] + [d,e,f] = [a,b,c,d,e,f] (strings)","Z12769":"test string to list: Hello, World!","Z12770":"Suffix a verb to get it simple past tense (Igbo)","Z12771":"Get the past tense of an igbo verb","Z12772":"Suffixing the verb 'me' to get it past tense 'mere'","Z12773":"Suffixing the verb 'ga' to get it past tense 'gara'","Z12774":"(!) Body Mass Index (metric), python","Z12775":"Korean jongseong","Z12776":"감 → ㅁ","Z12777":"Korean jongseong, javascript","Z12778":"has Korean jongseong","Z12779":"is single element list, python","Z12780":"is two element list, python","Z12781":"left fold","Z12782":"test fold (left) by concatenating \"A\" \"B\" and \"C\"","Z12783":"(24 / 6) / 2 = 2","Z12784":"is Korean jongseong, composition","Z12785":"감 is a Korean consonant","Z12786":"수 is not a Korean consonant","Z12787":"Korean add (-eun) to the end of a noun","Z12788":"Korean -eun composition","Z12789":"length of “Hello, world!” is 13","Z12790":"length of empty string is 0","Z12791":"leave a list that is already flat","Z12792":"join lists, python","Z12793":"[T,T]+[F,F,T] = [T,T,F,F,T] (Booleans)","Z12794":"csv to list of strings","Z12795":"Mon,Tue,Wed,etc to list of strings","Z12796":"sequence with empty values (CSV to list)","Z12797":"quoted commas don't split elements","Z12798":"all permutations, python","Z12799":"CO is a compound not an element","Z12800":"Co is a chemical element symbol","Z12801":"Turkish Latin to Armeno-Turkish script","Z12803":"şeyl > շէյլ","Z12806":"prefix a verb to get it simple present continuous tense(Igbo)","Z12807":" prefix a verb to get it simple present continuous tense(Igbo) javascript","Z12808":"Remove negative symbol textually","Z12809":"if is empty then false, else is empty tail","Z12810":"List Reversal in Javascript","Z12811":"ROT13 is an involution for \"Bla Bla\"","Z12812":"Caesar cipher (Latin alphabet)","Z12813":"Caesar cipher with \"ANan\" and right shift of 13","Z12814":"Caesar cipher in Python","Z12815":"remove html tags","Z12816":"removed html tags '<a>a<b>r</b>   <r> t </r></a>' is 'ar  t '","Z12817":"remove html tags, composition of replace all (regex)","Z12818":"Sundanese script to Latin","Z12819":"ᮒᮡᮁ  → tyar","Z12820":"Sundanese script to Latin, python","Z12821":"Replace \"পৃথিবী\" with \"বিশ্ব\"","Z12822":"javascript `if`","Z12823":"then branch","Z12824":"else branch","Z12825":"ternary","Z12826":"\"1234\" becomes \"1234\" - numerical characters are untouched","Z12827":"flat ((a,b),c) into (a,b,c)","Z12828":"English adjective based on scientific name of plant family","Z12829":"wrap(pour, l'art) → l'art pour l'art","Z12830":"wrap((wrap(v,e),l) → level","Z12831":"is two element list, composition","Z12832":"English adjective based on scientific name of plant family (Python)","Z12833":"Rutaceae → Rutaceous","Z12834":"replace -ceae at end with -ceous, composition","Z12835":"rutaceae → rutaceous","Z12836":"RUTACEAE → RUTACEOUS","Z12837":"leave \"citrus\" unchanged since not in required format","Z12838":"don't discard anything if the substring is not present","Z12839":"don't discard if the substring is not present","Z12840":"leave unchanged when no substring is found","Z12841":"leave unchanged if there is no first substring","Z12842":"no change if substring not present","Z12843":"leave unchanged if no last substring present","Z12844":"leave unchanged if substring not present","Z12845":"unchanged if substring not present","Z12846":"is superset","Z12847":"(a,b,c) is a superset of (a,c)","Z12848":"(a,b) is not a superset of (a,b,c)","Z12849":"(a,b) is not a superset of (a,a)","Z12850":"(a,b) is a superset of () [empty set/list]","Z12851":"is longer list","Z12852":"(a,b) is longer than (z)","Z12853":"is longer list, python","Z12854":"is longer, recursive composition","Z12855":"equal length lists, not longer","Z12856":"remove first matching element from list","Z12857":"(#) codepoints: (a,c,b,c) - first c = (a,b,c)","Z12858":"remove first matching element from list, python","Z12859":"(first,second) - (third) = (first,second) unchanged","Z12860":"(a,b,c) - () = (a,b,c)","Z12861":"is superset, recursive composition","Z12862":"(a,b) contains b, codepoints","Z12863":"contains, python","Z12864":"lists have equal length","Z12865":"lists have equal length, python","Z12866":"len(a,b)==len(x,y)","Z12867":"is permutation, composition","Z12868":"is permutation, mutual superset composition","Z12869":"is permutation, python","Z12871":"is superset, python","Z12872":"(F,T,F) contains T, Booleans","Z12873":"(\"aa\",\"bb\",\"cc\") is a superset of (\"aa\",\"cc\"), strings","Z12874":"(F,T) is a superset of (T,F), Booleans","Z12875":"string is fixpoint of function","Z12876":"Javascript nā to ne","Z12877":"language code of monolingual text","Z12878":"English text → en","Z12879":"language code of monolingual text, javascript","Z12880":"\"|᮲᮰᮲᮰|\" transliterated to \"2020\"","Z12881":"\"ᮊᮛᮥᮑ ᮒᮩᮄᮀ\" transliterated to \"karunya teuing\"","Z12882":"\"ᮙᮤᮁ, ᮊᮥᮙᮠ ᮓᮙᮀ?\" transliterated to \"mir, kumaha damang?\"","Z12883":"\"ᮃᮘ᮪ᮓᮤ ᮒᮦᮂ ᮃᮚᮩᮔ ᮌᮓᮥ ᮠᮤᮏᮤ ᮘᮧᮔᮦᮊ\" transliterated to \"abdi téh ayeuna gadu hiji bonéka\"","Z12884":"validate Sundanese script","Z12885":"|᮲᮰᮲᮰| contains valid Sundanese script","Z12886":"᮲᮰᮲᮰ is not valid Sundanese script","Z12887":"is Sundanese script valid, Python language","Z12888":"is anagram, permutation composition","Z12889":"ᮙᮤᮁ, ᮊᮥᮙᮠ ᮓᮙᮀ? is valid Sundanese script","Z12890":"ᮃᮡ   does not have a closing consonant","Z12891":"ᮕ ᮡ is not valid Sundanese script","Z12892":"Is or has Bengali character","Z12893":"Is contains Bengali character (python)","Z12894":"'Hello!' is not a Bengali word","Z1915":"Rutul","Z1916":"Southeastern Kolami","Z1917":"Tooro","Z1919":"Nupe","Z12895":"Esperanto accusative plural","Z12896":"Esperanto plural accusative function composition implementation","Z12897":"\"hundo\" becomes \"hundojn\"","Z12898":"\"mojosa\" becomes \"mojosajn\"","Z12899":"join list of strings","Z12900":"Javascript array join","Z12901":"cogito ergo sum","Z12902":"join list of strings (python)","Z12903":"French regular plural, JavaScript","Z12904":"strings equal length, javascript","Z12905":"Decimal to ASCII","Z12906":"Decimal to ASCII, python","Z12907":"Hello world ! from decimal to ascii","Z12908":"Esperanto verb stem","Z12909":"Esperanto verb stem Python implementation","Z12910":"(!) Acceleration (m/s2, Newton's Second law)","Z12911":"(!) Acceleration (m/s2, Newton's Second law), javascript","Z12912":"m=6; F=4.5; a=0.75","Z12913":"Acceleration (Newton's Second law), composition","Z12914":"Prepend element to list, python","Z12915":"Right fold, python","Z12916":"Left fold, python","Z12917":"'কেমন আছেন' is a Bengali word","Z12918":"Longer string, javascript","Z12919":"Is Bangla Vowel or Consonant","Z12920":"is Bangla vowel or consonant, python","Z12921":"অ = স্বরবর্ণ: 1","Z12922":"division, python","Z12923":"modulo, python","Z12924":"cos(π) = -1","Z12925":"আম = স্বরবর্ণ: 1 ; ব্যাঞ্জনবর্ণ: 1","Z12926":"Gregorian to Bengali date (Bangladesh)","Z12927":"Gregorian to Bangla in python (Bangladesh)","Z12928":"Gregorian:2024,1,2 = Bangla:18 Poush 1430","Z12929":"slice last character, javascript","Z12930":"Esperanto indicative present tense","Z12931":"Esperanto indicative present tense composition","Z12932":"Esperanto indicative past tense","Z12933":"Esperanto indicative past tense composition","Z12934":"Esperanto indicative future tense","Z12935":"Esperanto indicative future tense composition","Z12936":"Esperanto conditional verb","Z12937":"Esperanto conditional verb composition","Z12938":"Esperanto volitive mood","Z12939":"Esperanto volitive mood composition","Z12940":"right to left text test: الفن لأجل الفن","Z12941":"debug","Z12942":"debug, python","Z12943":"false when empty string supplied","Z12944":"debug, javascipt","Z12945":"debug string → true","Z12946":"wrap a right to left overrided string","Z12947":"right to left override test","Z12948":"remove all but alphanumerics, and spaces, python","Z12949":"python if statement","Z12950":"Gregorian to Bangla in javascript (Bangladesh)","Z12951":"csv to list of strings, python","Z12952":"remove less standard punctuation","Z12953":"Han characters: 你好，世界！","Z12954":"Han characters with Latin punctuation: 你好,世界!","Z12955":"superscript ordinals 1º 1ª are not punctuation","Z12956":"subscripted & superscripted alphanumeric characters are not punctuation","Z12957":"fraction characters are not punctuation","Z12958":"uͤ diacritical marks combining two letters are not punctuation","Z12959":"emojis (single character) are not punctuation","Z12960":"🚵🏻‍♀️ a complex emoji, is not punctuation","Z12961":"append element to Typed list","Z12962":"append composition: reverse(prepend(reverse()))","Z12963":"add \"third\" to the end of (\"first,\"second\")","Z12964":"last element","Z12965":"get last, composition get_first(reverse(list))","Z12966":"last(\"first\",\"second\",\"third\") = \"third\"","Z12967":"list without last element","Z12968":"list without last composition: reverse(list without first(reverse(list)))","Z12969":"(\"first\",\"second\",\"third\") → (\"first\",\"second\")","Z12970":"replicate(\"a\",5) = \"aaaaa\"","Z12971":"Ones complement binary addition","Z12972":"Ones complement binary addition (python)","Z12973":"1010 +  1101 = 10111","Z12974":"10 + 01 = 11","Z12975":"Ones complement binary subtraction","Z12976":"Ones complement binary subtraction (python)","Z12977":"1000 - 1001 = 1111","Z12978":"replicate, javascript","Z12979":"list without last element, python","Z12980":"append element to list, python","Z12981":"length of a list, javascript","Z12982":"Binary to decimal","Z12983":"Binary to decimal (python)","Z12984":"111 = 7","Z12985":"Binary to decimal (javascript)","Z12986":"1011010 = 90","Z12987":"Binary to hexadecimal","Z12988":"Binary to hexadecimal (python)","Z12989":"1011010 = 5A","Z12990":"1011100111 = 2E7","Z12991":"check for DNA nucleic notation, python","Z12992":"(!) type implied by string","Z12993":"Basic data type (python)","Z12994":"'2' is a integer","Z12995":"'@' is a character","Z12996":"'Hello world' is a string","Z12997":"Mix colours","Z12998":"Mix colors (python)","Z12999":"black + white ≈ Gray","Z13000":"#FF0000 + #0000FF = #7f007f","Z13001":"orange + #3E9129 = #9e9b14","Z13002":"rod1 + pink = Invalid color format.","Z13003":"Mix colors (javascript)","Z13004":"Russian tautogram with punctuation","Z13005":"haben becomes hast","Z13006":"is the day name part of the French Republican Calendar 'rural' naming?","Z13007":"JS: French Republican Calendar rural name?","Z13008":"regular present in german (second person), python","Z13009":"Chestnut","Z13010":"MD2(The quick brown fox jumps over the lazy dog)","Z13011":"MD2(The quick brown fox jumps over the lazy cog)","Z13012":"MD2(\"\")","Z13013":"Thai nominalization of adjective","Z13014":"prepend \"ความ\" with composition","Z13015":"doesn't duplicate ความ","Z13016":"right fold, javascript","Z13017":"convert hex color","Z13018":"Convert HEX color (python)","Z13019":" #FF0000 is converted into RGB, HSL, HSV, CMYK","Z13021":" #87CEEB is converted into RGB, HSL, HSV, CMYK","Z13022":"#FFFF00 is converted into RGB, HSL, HSV, CMYK","Z13023":"opposite colour","Z13024":"Opposite color (python)","Z13025":"Opposite of white is black","Z13026":"Opposite of blue is yellow","Z13027":"Opposite of red is cyan (greenish-blue)","Z13028":"colour contrast ratio","Z13029":"Color contrast ratio (python)","Z13030":" #415DAA /  #E24B4B = 1.58:1","Z13031":"#FFA621 /  abcd123 = Invalid hex format","Z13032":" #50E34B /  #FF21B9 = 2.01:1","Z13033":"Color contrast ratio (javascript)","Z13034":"Thai nominalization of verb","Z13035":"Thai nominalization of verb, composition","Z13036":"apply","Z561":"Invalid evaluation request","Z562":"Incomplete evaluation request","Z563":"Call by non-reentrant executor","Z564":"Invalid executor response","Z565":"Incomplete executor request","Z574":"Reached time limit in orchestrator","Z575":"Reached time limit in evaluator","Z1816":"Komering","Z13037":"abcd123 = Invalid input format!","Z13038":"ends with aeiou, python","Z13039":"is ipv4 (python)","Z13040":"Serbian Cyrillic to Serbian Latin","Z13041":"garçon → garcon","Z13042":"Љубав in Latin is Ljubav","Z13043":"Serbian Cyrillic → Latin, example English sentence","Z13044":"using a Python dict with Cyrillic to Latin","Z13045":"Complete alphabet set conversion","Z13046":"using a map with Cyrillic to Latin mappings","Z13047":"apply(reverse,\"abc\") = \"cba\"","Z13048":"map f on (insert value to [ ])","Z13049":"apply(not,true) = false","Z13050":"all permutations of single element list","Z13051":"empty string does not end with AEIOU","Z13052":"object equality","Z13053":"strict object equality, composition","Z13054":"\"test string\" == \"test string\"","Z13055":"false == false","Z13056":"all permutations of (T,F): a permutation of ((T,F),(F,T))","Z13057":"cosine, python","Z13058":"string is fixpoint, composition","Z13059":"compose twice ROT13 for PLOP gives PLOP","Z13060":"Infix to Postfix","Z13061":"Infix to postfix (python)","Z13062":"'a + b (c ^ d) * h' returns 'abcd^h*+'","Z13063":"'a + b * c - (d / e) ^ f' returns 'abc*+de/f^-'","Z13064":"\"level\" is a fixpoint of reverse string","Z13065":"remove emojis, python","Z13066":"classical Chinese arrange and negate verb + direct object, composition","Z13067":"empty lists are permutations","Z13068":"permutation of mixed types","Z13069":"Booleans: (T,T,F) is a permutation of (F,T,T)","Z13070":"okina is not punctuation","Z13071":"click consonants are not punctuation","Z13072":"codepoint/string type test: (\"A\",'B') is not a permutation of ('A',\"B\")","Z13073":"all permutations of (\"hello\", \"world\") string list","Z13074":"all permutations (\"hello\", true) list of mixed types","Z13075":"all permutations of empty list","Z1918":"Adilabad Gondi","Z1920":"Ebira","Z1921":"Petjo","Z13078":"remove duplicates from untyped list","Z13079":"(first,second,first,third) → (first,second,third)","Z13081":"remove all matching elements from list","Z13082":"(a,c,b,c) - c = (a,b)","Z13083":"remove all matching elements, recursive composition","Z13084":"remove duplicate elements, recursive composition","Z13085":"hyperbolic arccotangent","Z13086":"acoth, python","Z13087":"English -ing form","Z13088":"walk → walking","Z13089":"English -ing form, composition","Z13090":"run → running","Z13091":"English -ing form, python","Z13092":"removing \"test\" from an empty list leaves the empty list","Z13093":"let → letting","Z13094":"meet → meeting","Z13095":"eat → eating","Z13096":"lean → leaning","Z13097":"bid → bidding","Z13098":"lead → leading","Z13099":"dig → digging","Z13100":"skip → skipping","Z13101":"keep → keeping","Z13102":"lob → lobbing","Z13103":"trek → trekking","Z13104":"pace → pacing","Z13105":"climb → climbing","Z13106":"slice off empty string → empty string","Z13107":"lie → lying","Z13108":"free → freeing","Z13109":"present tense for 'gụ' is 'na-agụ'","Z13110":"present tense for 'pụ'  is 'na-apụ'","Z13111":"present tense for 'sụ' is 'na-asụ'","Z13112":"Imperative verb of 'sụ' is 'sụọ'","Z13113":"true → truing ","Z13114":"sauté → sautéing","Z13115":"panic → panicking","Z13116":"remove spaces(empty string) = empty string","Z13117":"Latin lowercase alphabet letters","Z13118":"Pangram \"The quick brown fox jumps over the lazy dog\"","Z13119":"is pangram of alphabet","Z13120":"is pangram, composition","Z13121":"\"The quick brown fox jumps over the lazy dog.\" is a pangram of the Latin alphabet","Z13122":"is pangram (Latin alphabet), composition","Z13123":"\"The quick brown fox jumps over the lazy dog.\" is a pangram (Latin alphabet)","Z13124":"Mutual conversion between katakana and hiragana","Z13125":"あ → ア","Z13126":"Japanese: mutual conversion between katakana and hiragana, Python","Z13127":"𛀁 is hiragana","Z13128":"space","Z13129":"empty string unchanged","Z13130":"\"𛀀\" is katakana","Z13131":"string beginning trumps left/isolated","Z13132":"string ending trumps right/isolated","Z13133":"using a two character \"common mark\"","Z13134":"ambiguous? two-character common mark","Z13135":"two-character common mark","Z13136":"tricky 2-character common mark","Z13137":"cancel → cancel(l)ing","Z13138":"any Hebrew in string?","Z13139":"Latin input is not Hebrew","Z13140":"Hebrew string is recognized as Hebrew","Z13141":"A mixed string with some Hebrew returns true","Z13142":"“Це не Іврит! لا!” contains no Hebrew characters","Z13143":"JS loop implementation","Z13144":"reverse(\"Not a palindrome\") is not a fixed point","Z13145":"get list of possible simple verb root (igbo)","Z13146":"get the simple verb root of a particular vowel","Z13147":"xorwow","Z13148":"(!) xorshift","Z13149":"xorshift32 (python)","Z13150":"remove duplicate elements (Javascript)","Z13151":"Bangla conjunct vowel separation","Z13152":"Bangla conjunct vowel separation (python)","Z13153":"Separation of \"মা\"","Z13154":"Separation of \"উইকিফাংশন\"","Z13155":"interleave lists","Z13156":"Bangla matra (diacritic) type","Z13157":"Bangla matra type (python)","Z13158":"ক = পূর্ণমাত্রিক (Full - Matra)","Z13159":"শ = অর্ধমাত্রিক (Half - Matra)","Z13160":"interleave list (Javascript)","Z13161":"TypedList(TypedList(\"first\",\"second\"),typedList(''sun\",\"moon\")) ==> TypedList('first','sun','second','moon').","Z13162":"cancel → canceling","Z13163":"get day of week from date","Z13164":"remove all matching elements, python","Z13165":"ice → icing","Z13166":"object equality, python ==","Z13167":"toe → toeing","Z13168":"\"false\" [string] != false [Boolean]","Z13169":"\"a\" [string] != 'a' [character]","Z13170":"true != false","Z13171":"dye → dyeing","Z13172":"empty list != empty string","Z13173":"get value string from key string","Z13174":"get \"value 2\" from \"key 2\"","Z13175":"key value not on list","Z13176":"get value from key, composition","Z13177":"English -ed form (regular)","Z13178":"walk → walked","Z13179":"English -ed form in Python","Z13180":"lie → lied","Z13181":"crib → cribbed","Z13182":"play → played","Z13183":"try → tried","Z13184":"🙃 → 🙃🙃","Z13185":"test including Arabic and left-right isolates","Z13186":"say → said?","Z13187":"regret → regretted","Z13188":"sit → seated?","Z13189":"single right-to-left overrided string","Z13190":"right-to-left override in the middle of the string","Z13191":"get  weekday(Javascript)","Z13192":"week day for '2024-02-15' is THURSDAY","Z13193":"week day for '1809-09-17' is SUNDAY","Z13194":"week day for '1789/4/17' is FRIDAY","Z13195":"Bangla consonant type (articulation point)","Z13196":"Bangla consonant type by articulation point (python)","Z13201":"panic  → panicked","Z13202":"zinc → zinced","Z13203":"loop → looped","Z13204":"box → boxed","Z13205":"-er form from -ed form","Z13206":"Is irregular English word (lemma)","Z13207":"Irregular English lemma in Python list","Z13208":"“be” is irregular","Z13209":"“have” is irregular ","Z13210":"“try” is regular","Z13211":"“had” is not a lemma","Z13212":"cos(0)=1","Z13213":"Regular English past participle","Z13214":"Return -ed form of regular English verb Composition","Z13215":"Be is irregular","Z13216":"live → lived","Z13217":"WALK: handle capitalisation?","Z13218":"two equal lists of strings are equal objects","Z13219":"differently ordered lists are not equal objects","Z13220":"are all elements of the list the same type","Z13221":"both elements are string type","Z13222":"mixed elements: code point and string","Z13223":"empty list defaults to true","Z13224":"split list into a list of two ~equal length lists","Z13225":"[A,B,C,D] -> [[A,B],[C,D]]","Z13226":"[A,B,C,D,E] -> [[A,B,C],[D,E]]","Z13227":"[] -> [[],[]]","Z13228":"split list into two, python","Z13229":"split list into two, composition","Z13230":"[[A,B],[C]]+[[D,E]]=[[A,B],[C],[D,E]]","Z13231":"concatenate lists, composition","Z13232":"[[a,b],[c]]+[[d,e]] = [[a,b],[c],[d,e]] (code point lists)","Z13233":"[a,b,c]+[d,e] = [a,b,c,d,e] (code points)","Z13234":"[Hello,World]+[[Goodbye,Moon],[Farewell,Pluto]] = [[Hello,World],[Goodbye,Moon],[Farewell,Pluto]]","Z13235":"first of [[Hello,World],[Goodbye,Moon]] = [Hello,World]","Z13236":"list of lists equality, with element string equality","Z13237":"list of lists equality, with element object equality","Z13238":"Bangla consonant type (pronunciation)","Z13239":"Bangla consonant type by pronunciation (python)","Z13242":"অআইঈ = Undefined letters","Z13243":"[Object, [String, \"Value$\"]] != [String, \"Value$\"]","Z13244":"exit → exited","Z13245":"xorshift64 (python)","Z13246":"English accusative pronoun in Python","Z13247":"faro out-shuffle","Z13248":"faro out-shuffle, composition","Z13249":"(a,b,c,A,B,C) -> (a,A,b,B,c,C)","Z13250":"shuffle deck of cards once","Z13251":"shuffle deck of cards 8 times to return to original sequence","Z13252":"odd-length lists return empty list","Z13253":"lists have different lengths, return empty list","Z13254":"suffix English word","Z13255":"blue + -ish → bluish","Z13256":"Suffix English word in Python","Z13257":"dormi -> dormas","Z13258":"dormi -> dormis","Z13259":"dormi -> dormos","Z13260":"dormi -> dormus","Z13261":"dormi -> dormu","Z13262":"English -er form","Z13263":"sing → singer","Z13264":"Suffix verb with -ing Composition","Z13265":"English -er form, composition","Z13266":"Add -er suffix Composition","Z13267":"[happy, -er]→ happier","Z13268":"[easy, -ly] → easily","Z13269":"[red, -en] → redden","Z13270":"Bangla vowels type","Z13271":"Bangla vowels type (python)","Z13272":"ই Bangla vowel type","Z13273":"উইকিফাংশন Bangla vowels type","Z13274":"[deputy, -ize] → deputize","Z13275":"English morpheme agglutination","Z13276":"is empty string, composition of [is empty (list)] and [string to list]","Z13277":"Abstract(Reify(\"Hello, world!\")) = \"Hello, world!\"","Z13278":"an empty object-type list","Z13279":"[H,e,l,l,o,',', ,w,o,r,l,d,!] = \"Hello, world!\"","Z13280":"English -ion base form","Z13281":"\"act\" → \"action\"","Z13282":"English -ion base form, python","Z13283":"conclude → conclusion","Z13284":"English -ed form","Z13285":"paint → painted","Z13286":"English -ed form, composition","Z13287":"English -ed form, python","Z13288":"Suffix input with –est, adjusted spelling: Composition","Z13289":"locate → located","Z13290":"solve → solution","Z13291":"Superlative of 'grey' is 'greyest'","Z13292":"[lovely, -est] → loveliest","Z13293":"[commit, -ed] → committed","Z13294":"[incredible, -ly] → incredibly","Z13295":"usable → usably","Z13296":"full → fully","Z13297":"interleave two lists, recursive composition","Z13298":"interleave three lists","Z13299":"faro out-shuffle, python","Z13300":"gregorian to nengō","Z13301":"gregorian to nengō, python","Z13302":"2001 = 平成13年","Z13303":"[re-, enable, er, s] → re-enablers","Z13304":"is same-typed list (Javascript)","Z13305":"left fold, composition","Z13306":"advance n days to get a later date (D/M/YYYY)","Z13307":"advance n  days (Javascript)","Z13308":"advance 19/2/2024 to 2 days => 21/2/2024","Z13309":"\"x\" → \"y\" ","Z13310":"lists have unequal length","Z13311":"different list length as composition","Z13312":"[\"AB\"], [\"C\"] are not of different length","Z13313":"different list length in Python","Z13314":"advance 19/2/2024 to 7 days => 26/2/2024","Z13315":"[\"A\"], [] are of different length","Z13316":"advance 1/1/2018 to 366 days => 2/1/2019","Z13317":"Echo(\"Hello, world!\") is a fixpoint","Z13318":"apply two-argument function","Z13319":"apply2, composition of Reduce","Z13320":"apply2 (strings_equal_length,\"hello\",\"world\") = true","Z13321":"apply2 (join_strings, \"Hello\", \"World\") = \"HelloWorld\"","Z13322":"is sorted","Z13323":"is sorted, recursive composition","Z13324":"is longer or equal length string","Z13325":"is equal or longer, python","Z13326":"\"ABCD\" is longer than \"ABC\"","Z13327":"\"ABC\" is shorter than \"ABCD\"","Z13328":"\"Hello\" is equal length to \"World\"","Z13329":"string length: \"AB\" > \"A\"","Z13330":"string length: \"ABC\">\"AB\">\"A\"","Z13331":"\"a\" <= \"a\"","Z13332":"codepoints: \"A\"<\"B\"<\"C\"","Z13333":"all permutations of (T,T,F): a permutation of ((T,T,F),(F,T,T),(T,F,T))","Z13334":"filter for only the uppercase words in a list (different order)","Z13335":"nengō to gregorian","Z13336":"nengō to gregorian in Python","Z13337":"平成13 = 2001","Z13338":"令和20 = 2038","Z13339":"令令20 = N/A","Z13340":"apply2 (substring_exists, \"Wikifunctions\", \"function\")","Z13341":"(!) linear interpolation","Z13342":"lerp (python)","Z13345":"English -er form of comparative adjective","Z13346":"Open → opening","Z13347":"apply (to_uppercase, \"hello\")","Z13348":"spaces and punctuation are not in the lowercase alphabet","Z13349":"string only has characters from alphabet, superset composition","Z13350":"right fold, recursive composition","Z13351":"apply list of functions","Z13352":"apply list of functions, composition","Z13353":"apply list([ROT1, ROT13, ROT25, ROT13], \"aaaa\")=\"aaaa\"","Z13354":"apply list([id],\"A\") == \"A\"","Z13355":"apply empty list is identity","Z13356":"Gregorian:2026,4,14 = Bangla:1 Boishakh 1433","Z13357":"[period, -ic, -ly] → “periodically”","Z13358":"😀 is different to 😃","Z13359":"👋🏼 is different to 👋🏿","Z13360":"\"aaa\" is different to \"aa\"","Z13361":"IPA ɛ [U+025B] differs from Greek ε [U+03BF]","Z13362":"get the last n elements of a list","Z13363":"return the last n elements (JavaScript)","Z13364":"[a,b,c,d,e,f] return the last three elements in the list which is [d,e,f]","Z13365":"[day,night, true, moon, false , sun] return the last two elements in the list which is [false,sun]","Z13366":"get the first n elements of an untyped list","Z13367":"return first n elements ","Z13368":"[a,b,c,d,e,f] return the first three elements in the list which is [a,b,c]","Z13369":"remove first N elements of list","Z13370":"remove the first n elements, javascript","Z13371":"Ceci n’est pas une pipe","Z13372":"Out of 8 items remove first 3 items","Z13373":"remove last n elements of a list","Z13374":"Remove last n elements ","Z13375":"Out of 5 items remove 2 items from from the end of the list","Z13376":"get 3 elements of a 2-element list","Z13377":"get 0 elements of a list","Z13378":"get 1 element from an empty list","Z13379":"remove 99 elements from a 3-element list","Z13380":"remove 0 elements from a list","Z13381":"is listed in","Z13382":"Alternative of contains (composition)","Z13384":"“listed” is listed in {“is, “listed”, “in”}","Z13385":"list without first (n=1) element, composition","Z13386":"remove last (n=1) element, composition","Z13387":"get the first (n=1) element, failed composition","Z13388":"empty list stays empty","Z13389":"IPA ɛ [U+025B] differs from Greek ε [U+03BF] - string inequality","Z13390":"simple XML tag wrap Python","Z13391":"is longer list, JavaScript","Z13392":"(z) is shorter than (a,b)","Z13393":"is two element list, JavaScript","Z13394":"lists have equal length, JavaScript","Z13395":"len(a,b)!=len(c,d,e)","Z13396":"to camel case hello_-world","Z13397":"get the nth element of a list","Z13398":"get element from list","Z13399":"get the fourth element from list of 28 items","Z13400":"[Z6/string] != [Z6/string, \"\"]","Z13401":"Empty lists are equal, whatever their types","Z13402":"words from string","Z13403":"tokenize \"Hello, world!\"","Z13404":"tokenize: \"Hello, hello, hello!\"","Z13405":"tokenize empty string","Z13406":"words from string, python","Z13407":"tokenize on white space","Z13408":"python split()","Z13409":"split \"Hello, world!\"","Z13410":"words from string, composition","Z13411":"distinct words from string","Z13412":"distinct words from string, composition","Z13413":"distinct words from: \"Hello, world!\"","Z13414":"two distinct words from: \"Hello, hello, hello!\"","Z13415":"distinct lowercased words from string","Z13416":"distinct lowercase words from string, composition","Z13417":"distinct lowercased words: \"Hello, world\"","Z13418":"one distinct lowercased word: \"Hello, hello, hello!\"","Z13419":"is identity relation over elements of list","Z13420":"boolean equality is identity relation over set of both Booleans","Z13421":"string equality is identity relation over set of different strings","Z13422":"boolean inequality is not an identity relation","Z13423":"case-insensitive string equality is not identity relation for multiple cases","Z13424":"pair and bracket","Z13425":"\"first\" + \"second\" = \"(first,second)\"","Z13426":"pair and bracket, python","Z13427":"order of pairing (((0,1),2),3) for Reduce Function","Z13428":"\"\" + \"\" = \"(,)\"","Z13429":"remove the nth element from a list","Z13430":"remove an element from a list (JavaScript)","Z13431":"Remove the last element from a list of 28 items ","Z13432":"(1,(2,(3,4))) pairing order for right fold","Z13433":"(((1,2),3),4) pairing order for left fold","Z13434":"remove the only element from a list","Z13435":"remove all 3 elements","Z13436":"apply a two-parameter function to a common first argument and a list of second arguments","Z13437":"English prefix a list with in-","Z13438":"apply two-parameter function to argument and list, recursive composition","Z13439":"“music” & [-ly, -ian] → [“musically”, “musician”]","Z13440":"check if string is lower camelcase","Z13441":"is lower camelcase python","Z13442":"camelCase is lower camelcase","Z13443":"is lower camelcase composition","Z13444":"CamelCase is not lower camelcase","Z13445":"are all false","Z13446":"not(is_any_true) composition","Z13447":"is identity relation over set, recursive composition","Z13448":"(F,F) yes all are false","Z13449":"(F,T) no all are not false","Z13450":"empty list defaults to yes all are false","Z13451":"not any(), python","Z13452":"first element, python","Z13453":"list with two matches","Z13454":"don't remove punctuation","Z13455":"(A,B,C) is a permutation of (A,B,C), code points","Z13456":"-3 is not a positive integer","Z13457":"not(contains(not(false))) composition","Z13458":"Contains non-Boolean","Z13459":"1.0 → 10","Z13461":"replaces 0 with 1","Z13462":"replaces 1 with 0","Z13463":"inverts the bits of 0b101010","Z13464":"apply a two-parameter function to a list of first arguments and a common second argument","Z13465":"[“quick”, “music”] & -ly","Z13466":"apply two-parameter function to list and argument, recursive composition","Z13467":"multipart tarfile uses .#.part extension","Z13469":"if first then true else second","Z13470":"not(nor()) composition","Z13471":"ROT13 with Caesar cipher composition","Z13472":"[fun, -y, -est] → funniest","Z13473":"format large natural number strings by adding commas","Z13474":"format large numbers by adding commas, python","Z13475":"complex correctly nested brackets are paired","Z13476":"complex incorrectly nested brackets are not paired","Z13477":"Shift by 0 returns the input string","Z13478":"Shift by 26 returns the input string","Z13479":"Shift by 52 returns the input string","Z13480":"ROT25 with Caesar cipher composition","Z13481":"ROT1, composition of Caesar cipher n=1","Z13482":"is ISO 639-1 language code","Z13483":"list ISO 639-1 alpha 2 language codes","Z13484":"predefined list of ISO 639-1 alpha 2 language codes","Z13485":"in Breton chevech is a palindrome","Z13486":"en is a valid ISO 639-1 alpha 2 language code","Z13487":"zz is not a valid ISO 639-1 alpha 2 language code","Z13488":"nor, if composition","Z13489":"is decimal natural number string of Arabic numerals","Z13490":"\"1\" is a natural number string","Z13491":"\"1234567890\" is a natural number string","Z13492":"\"0987654321\" is not a natural number string","Z13493":"\"0\" is a natural number string","Z13494":"\"nine\" is not a natural number string","Z13495":"\"-1\" is not a natural number string","Z13496":"\"١٥\" is not a natural number string","Z13497":"\"FFFFFF\" is not decimal","Z13498":"an empty string is not a natural number","Z13499":"is decimal natural number string of Arabic numerals, composition","Z13500":"is decimal natural number, regex composition","Z13501":"Arabic numerals","Z13502":"\"99,999\" is not a natural number string","Z13503":"\"1.00\" is not a natural number string","Z13504":"99999 = \"99,999\"","Z13505":"1 unchanged","Z13506":"ig flags should ignore case and replace all occurrences","Z13507":"flag i but not g replaces only the first","Z13508":"replace all (regex), composition of regex with flags: gm","Z13509":"Python checking decimal representation","Z13510":"\"Hello, world!\" starts with empty string \"\"","Z13511":"URL query string, composition of discards","Z13514":"Check if b is not an Igbo vowel","Z13515":"Wrap English -ed form (regular) Composition","Z13516":"suffix English verb with -ed, composition","Z13517":"a list of multiple typed objects","Z46":"Type converter to code","Z64":"Type converter from code","Z13518":"Natural number","Z13519":"JS converter from Natural number","Z13520":"JS converter to Natural number","Z13521":"add two Natural numbers","Z13522":"equality of natural numbers","Z13523":"2=2 is true","Z13524":"leading zeros don't make things unequal","Z13525":"2=0 is false","Z13526":"using JS ===","Z13527":"2+2=4","Z13528":"1+0=1","Z13529":"using JS +","Z13531":"Python converter from Natural number","Z13532":"Python converter to natural number","Z13533":"equality of natural numbers, python ==","Z13534":"English -er form, python","Z13535":"take → taker","Z13536":"\"labori\" -> \"labor\"","Z13537":"English -er: run → runner","Z13538":"English -er: amplify → amplifier","Z13539":"multiply two natural numbers","Z13540":"JS *","Z13541":"1*1=1","Z13542":"2*3=6","Z13543":"Python *","Z13544":"0*10=0","Z13545":"10*0=0","Z13546":"divide natural numbers","Z13547":"4 ÷ 2 = 2","Z13548":"natural number division, python","Z13549":"13 ÷ 2 = 6","Z13550":"2^42*2^24=2^66","Z13551":"remainder of natural number division","Z13552":"8 % 2 = 0","Z13553":"25 % 7 = 4","Z13554":"natural number division remainder, python %","Z13555":"natural number is even","Z13556":"4 is even","Z13557":"5 is not even","Z13558":"product of list (natural numbers)","Z13559":"natural number is even, python %2","Z13560":"List.product Python","Z13561":"Collatz conjecture function","Z13562":"Collatz conjecture function, composition","Z13563":"12→6 because for even numbers n/2","Z13564":"3→10 because for odd numbers 3n+1","Z13565":"Collatz conjecture function, python","Z13566":"product (2, 3, 5, 7, 11) = 2310","Z13567":"product, right fold composition","Z13568":"1→4→2→1 is a Collatz cycle","Z13569":"subtract natural numbers with floor of 0","Z13570":"subtract with floor 0, python","Z13571":"4-2=2","Z13572":"2-4=0 (floor of 0)","Z13573":"add, python +","Z13574":"3 % 0 is undefined, default to 0","Z13575":"7÷0 is undefined","Z13576":"absolute difference between natural numbers","Z13577":"absolute difference, python","Z13578":"increment natural number","Z13579":"increment by one, add composition","Z13580":"0 → 1","Z13581":"increment by one, python +1","Z13582":"decrement natural number by one","Z13583":"decrement by one, composition","Z13584":"7 → 6","Z13585":"0 → 0 (floor)","Z13586":"decrement by one, python","Z13587":"English cardinal","Z13588":"English cardinal, python","Z13589":"42 = \"forty-two\"","Z13590":"0 = \"zero\"","Z13591":"101 = \"one hundred and one\"","Z13592":"777777777777","Z13593":"12=\"twelve\"","Z13594":"777777777777777777777777777777777777777777777777","Z13595":"error returned when number is too large for this algorithm","Z13596":"English month name from month number","Z13597":"English month from number, python","Z13598":"1 → \"January\"","Z13599":"2 → \"February\"","Z13600":"3 → \"March\"","Z13601":"4 → \"April\"","Z13602":"5 → \"May\"","Z13603":"6 → \"June\"","Z13604":"7 → \"July\"","Z13605":"8 → \"August\"","Z13606":"9 → \"September\"","Z13607":"10 → \"October\"","Z13608":"11 → \"November\"","Z13609":"12 → \"December\"","Z13610":"0 → \"\" (invalid month number)","Z13611":"13 → \"\" (invalid month number)","Z13612":"greatest common divisor","Z13613":"GCD(42,18) = 6","Z13614":"GCD(99,1) = 1","Z13615":"GCD(42,0) = 42","Z13616":"GCD(0,0) default to 0","Z13617":"Finnish allative case","Z13618":"kioski → kioskille","Z13619":"Word ends in a → add -lle (kala → kalalle)","Z13620":"Word ends with -e: add -elle (perhe → perheelle)","Z13621":"Word ends in -nen: replace -nen with -selle (nainen → naiselle)","Z13622":"Word ends in -as: replace -as with -aalle (taivas → taivaalle)","Z13623":"Word ends in -os: replace –os with –okselle (annos → annokselle)","Z13624":"Word ends in -ös: replace –ös with –ökselle (käännös → käännökselle)","Z13625":"Word ends in -ton: replace -ton with -ttomalle (koditon → kodittomalle)","Z13626":" Word ends in -tön: replace -tön with -ttömalle (työtön → työttömälle)","Z13627":"Word ends in -in: replace -in with -imelle (avain → avaimelle)","Z13628":"Word ends in -tar: replace -tar with -ttarelle (kuningatar → kuningattarelle)","Z13629":"Word ends in -tär: replace -tär with -ttärelle (tytär → tyttärelle)","Z13630":"greater of two natural numbers","Z13631":"3 is greater than 2","Z13632":"greater number, python","Z13633":"lesser of two natural numbers","Z13634":"2 is smaller than 3","Z13635":"lesser number, python","Z13636":"natural number identity ","Z13637":"natural number identity, python","Z13638":"100=100","Z13639":"GCD, Euclidean algorithm composition","Z13640":"zero function","Z13641":"zero function, python","Z13642":"GCD, python","Z13643":"zero(100) = 0","Z13644":"2^n","Z13645":"2^n python","Z13646":"2^100=1267650600228229401496703205376","Z13647":"exponentiation of natural numbers","Z13648":"m**n python","Z13649":"10**10=10000000000","Z13650":"2^n, composition","Z13651":"bitwise and","Z13652":"bitwise or","Z13653":"bitwise xor","Z13654":"bitwise and, Python","Z13655":"bitwise or Python","Z13656":"bitwise xor Python","Z13657":"123&456=72","Z13658":"123|456=507","Z13659":"123^456=435","Z13660":"least common multiple","Z13661":"lcm(m,n)=m*n/gcd(m,n)","Z13662":"LCM(42,18)=126","Z13663":"n^2","Z13664":"n^2 python","Z13665":"n^2, composition","Z13666":"100^2=10000","Z13667":"factorial","Z13668":"factorial, python","Z13669":"Value of 100! is correct","Z13672":"1+1=2","Z13673":"2+1=3","Z13674":"2^64-1+1=2^64","Z13675":"increment by one, JS","Z13676":"greater than (natural numbers)","Z13677":"99 > 42","Z13678":"greater than, python","Z13679":"42 is not greater than 42","Z13680":"42 is not greater than 99","Z13681":"greater number, composition of greater than","Z13682":"greater than or equal (natural numbers)","Z13683":"99 >= 42","Z13684":"greater than or equal, python","Z13685":"1 is not prime","Z13686":"greater than or equal, composition","Z13687":"42 >= 42","Z13688":"42 is not greater than or equal to 99","Z13689":"less than (natural numbers)","Z13690":"less than, composition of not greater than or equal","Z13691":"42 < 99","Z13692":"42 is not less than 42","Z13693":"99 is not less than 42","Z13694":"less than, python","Z13695":"less than or equal (natural numbers)","Z13696":"less than or equal, composition of not greater than","Z13697":"42 <= 99","Z13698":"42 <= 42","Z13699":"99 is not less than or equal to 42","Z13700":"less than or equal, python <=","Z13701":"are coprime (natural numbers)","Z13702":"coprime, composition of greatest common denominator ==1","Z13703":"64 and 99 are coprime","Z13704":"42 and 99 are not coprime","Z13705":"0 and 1 are coprime","Z13706":"0 and 99 are not coprime","Z13707":"0 and 0 are not coprime","Z13708":"index of first listing (1...N)","Z13709":"index of first listing, python","Z13710":"\"second\" is at n=2","Z13711":"\"unlisted\" returns 0","Z13712":"\"repeated\" element returns first listing n=2","Z13713":"natural number to digit string","Z13714":"0 → \"0\"","Z13715":"string of natural number, python str","Z13716":"99 → \"99\"","Z13717":"replace elements of list according to key-value lookup lists","Z13718":"Latin uppercase alphabet letters","Z13719":"hello → [H,E,L,L,O] using lowercase lookup and uppercase values","Z13720":"lookup and replace, composition","Z13721":"lookup and replace, python","Z13722":"replace list of fruits with alphabetical index strings","Z13723":"replace list of fruits with alphabetical index list","Z13724":"Finnish allative case singular, python","Z13725":"Reverse (untyped) list of Natural numbers","Z13726":"divisors","Z13727":"divisors, python","Z13728":"prime divisors","Z13729":"prime divisors python","Z13730":"unique prime divisors","Z13731":"unique prime divisors Python","Z13732":"smallest prime divisor","Z13733":"smallest prime divisor, python","Z13734":"the smallest prime divisor of 10001 is 73","Z13735":"largest prime divisor","Z13736":"largest prime divisor, python","Z13737":"2 only has one unique prime divisor: 2","Z13738":"largest prime divisor of 10001 is 137","Z13739":"unique prime divisors of 99: [3,11] in either order","Z13740":"is natural number divisible","Z13741":"is divisible, python","Z13742":"prime divisors, composition","Z13743":"99 is divisible by 9","Z13744":"99 is not divisible by 7","Z13745":"n/(largest prime dividing n)","Z13746":"n / largest prime dividing n, composition","Z13747":"even, composition of is divisible (by 2)","Z13748":"n / largest prime dividing n, python","Z13749":"100 → 20","Z13750":"99 → 9","Z13751":"99 → [3,3,11] (in any order)","Z13752":"is there a common element on these lists?","Z13753":"[first, second, third] shares an element with [third, fourth, fifth]","Z13754":"common element on two lists, composition","Z13755":"Reverse [T, F] → [F, T]","Z13756":"[T,T] and [F,F] do not share any common elements","Z13757":"contains ([“A”, 2], 2) is True (but not exactly)","Z13758":"list of code points ['A'] does not contain a string \"A\"","Z13759":"list of strings [\"99\"] does not contain natural number 99","Z13760":"number of divisors","Z13761":"contains ([“False”], False) is False","Z13762":"number of divisors, python","Z13763":"100 has 9 divisors","Z13764":"number of prime divisors","Z13765":"number of prime divisors (python)","Z13766":"100 has 4 prime divisors","Z13767":"number of unique prime divisors","Z13768":"number of unique prime divisors, python","Z13769":"100 has two unique prime divisors: [5,2]","Z13770":"sum of divisors","Z13771":"sum of divisors, python","Z13772":"100: 100+50+25+20+10+5+4+2+1 = 217","Z13773":"sum of prime divisors","Z13774":"sum of prime divisors, python","Z13775":"100: 5+5+2+2 = 14","Z13776":"sum of unique prime divisors","Z13777":"sum of unique prime divisors, python","Z13778":"100: 5+2 = 7","Z13779":"natural number to binary string (without prefix)","Z13780":"natural number to octal (without prefix)","Z13781":"natural number to hexadecimal (lowercase, without prefix)","Z13782":"natural number to binary (with prefix)","Z13783":"natural number to octal (with prefix)","Z13784":"natural number to hexadecimal (lowercase, with prefix)","Z13785":"int to binary (without prefix), python","Z13786":"int to octal (without prefix) Python","Z13787":"int to hexadecimal (lowercase, without prefix), python","Z13788":"int to binary (with prefix), python","Z13789":"int to octal (with prefix) Python","Z13790":"int to hexadecimal, python","Z13791":"100 -> \"1100100\"","Z13792":"100 = octal 144","Z13793":"100 → 64","Z13794":"100 -> \"0b1100100\"","Z13795":"100 = \"0o144\"","Z13796":"100 → 0x64","Z13797":"binary string to natural number","Z13798":"octal to natural number","Z13799":"hexadecimal to natural number","Z13800":"Convert binary to int (python)","Z13801":"octal to int Python","Z13802":"hexadecimal to natural number, python","Z13803":"0b1100100 is 100 in base ten","Z13804":"octal 0144 should be decimal 100","Z13805":"0x64 = 100","Z13806":"base n to natural number","Z13807":"base n to int Python","Z13808":"b36 \"abc\" is 13368","Z13809":"n^n","Z13810":"n**n python","Z13811":"10^10=10000000000","Z13812":"left shift","Z13813":"right shift","Z13814":"left shift, Python","Z13815":"right shift, Python","Z13816":"100 << 4 = 1600","Z13817":"100 >> 4 = 6","Z13818":"modular exponentiation","Z13819":"modular exponentiation, python","Z13820":"modular exponentiation, composition","Z13821":"2^1000 mod 1337 = 345","Z13822":"modular multiplicative inverse","Z13823":"modular multiplicative inverse, python","Z13824":"1000^-1 mod 1337 = 972","Z13825":"n mod 2","Z13826":"Modulus 2 (python)","Z13827":"all 1's sequence","Z13828":"all 1's sequence Python","Z13829":"characteristic function of 0","Z13830":"characteristic function of 0 Python","Z13831":"natural number range","Z13832":"Integer range (composition)","Z13833":"constant integer range [0,9]","Z13834":"Integer range (python)","Z13835":"nth Fibonacci number","Z13836":"zero function, JavaScript","Z13837":"zero(0) = 0","Z13838":"2^0 = 1","Z13839":"2^1 = 2","Z13840":"0! is 1","Z13841":"nth Fibonacci number, python recursive","Z13842":"100th Fibonacci number","Z13843":"Sylvester's sequence nth term","Z13844":"Sylvester's sequence nth term, python","Z13845":"10th term is correct","Z13846":"if (natural number output)","Z13847":"if (number type), Python","Z13848":"binomial coefficient","Z13849":"if (number type), JavaScript","Z13850":"binomial coefficient, python","Z13851":"If(true, 1, 2) === 1","Z13852":"if(false, 1, 2) === 2","Z13853":"100 choose 50 equals 100891344545564193334812497256","Z13854":"k-permutation","Z13855":"k-permutation, python","Z13856":"50-permutation of 100","Z13857":"Catalan number","Z13858":"Catalan number, python","Z13859":"Catalan number C100","Z13860":"binary weight of n","Z13861":"binary weight of n, Python","Z13862":"100 →  3","Z13863":"factorial, composition","Z13864":"nth Fibonacci number, composition","Z13865":"1! is 1","Z13866":"2! is 2","Z13867":"3! is 6","Z13868":"Sum[1.5,97.5]=99","Z13869":"2nd Fibonacci number is 1","Z13870":"Echo Test case for natural numbers","Z13871":"List element types","Z13872":"Python type attributes for each element","Z13873":"list of: string, boolean and natural number","Z13874":"626937 → 990f9","Z13875":"0-1: [0,1]","Z13876":"7-9: [7,8,9]","Z13877":"099 is a positive integer?","Z13878":"empty string is not a valid positive integer","Z13879":"\"0_1\" is not a decimal natural number","Z13880":"\"0x123\" is not a decimal natural number string","Z13881":"¾ is not a natural number","Z13882":"\"-0\" is not a natural number string","Z13883":"\"-1\" + \"1\" = \"0\"","Z13884":"\"-3\" is odd","Z13885":"371 is an Armstrong number","Z13886":"99 is not an Armstrong number","Z13887":"length of empty list is 0","Z13888":"get first n elements, change length of list to n, javascript","Z13889":"very long numbers are valid","Z13890":"lists equal length, composition","Z13891":"list of 2 elements: boolean and string","Z13892":"a list of 2 lists","Z13893":"list of 3 natural numbers","Z13894":"length of list, recursive composition","Z13895":"single element, composition length=1","Z13896":"two elements, composition of length == 2","Z13897":"'NINER' is IPA code for 9","Z13898":"򙃹 = 626937","Z13901":"is EAN (python)","Z13902":"123 is not a valid EAN","Z13903":"JavaScript checking decimal representation","Z13904":"\"00\" is not a valid natural number string","Z13905":"4 choose 2 equals 6","Z13906":"10 choose 1 equals 10","Z13907":"binomial composition via factorial","Z13908":"1 choose 1 equals 1","Z13909":"rectified linear unit","Z13910":"List containing Natural numbers","Z13911":"rectified linear unit Python implementation","Z13912":"binomial recursive composition","Z13913":"[“Text”, True, 2, 3] = [“Text”, True, 2, 3] ","Z13914":"decrement by one, JavaScript","Z13915":"Return list with Natural numbers converted to strings","Z13916":"is light vowel (ụdamfe) in Igbo","Z13917":"check if a character or word has light vowel","Z13918":"'bịa' has a light vowel in it ","Z13919":"'akwụkwọ' has a light vowel in it ","Z13920":"'a' is light vowel ","Z13921":"'ime' doesn't have a light vowel in it ","Z13922":"Is heavy vowel (udaarọ)","Z13923":"check if a character or word has a heavy vowel, JS","Z13924":"'bịa' doesn't have a heavy vowel in it","Z13925":"'akwụkwọ' Has no heavy vowel in it","Z13926":"'ime' has heavy vowel in it","Z13927":"Igbo infinitive form of verb","Z13928":"length of binary representation","Z13929":"length of binary representation, python (using bin)","Z13930":"length of binary representation, composition","Z13931":"list of Mersenne exponents","Z13932":"nth Mersenne exponent","Z13933":"nth Mersenne exponent, composition","Z13934":"Simple calculator","Z13935":"valid GTIN-12 is not a valid EAN","Z13936":"valid GTIN-14 is a valid EAN","Z13937":"(!) Simple calculator (python), using EVAL","Z13938":"2+2*(3*2) = 14","Z13939":"valid EAN-18 is a valid EAN","Z13940":"7/22 = 0.3181818181818182","Z13941":"get the infinitive form","Z13942":"42 (Natural number) is listed","Z13943":"infinitive form of bịa  is ịbịa.","Z13944":"the infinitive form of 'me' is ime","Z13945":"infinitive form de is ide","Z13946":"infinitive form of di is idi","Z13947":"infinitive form of ga is ịga","Z13948":"2^n-1","Z13949":"2^n-1, python","Z13950":"nth Mersenne prime","Z13951":"nth Mersenne prime, composition","Z13952":"nth Lucas number","Z13953":"nth Lucas number, python (recursive relation)","Z13954":"nth Lucas number, composition","Z13955":"Euler totient function","Z13956":"Euler totient function, python","Z13957":"Dedekind psi function","Z13958":"Dedekind psi function, python","Z13959":"n^(n-1)","Z13960":"n^(n-1) Python","Z13961":"triangular number","Z13962":"triangular number Python","Z13963":"3^n","Z13964":"3**n python","Z13965":"n^(n-2)","Z13966":"n^(n-2), python","Z13967":"tetrahedral number","Z13968":"tetrahedral number Python","Z13969":"4^n","Z13970":"4^n, python","Z13971":"pentagonal number","Z13972":"pentagonal number Python","Z13973":"square pyramidal number","Z13974":"square pyramidal number, python","Z13975":"nth perfect number","Z13976":"nth perfect number, composition","Z13977":"n^3","Z13978":"n**3, python","Z13979":"n^4","Z13981":"n^4, python","Z13982":"odd part","Z13983":"odd part, python","Z13984":"sum of odd divisors","Z13985":"sum of odd divisors, python","Z13986":"number of primes <= n","Z13987":"number of primes <= n, Python","Z13988":"Value in list Python","Z13989":"central binomial coefficient","Z13990":"central binomial coefficient, python","Z13991":"Jacobsthal number","Z13992":"Jacobsthal number Python","Z13993":"sum of proper divisors","Z13994":"sum of proper divisors, python","Z13995":"double factorial","Z13996":"double factorial, Python","Z13997":"double factorial of 2n-1","Z13998":"double factorial of 2n-1, python","Z13999":"sum of squares of divisors ","Z14000":"sum of squares of divisors, python","Z14001":"number of odd divisors","Z14002":"number of odd divisors, python","Z14003":"Thue-Morse sequence","Z14004":"Thue-Morse sequence, python","Z14005":"1-2 Thue-Morse sequence","Z14006":"1-2 Thue-Morse sequence, python","Z14007":"binomial(n, floor(n/2))","Z14008":"binomial(n, floor(n/2)), python","Z14009":"Equal Natural numbers are equal","Z14010":"equal lists [42, “forty”, True, []] are equal","Z14011":"4^4=256","Z14012":"composition, (2^n)^2","Z14013":"composition, 4^n","Z14014":"4^6=4096","Z14015":"Get nth element from list Python","Z14016":"equal Natural numbers are equal when one is extracted from a list","Z14017":"is listed in Composition using is superset","Z14018":"to glagolitic numeral","Z14019":"1280 → ·Ⱍ҃·Ⱄ҃·Ⱁ҃·","Z14020":"mapping each digit in Python","Z14021":"583 → ·Ⱇ҃·Ⱁ҃·Ⰲ҃·","Z14022":"16 → ·Ⰵ҃·Ⰺ҃·","Z14023":"East Asian age reckoning","Z14024":"111 → ·Ⱃ҃·Ⰰ҃·Ⰺ҃·","Z14025":"2001 → ·Ⱎ҃·Ⰰ҃·","Z14026":"East Asian age reckoning, javascript","Z14028":"3^3=27","Z14029":"n^3, composition","Z14030":"5^3=125","Z14031":"n^4, composition","Z14032":"7^4=2401","Z14033":"2^4=16","Z14034":"3^n, composition","Z14035":"3^8=6561","Z14036":"n^n, composition","Z14037":"5^5=3125","Z14038":"sum the elements of a list of natural numbers","Z14039":"sum list ","Z14040":"is divisible, Javascript","Z14041":"99 is divisible by 1","Z14042":"99 is not divisible by 0","Z14043":"large number test near MAX_SAFE_INTEGER","Z14044":"large number 99....99 + 1","Z14045":"replicate(\"A\",0) = empty string","Z14046":"element to list","Z14047":"element to list, composition","Z14048":"list from \"Hello, world!\"","Z14049":"sum list, Python","Z14050":"10^0 = 1","Z14051":"1 raised to very large power = 1","Z14052":"0 raised to very large power = 0","Z14053":"exponentiation, composition","Z14054":"0^0 = 1","Z14055":"if (natural number), composition","Z14056":"if (string output), composition","Z14057":"is valid language code ","Z14058":"total stopping time (Collatz function)","Z14059":"1 takes 0 steps to get to 1","Z14060":"4 takes two steps to get to 1","Z14061":"12 takes 9 steps to get to 1","Z14062":"27 takes 111 steps to get to 1","Z14063":"total stopping time (Collatz), composition","Z14064":"0 is not a valid input, default return 0","Z14065":"total stopping time (Collatz), python","Z14066":"stopping time (Collatz function)","Z14067":"2 goes below 2 in 1 step","Z14068":"5 goes below 5 in 3 steps","Z14069":"stopping time, Collatz","Z14070":"a0=1 has infinite stopping time, define as 0","Z14071":"a0=0 has infinite stopping time, define as 0","Z14072":"large example with 2283 steps","Z14073":"multiply, recursive composition","Z14074":"replicate, recursive composition","Z14075":"remainder, composition","Z14076":"4 → (1,2,4) → 1+4+16 = 21","Z14077":"1 → (1) → 1 = 1","Z14078":"99 → (1,3,9,11,33,99) → 1+9+81+121+1089+9801 = 11102","Z14079":"add natural numbers, recursive composition","Z14080":"Australian English → en-au","Z14081":"a valid EAN-5 should not pass this function","Z14082":"a valid EAN-2 should not pass this function","Z14083":"is ISO 639-2 language code","Z14084":"natural number division, javascript","Z14085":"is ISO 639-1 language code, javascript","Z14086":"is ISO 639-1 language code, regex composition","Z14087":"eng is not a valid ISO 639-1 alpha 2 language code","Z14088":"EN is not a valid ISO 639-1 alpha 2 language code","Z14089":"\"\" is not a valid ISO 639-1 alpha 2 language code","Z14090":"is prime python (O(sqrt(n)) method)","Z14091":"0 is not prime","Z14092":"65537 is prime","Z14093":"2147483647 is prime","Z14094":"4294967297 is not prime","Z14095":"2147483647^2 is not prime","Z14096":"is prime (Miller–Rabin test)","Z14097":"2^127-1 is prime","Z14098":"2^4423-1 is prime","Z14099":"10^999+7 is prime","Z14100":"10^999+13 is not prime","Z14101":"is divisible, composition","Z14102":"is 99 divisible by 7 = false","Z14103":"is valid language code, javascript","Z14104":" zza is a valid ISO 639-2 language code","Z14105":" ibo is a valid ISO 639-2 language code","Z14106":"nga is not a valid ISO 639-2 language code","Z14107":"may is a valid bibliographic language code for Malay","Z14108":"msa is a valid terminology language code for also Malay","Z14109":"string of only whitespace results in empty list","Z14110":"de-duplicate boolean list","Z14111":"is tautogram, composition","Z14112":"is empty relation over elements of list","Z14113":"binary false is empty relation over set of Booleans","Z14114":"is divisible is not an empty relation over the first four primes","Z14115":"is divisible is an identity relation over the primes [2,3,5,7]","Z14116":"is divisible is not an identity relation over [4,6,8,9]","Z14117":"is empty relation, recursive composition","Z14118":"string of first equals string of second","Z14119":"remove characters in unicode range","Z14120":"remove 98-100 (b-d) from \"abcde\"","Z14121":"remove characters in unicode range, python","Z14122":"remove characters from unicode range, composition","Z14123":"remove characters in character range, composition","Z14124":"string of characters from unicode range","Z14125":"97-122 = \"abc...xyz\"","Z14126":"string of characters from unicode range, python","Z14127":"remove obsolete characters for Khmer","Z14128":"remove all of obsolete range for Khmer","Z14129":"remove 6051-6099, python","Z14130":"remove clones of grave and acute","Z14131":"remove 832-833, composition","Z14132":"remove both \"̀́\" clones to leave a blank string","Z14133":"remove line and paragraph separator","Z14134":"remove line and paragraph separators, composition","Z14135":"remove both line and paragraph separator to leave empty string","Z14136":"remove BIDI embedding controls","Z14137":"remove BIDI embedding codes, composition","Z14138":"remove string of BIDI embedding codes leaving empty string","Z14139":"remove characters which activate/inhibit: symmetric swapping, Arabic form shaping, and National digit shapes","Z14140":"remove 8298-8303, composition","Z14141":"remove string of both 8298-8303 to leave empty string","Z14142":"remove interlinear annotation characters","Z14143":"remove 65529-65531, composition","Z14144":"remove string of all 65529-65531, leaving empty string","Z14145":"remove U+FEFF","Z14146":"remove U+FEFF, composition","Z14147":"string with just U+FEFF, leaves empty string","Z14148":"remove U+FFFC","Z14149":"remove from string of one U+FFFC character, leaving an empty string","Z14150":"remove U+FFFC, composition","Z14151":"remove scoping for musical notation","Z14152":"remove scoping for musical notation, composition","Z14153":"string with all scoping for musical notation, returns empty string","Z14154":"remove language tag code points ","Z14155":"remove language tag code points, composition","Z14156":"remove string of all language code tags to leave empty string","Z14157":"negatives work until the validator is introduced","Z14158":"remove sandwiched U+FEFF between two \"a\" strings","Z14159":"Astronomical symbols","Z14160":"Astronomical symbol, javascript","Z14161":"sun = ☉︎","Z14162":"Mars is ♂","Z14163":" Venus is ♀","Z14165":"remainder through modular exponensiation","Z14166":"nth digit of π","Z14167":"first digit of π is 3","Z14168":"second digit of π is 1","Z14169":"100th digit of π is 7","Z14170":"0th digit of π is 3","Z14171":"empty list typed with natural numbers is empty","Z14172":"list of natural numbers is not empty","Z14173":"Chudnovsky's algorithm in Python","Z14174":"third digit of π is 4","Z14175":"nth decimal place of π","Z14176":"first decimal place is 1","Z14177":"nth decimal place of pi, composition of digit of pi","Z14178":"0th decimal place is 3","Z14179":"nth digit of pi, composition from decimal place","Z14180":"pi string up to the nth digit","Z14181":"3 digits of pi: \"3.14\"","Z14182":"one digit of pi: \"3\"","Z14183":"0 digits of pi: default to \"3\"?","Z14184":"pi string up to n digits, recursive composition","Z14185":"\"1\" is a natural number string (temporary test using direct boolean identity validation for bug report)","Z14186":"string with ~100,000 digits of pi","Z14187":"Chudnovsky's algorithm in JS","Z14188":"if true then true, if false then not(not(false))","Z14189":"Base32 Encode","Z14190":"Base32 Encode Hello World is 'JBSWY3DPEBLW64TMMQ======'","Z14191":"Base32 Encode '123456' is 'GEZDGNBVGY======'","Z14192":"Base 32 Encode Python","Z14193":"1000th digit of π","Z14194":"10000th digit of π","Z14195":"Base32 Decode","Z14196":"Base32 Decode: 'JBSWY3DPEBLW64TMMQ======'  is 'Hello World'","Z14197":"Base32 Decode: 'GEZDGNBVGY======' is '123456'","Z14198":"Base32 Decode Python","Z14199":"Base32 Decode (Base32 encode (“Wikifunctions”) == “Wikifunctions”","Z14200":"is valid 8601 date or time string","Z14201":"'NOT A DATE' is not a valid 8601 date or time string","Z14202":"\"2023-08-03\" is a valid 8601 date or time string","Z14203":"\"2023-02-30\" is not a valid 8601 date or time string","Z14204":"\"2023-08-03 15:00:00.000\" is a valid date or time string","Z14205":"\"2023-08-03 25:00:00.000\" is not a valid 8601 date or time string","Z14206":"is valid 8601 date or time string: python","Z14207":"contains Compostion","Z14208":"[True] is not [“True”]","Z14209":"sum of natural numbers in interval","Z14210":"sum of natural numbers in interval, Python","Z14211":"sum of integers in [1, 10] = 55","Z14212":"JS replace() to remove emojis","Z14213":"replace double and single @ in JS","Z14214":"replace() HTML tags in JS","Z14215":"remove \\u0340\\u0341 with JS","Z14216":"[10,1] numbers in the wrong order","Z14217":"reverse list, recursive composition","Z14218":"\"20230803\" basic format date","Z14219":"\"2023-03-08T23:59:59.999\" is a valid date and time","Z14220":"\"2007-04-05T12:30−02:00\" is valid (with time zone designator)","Z14221":"29th February is valid in leap year 2024","Z14222":"29th February is not valid in non leap year 2023","Z14223":"\"2007-04-05T14:30Z\" is valid with UTC specified by Z","Z14224":"::1 is not IPv4","Z14225":"127.0.0.1 is not IPv6","Z14226":"is AAR wheel arrangement notation","Z14227":"1A-A1 is valid AAR","Z14228":"1-D is valid AAR","Z14229":"A1A-B+B is valid AAR","Z14230":"2+C-C+2 is valid AAR","Z14231":"A1A-3 is valid AAR","Z14232":"(B+B-B+B)+(B+B-B+B) is valid AAR","Z14233":"B is valid AAR","Z14235":"empty string is not valid AAR","Z14236":"AA is not valid AAR","Z14237":"11 is not valid AAR","Z14238":"B--B is not valid AAR","Z14239":"B++B is not valid AAR","Z14240":"B+-B is not valid AAR","Z14241":"(B+B)+(B+B is not valid AAR","Z14242":"(B+(B+B)+B) is not valid AAR","Z14243":"is AAR wheel arrangement notation in python","Z14244":"get Nth character of a string","Z14245":"8th character of \"Hello, world!\" is \"w\"","Z14246":"get Nth character, python","Z14247":"get first character of string, composition N=1","Z14248":"if N>len(string) return blank string","Z14249":"index 0 is not valid, return blank string","Z14250":"get last character, composition N=len(string)","Z14251":"the fourth character in \"Hi 👋\" is 👋","Z14252":"third unicode of grapheme cluster \"👨‍👩‍👧‍👦\" is \"👩\"","Z14253":"first unicode in grapheme cluster \"👨‍👩‍👧‍👦\" is \"👨\"","Z14254":"last unicode of grapheme cluster \"👨‍👩‍👧‍👦\" is \"👦\"","Z14255":"remove U+FEFF, replace all composition","Z14256":"remove U+FEFF, Python","Z14257":"remove U+FFFC, Python","Z14258":"remove character 98 from \"abcde\" to get \"acde\"","Z14259":"replace \".\" in \"Hello, world.\"","Z14260":"contains all characters of Bengali alphabet","Z14261":"example of Bengali pangram","Z14262":"contains all characters of Bengali alphabet, python","Z14263":"short string is not a Bengali pangram","Z14264":"short story is a Bengali pangram","Z14265":"has and is uppercase JS","Z14266":":: is IPv6","Z14267":"2001:0DB8:85A3:0000:0000:8A2E:0370:7334 is valid IPv6","Z14268":"invalid IPv6 with non-hex digit","Z14269":"invalid IPv6 (too long part)","Z14270":"invalid IPv6 (too many parts)","Z14271":"invalid IPv6 (misuse of ::)","Z14272":"invalid IPv6 (more than one ::)","Z14273":"invalid IPv6 (too few parts)","Z14274":"invalid IPv6 (empty part)","Z14275":"is Bengali pangram, composition","Z14276":"27 goes below 27 in 96 steps","Z14277":"toString()","Z14278":"64-bit integer limit +1","Z14279":"string from key, Composition","Z14280":"display natural number","Z14281":"12,345 for English","Z14282":"using only number to string","Z14283":"parse string of digits as Natural Number","Z14284":"parse \"0\" as 0","Z14285":"parse \"12345\" as 12345","Z14286":"parse very large number (64+ bit)","Z14287":"use int() constructor","Z14288":"use BigInt constructor","Z14289":"construct a natural number instance","Z14290":"read natural number","Z14291":"read \"12345\" in English is 12345","Z14292":"simple parser","Z14293":"Function option for a list of languages","Z14294":"Configuration of functions for given languages","Z14295":"add commas between triples if more than four digits","Z14296":"commafy 1 = 1","Z14297":"commafy 1111 = 1111","Z14298":"commafy 11111 = 11,111","Z14299":"commafy 111,111","Z14300":"commafy 1,111,111","Z14301":"add commas between three characters if more than four characters","Z14302":"display functions for natural number","Z14303":"read functions for natural number","Z14304":"parse natural numbers leniently","Z14305":"parse 11,344","Z14306":"parse 11.344","Z14307":"loop through string and drop dots, commas, spaces","Z14308":"read \"12,345\" in English","Z14309":"read \"12.345\" in German","Z14310":"select a function based on language","Z14311":"select a function based on lists of languages","Z14312":"list of function options for languages from configuration","Z14313":"default function from configuration","Z14314":"value by key Z14294K2","Z14315":"value by key Z14294K1","Z14316":"select a function based on language configuration","Z14317":"list of languages from function option","Z14318":"value by key Z14293K2","Z14319":"function from function option","Z14320":"value by key Z14293K1","Z14321":"is language in list","Z14322":"Malayalam in Focus languages","Z14323":"Croatian not in Focus languages","Z14324":"Old English is not in an empty list","Z14325":"looks recursively through list","Z14326":"same language","Z14327":"Uzbek is not Japanese","Z14328":"Ukrainian is Ukrainian","Z14329":"language to language code","Z14330":"Australian English is en-au (two-letter code with variety annotation)","Z14331":"Bengali is bn (two-letter code)","Z14332":"value by key Z60K1","Z14333":"is the code the same","Z14334":"monolingual strings are from the same language","Z14335":"same language monolingual strings, composition","Z14336":"two strings are both English","Z14337":"strings in English and Australian English are not the same language","Z14338":"if empty return default, else go through the options recursively","Z14339":"12.345 for German","Z14340":"apply display configuration to natural number","Z14341":"function is equal to the same function ","Z14342":"different functions are not equal","Z14343":"add commas if >4 digits, composition","Z14344":"number of digits in decimal string representation of a natural number","Z14345":"0 has 1 digit","Z14346":"9 has 1 digit","Z14347":"digits, composition of length of string representation","Z14348":"99 has 2 digits","Z14349":"select a function based on languages but using direct values","Z14350":"number of digits, python","Z14351":"if empty return default, else go through the options recursively, but using value by key","Z14352":"10^100 has 101 digits","Z14353":"map f on [value]","Z14354":"rebuilding the string in for loop","Z14355":"apply(n^2, 9) = 81","Z14356":"pick the English display function for natural numbers","Z14357":"Dzonkha (currently) uses the default natural number display function","Z14358":"choose English Plural for Australian English from list with plurals of English and French","Z14359":"parse 99","Z14360":"parse 007","Z14361":"parse 700","Z14362":"parse natural numbers leniently, composition","Z14363":"parse -0","Z14364":"add periods between triples if more than four digits","Z14365":"periodify 99.999","Z14366":"add periods between triples, python","Z14367":"periodify 9","Z14368":"add thin space between triples if more than four digits","Z14369":"thin spacify 99 999","Z14370":"thin space between triples, python","Z14371":"Láadan is ldn (three-letter code)","Z14372":"parse 99 999 (thin spaces)","Z14373":"parse 99 999 (regular spaces)","Z14374":"remove all spaces of all kinds","Z14375":"\"A B C\" (regular spaces)","Z14376":"sum of decimal digits","Z14377":"sum of decimal digits, python","Z14378":"\"99 999\" (thin space)","Z14379":"remove all unicode category Z, python","Z14380":"remove complete list of spaces","Z14381":"get language code value for Australian English object from key Z60K1","Z14382":"get function (English plural) from function option with language list","Z14383":"get list of languages to which a function selection applies","Z14385":"Australian English == Australian English","Z14386":"English != Australian English","Z14387":"natural language equality, composition of code value equality","Z14388":"get default function (natural number to string) out of language configuration","Z14389":"test extracting list of function language options, without the default","Z14390":"12 345 in Danish","Z14391":"plural in language of monolingual text","Z14392":"monolingual text equality","Z14393":"en-au G'day == en-au G'day","Z14394":"en-au: G'day != en: G'day","Z14395":"en: Hello != en:G'day","Z14396":"string of monolingual text","Z14397":"\"G'day mate\" from monolingual Australian English","Z14398":"string of monolingual text, composition","Z14399":"monolingual text equality, composition checking both language and string","Z14400":"plural of en:tree is en:trees","Z14401":"plural functions for natural languages","Z14402":"plural in language of monolingual text, composition","Z14403":"JS implementation of selecting the language","Z14404":"language of monolingual text","Z14405":"language of monolingual text, composition via code","Z14406":"en-au to Australian English (natural language object)","Z14407":"language of en-au:\"G'day, mate!\" is Australian English","Z14408":"plural of fr:aurochs is fr:aurochs","Z14409":"12.345 in Italian","Z14410":"\"12 345\" in Danish","Z14411":"apply(select plural function: English, \"dog\") = \"dogs\"","Z14412":"choose English plural from list of plurals for Australian English","Z14413":"parse unambiguous numbers leniently assuming English conventions where ambiguous","Z14414":"parse unambiguous natural numbers leniently, composition","Z14415":"99,999,999 is unambiguous","Z14416":"unequal natural numbers","Z14417":"not equality of natural numbers, composition","Z14418":"42 != 99, true","Z14419":"99 == 99, so inequality is false","Z14420":"natural number inequality, python !=","Z14421":"99.999 is not unambiguously 99999 in English text","Z14422":"-42 is not unambiguously 42 (or any other natural number)","Z14423":"accept spaced phone number: 1300 224 636","Z14424":"accept dashed phone number: 1300-224-636","Z14425":"accept leading positive: +42","Z14426":"accept leading zeroes: 007","Z14427":"1+1 is not unambiguously 11","Z14428":"leading negative is unambiguous only for -0","Z14429":"10.000 meant as 10 should return an error to protect against wrong types","Z14430":"accept 99.999.999 not English style, but is unambiguous and not another type","Z14431":"9,99 is ambiguous, don't return 999","Z14432":"99 999 999 is unambiguous (thin spaces)","Z14433":"1,23,45,678 is unambiguous Indian style","Z14434":"\"12 345\" in Swedish","Z14435":"add narrow nonbreaking space between triples if more than four digits","Z14436":"add narrow nonbreaking space between triples, python","Z14437":"99 999 with a narrow non-breaking space","Z14438":"add nonbreaking space between triples if more than four digits","Z14439":"99 999 including non-breaking space","Z14440":"add nonbreaking spaces, python","Z14441":"parse 99 999 (non-breaking space)","Z14442":"parse 99 999 (narrow non-breaking space)","Z14443":"JS Thue-Morse sequence","Z14444":"Gray code (decimal equivalent)","Z14445":"Gray code (decimal equivalent) Python","Z14446":"Distance between two points on Earth (SI-unit output in meters) (Haversine formula)","Z14447":"Distance between New York City and Los Angeles -> 3935746 ","Z14448":"Haversine formula, python","Z14449":"Haversine formula, javascript","Z14450":"count substrings","Z14451":"count substrings, python","Z14452":"\"hello, hello, hello\" has 3 substrings of \"hello\"","Z14453":"\"hello, hello\" has 0 substrings of \"world\"","Z14454":"substring exists, composition of not(count_substrings=0)","Z14455":"\"aaaaa\" has 2 substrings of \"aa\"","Z14456":"remove first character","Z14457":"\"Hello, world!\" -> \"ello, world!\"","Z14458":"remove first character, python","Z14459":"blank string returns blank string","Z14460":"final N characters of string","Z14461":"last 6 characters of \"Hello, world!\"","Z14462":"final N characters, python","Z14463":"character Nth from the end of the string","Z14464":"the 6th last character of \"Hello, world!\" is \"w\"","Z14465":"return Nth last character, python","Z14466":"10.000,455 is European notation but does not represent a natural number","Z14467":"4 294 967 295,005 is a European format but does not represent a natural number","Z14468":"9,999 = 9999 assuming English conventions","Z14469":"blood compatibility","Z14470":"A+ and AB- are not compatible","Z14471":"Blood compatibility (python)","Z14472":"AB+ and O+ are compatible","Z14473":"blood group inheritance","Z14474":"'AO' + 'OO' = A or O","Z14475":"Blood group inheritance, python","Z14476":"'AB' + 'BO' = A or AB or B","Z14477":"'OO' + 'AA' = A","Z14478":"'AA' + 'BB' = AB","Z14480":"csv to list of strings, python using csv module","Z14481":"3^2 = 9","Z14482":"parse unambiguous numbers in English, python","Z14483":"common codepoints in strings","Z14484":"\"hello\" and \"world\" contain common letters","Z14485":"common characters, composition of common element","Z14486":"JavaScript implementation of is snake case","Z14487":"common codepoints in strings, python","Z14488":"\"quick\" and \"brown\" do not have common characters","Z14489":"is or has Bengali character, composition","Z14490":"accept +42,099 =42099 assuming English conventions","Z14491":"Implementation of is pascal case with JavaScript RegExp","Z14492":"\"The five boxing wizards jump quickly.\" is a pangram (Latin alphabet)","Z14493":"\"The quick brown fox jumps\" is not a pangram (Latin alphabet)","Z14494":"remove all characters except Arabic numerals","Z14495":"abc123 -> 123","Z14496":"remove all non-digits, regex replace composition","Z14497":"JavaScript implementation of is pangram (Latin alphabet)","Z14498":"0x39 is not decimal 39","Z14499":"JavaScript implementation of string only has characters from alphabet","Z14500":"JavaScript implementation of remove first character","Z14501":"JavaScript implementation of first element","Z14502":"JavaScript implementation of last element","Z14503":"JavaScript implementation of list without first element","Z14504":"JavaScript implementation of list without last element","Z14505":"JavaScript implementation on is empty list","Z14506":"JavaScript implementation using Aray.prototype.some with identity","Z14507":"JavaScript implementation of is single element in list","Z14508":"Get the nth element of a list in JavaScript using optional chaining","Z14509":"JavaScript implementation of lists have unequal length","Z14510":"JavaScript implementation of increment by one using prefix increment","Z14511":"JavaScript implementation of binary to hexadecimal","Z14512":"pick the Swedish display function for natural numbers","Z14513":"1.2E3 is not 123","Z14514":"$1.23 is not 123","Z14515":"remove all characters not in second string","Z14516":"remove all characters not in alphabet, python","Z14517":"vowels only from \"Hello, world!\"","Z14518":"remove all except Roman alphanumerics, composition with specific alphabet","Z14519":"remove all except digits, composition with specified alphabet","Z14520":"remove all characters in second string","Z14521":"remove all characters in second string, python","Z14522":"remove vowels from \"Hello, world!\"","Z14523":"English cardinal to ordinal","Z14524":"twenty-three → twenty-third","Z14525":"English ordinal: Python (strings)","Z14526":"English ordinal","Z14527":"42 → forty-second","Z14528":"English ordinal from Natural number: Composition","Z14529":"31 → thirty-first","Z14530":"120 → one hundred and twentieth","Z14531":"Natural number with English ordinal suffix","Z14532":"53 → 53rd","Z14533":"Natural number with English ordinal suffix, composition","Z14534":"Ordinal with English suffix","Z14535":"42 → 42nd","Z14536":"JavaScript implementation of modular exponentiation","Z14537":"Finnish cardinal","Z14538":"Modular exponentiation in JavaScript using binary exponentiation with reduce()","Z14539":"Modular exponentiation in JavaScript using binary exponentiation with bitwise operations","Z14540":"0 = nolla","Z14541":"split list in two, get N/2 composition","Z14542":"Natural number from ordinal with English suffix","Z14543":"42nd → 42 ","Z14544":"Natural number from English ordinal, Composition","Z14545":"Natural number from English ordinal, Python","Z14546":"Roundtrip 123","Z14547":"Roundtrip 321st","Z14548":"number of function options in configuration","Z14549":"number of function options in configuration, javascript","Z14550":"(currently) 5 natural number display functions","Z14551":"list of function options for language, javascript from key","Z14552":"equality of function options for list of languages","Z14553":"two identical function options: true","Z14554":"function options with different functions: false","Z14555":"function options with different languages: false","Z14556":"equality of function options, composition","Z14557":"equality of function options, language order switched: fail","Z14558":"equality of function options, javascript","Z14559":"equality of function options, python","Z14560":"({[(ab[c])<>]}) is paired","Z14562":"function equality","Z14563":"function equality, python ==","Z14564":"reverse string != reverse list","Z14565":"reverse string == reverse string","Z14566":"pick the Danish display function for natural numbers","Z14567":"byte to natural number","Z14568":"single byte to int, Python","Z14569":"byte value 0x20 should be natural number 32","Z14570":"list of bytes to list of ints","Z14572":"list of bytes to list of ints, composition","Z14573":"list of bytes to hex (lowercase)","Z14574":"list of bytes to hex, python","Z14575":"54, 65, 73, 74 becomes 54657374","Z14576":"list of bytes to string (UTF-8)","Z14577":"list of bytes to string, python","Z14578":"[54,65,73,74] = \"Test\"","Z14579":"and made from nors","Z14580":"negation implemented with nor","Z14581":"number of words in string","Z14582":"sentence word count, javascript","Z14583":"\"On the go\" has 3 words","Z14584":"14526 → fourteen thousand five hundred and twenty-sixth","Z14585":"14531 → “14531st” tests Z14531","Z14586":"22 → twenty-second","Z14587":"\"Love heals\" has 2 words","Z14588":"word count, composition","Z14589":"first empty string in a list is empty","Z14590":"Join two strings Composition","Z14591":"join list of strings ([‘{a’, ‘b’, ‘c}’], ‘, ‘) → ‘{a, b, c}’","Z14592":"first N characters of string","Z14593":"first 5 characters of \"Hello, world!\"","Z14594":"first N characters, python","Z14595":"final characters Composition","Z14596":"join two strings Python f-strings","Z14598":"Hebrew string: אבגדהוזחטיכלמנסעפצקרשתךםןףץ","Z14599":"Hebrew string: אבגדהוזחטיכלמנסעפצקרשת","Z14600":"Hebrew string: ךםןףץ, ordered string","Z14601":"Hebrew string: כמנפצ, ordered string","Z14602":"Hebrew string: בהוכלמש","Z14603":"Hebrew string: בגדכפת","Z14604":"Hebrew string: אהוי","Z14605":"Hebrew string: אינת","Z14606":"Hebrew string, niqqud","Z14607":"get the first n elements of a list in Python","Z14608":"left brackets, ordered string","Z14609":"right brackets, ordered string","Z14610":"Atbash (Hebrew)","Z14611":"Atbash, composition","Z14612":"is Hebrew character, composition","Z14613":"replace character set","Z14614":"replace character set, python","Z14615":"Atbash","Z14616":"Hebrew Atbash, composition","Z14617":"Hebrew list of strings: Number names (default-female)","Z14618":"Hello, world! replace \"world\" alphabet with \"WORLD\" alphabet","Z14619":"Hebrew names of numerical orders of magnitude (powers of 1000)","Z14620":"pretty \" (Hebrew)","Z14621":"Hebrew pretty \", composition","Z14623":"Hebrew pretty ', composition","Z14624":"Unicode character parser","Z14625":"Unicode character parser, composition","Z14626":"hebrew date convert","Z14627":"Hebrew months","Z14628":"get the last n elements of a list (Python)","Z14629":"Fermat number, F_n = 2^2^n + 1","Z14630":"Fermat number F_n (Python)","Z14631":"F_0 = 3","Z14632":"F_9, the 10th Fermat number","Z14633":"Fermat number F_n (JavaScript)","Z14634":"hebrew calendar intercalary number","Z14635":"Hebrew calendar intercalary number, javascript","Z14636":"remove first N characters of string","Z14637":"remove first 7 characters of \"Hello, world!\"","Z14638":"remove first N characters, python","Z14639":"remove first 0 characters of \"Hello, world!\"","Z14640":"remove first 99 characters of \"Hello, world!\" leaving an empty string","Z14641":"Caesar cipher, composition of substitution cipher","Z14642":"shifting by 27 is the same as shifting by 1","Z14643":"is Forsyth–Edwards Notation","Z14644":"starting position in FEN","Z14645":"FEN, (INCOMPLETE) composition","Z14646":"is FEN field 1","Z14647":"starting position FEN field 1","Z14648":"is FEN field 2","Z14649":"white to move: \"w\"","Z14650":"black to move: \"b\"","Z14651":"\"-\" is not \"w\" or \"b\"","Z14652":"is w or b, python","Z14653":"is FEN field 3","Z14654":"\"-\" neither side can castle, valid","Z14655":"\"KQkq\", all castling options are still available, valid","Z14656":"FEN field 3, python enumerate all valid options","Z14657":"is FEN field 4","Z14658":"\"-\" means there is no en passant target square, valid","Z14659":"\"e3\" is valid","Z14660":"FEN field 4, python","Z14661":"\"a1\" is invalid","Z14662":"is FEN field 5","Z14663":"\"0\" is valid","Z14664":"\"49\" is valid","Z14665":"\"74\" is valid","Z14666":"\"75\" is valid?","Z14667":"\"76\" is not valid","Z14668":"FEN field 5, python","Z14669":"negative values not valid","Z14670":"\"-\" not valid","Z14671":"\"a\" not valid","Z14672":"is FEN field 6","Z14673":"\"0\" is not valid","Z14674":"is FEN field 6, composition","Z14675":"\"1\" is valid","Z14676":"\"99\" is valid","Z14677":"FEN field 6, python","Z14678":"FEN field 1, composition (INCOMPLETE)","Z14679":"rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R is valid","Z14680":"print","Z14681":"print Python","Z14682":"286472803 * 3724146427 * 11745384883 is not prime","Z14683":"is Carmichael number","Z14684":"286472803 * 3724146427 * 11745384883 is a Carmichael number","Z14685":"561 is the first Carmichael number","Z14686":"satisfies congruence relation: b^n = b mod n","Z14687":"b^n = b mod n, composition","Z14688":"7^1105 mod 1105 = 7","Z14689":"pow(b,n,n)==b, python","Z14690":"10^2 mod 9 = 1","Z14691":"7^1000 mod 1000 = 1 (not 7)","Z14692":"large prime with 131 digits","Z14693":"131 digit prime","Z14694":"multiply three natural numbers","Z14695":"multiply three natural numbers, python","Z14696":"397 digit strong pseudoprime to all bases up to 300, is not prime","Z14697":"5*3*2 = 30","Z14698":"construct 397 digit Carmichael number, a large pseudoprime","Z14699":"JavaScript implementation of common codepoints in strings","Z14700":"JavaScript implementation of discard from start of first substring using String.prototype.split","Z14701":"286472803*3724146427*11745384883*5576391616581787 is not prime","Z14702":"strong Lucas pseudoprime is not prime","Z14703":"NATO phonetic alphabet DIN 5009 IPA transcription decode, python","Z14704":"NATO phonetic alphabet ICAO IPA transcription decode, python","Z14705":"NATO phonetic alphabet ICAO pronunciations decode, python","Z14706":"Fermat number F_n (composition)","Z14707":"GCD, JavaScript","Z14708":"JavaScript implementation of is heterogram","Z14709":"-1 → 0 (Integer, rectified)","Z14710":"1 → 1","Z14711":"Natural number is between","Z14712":"0 ⩽ 0 ⩽ 0 is True","Z14713":"Between (N, N, N) Compostition","Z14714":"is between (N,N,N) Python","Z14715":"2 is between 1 and 3","Z14716":"3 is between 4 and 2","Z14717":"are 8 elements True","Z14718":"4th False with 7 Trues is False","Z14719":"natural number is between, and <= composition","Z14720":"English possessive, python","Z14721":"possessive of \"who\" is \"whose\"","Z14722":"possessive of \"her\" is \"hers\"","Z14723":"possessive of \"him\" is \"his\"","Z14724":"possessive of \"he\" is \"his\"","Z14725":"40 -> \"fortieth\"","Z14726":"English denominator to fractional ordinal","Z14727":"9 -> \"ninth\"","Z14728":"2 -> \"half\"","Z14729":"4 -> \"quarter\"","Z14730":"1 -> \"whole\"","Z14731":"fractional ordinal, composition of ordinal with exceptions","Z14732":"hyperoperation","Z14733":"hyperoperation (Python, by definition)","Z14734":"H0(2,3) = 4","Z14735":"H1(2,3) = 5","Z14736":"H2(2,3) = 6","Z14737":"H3(2,3) = 8","Z14738":"H4(2,3) = 16","Z14739":"H5(2,3) = 65536","Z14740":"hyperoperation (Python)","Z14741":"H5(3,2) = 7625597484987","Z14742":"Ackermann function (two-argument version)","Z14743":"Ackermann function (two arguments), recursive python","Z14744":"Ackermann function (two-argument version), pragmatic python","Z14745":"A(0,0)=1","Z14746":"A(0,1)=2","Z14747":"A(1,0)=2","Z14748":"A(1,1)=3","Z14749":"A(2,2)=7","Z14750":"A(3,3)=61","Z14751":"A(4,0)=13","Z14752":"A(4,1)=65533","Z14753":"A(5,0)=65533","Z14754":"Ackermann function (two arguments), composition","Z14755":"0|0 = 0","Z14756":"commutativity: 123|456 = 456|123","Z14757":"associativity: 123|(456|789) = (123|456)|789","Z14758":"bitwise or, javascript","Z14759":"add two natural numbers, n=1 hyperoperation composition","Z14760":"multiply two natural numbers, n=2 hyperoperation composition","Z14761":"exponentiation, n=3 hyperoperation composition","Z14762":"is function commutative for these arguments","Z14763":"bitwise or is commutative, 123|456 = 456|123","Z14764":"is commutative, composition","Z14765":"is function associative for these arguments","Z14766":"is associative, composition","Z14767":"bitwise or is associative (123|456|789)","Z14768":"pair and bracket is not associative: \"(a,(b,c))\" != \"((a,b),c)\"","Z14769":"join two strings is not commutative, \"ab\" != \"ba\"","Z14770":"pad string with leading characters to specified length","Z14771":"(\"7\",3,\"0\") -> \"007\"","Z14772":"rjust, python","Z14773":"binary string to list of booleans","Z14774":"\"101\" -> [true,false,true]","Z14775":"list of booleans to binary string","Z14776":"[true,true,false,false] -> \"1100\"","Z14777":"list of booleans to array string, python","Z14778":"binary string to list of booleans, python","Z14779":"apply a two-parameter function pairwise to elements of two lists of the same length","Z14780":"truth table for Boolean \"and\"","Z14781":"apply a two-parameter function pairwise to two lists, composition","Z14782":"234|234 = 234","Z14783":"is Fermat pseudoprime","Z14784":"is Fermat pseudoprime, composition","Z14785":"1 is not Fermat pseudoprime","Z14786":"17 is not Fermat pseudoprime","Z14787":"341 is Fermat pseudoprime to base 2","Z14788":"91 is not Fermat pseudoprime to base 2","Z14789":"91 is Fermat pseudoprime to base 3","Z14790":"91 is Fermat pseudoprime to base 4","Z14791":"4 is Fermat pseudoprime to base 1","Z14792":"is Poulet number","Z14793":"is Poulet number, composition","Z14794":"23 is not Poulet number","Z14795":"91 is not Poulet number","Z14796":"341 is Poulet number","Z14797":"60787 is Poulet number","Z14798":"format large natural number strings by adding comma, composition (regex)","Z14799":"1234567890 -> \"1,234,567,890\"","Z14800":"lesser of two natural numbers, composition","Z14801":"greater of two natural numbers, JavaScript","Z14802":"lesser of two natural numbers, JavaScript","Z14803":"binomial(2*3,3) = 20","Z14804":"binomial(2*20,20) = 137846528820","Z14805":"central binomial coefficient, composition","Z14806":"Catalan number, composition","Z14807":"Catalan number C5 = 42","Z14808":"2^n-1, composition","Z14809":"2^100-1","Z14810":"is Wieferich prime","Z14811":"is Wieferich prime, composition","Z14812":"1093 is Wieferich prime","Z14813":"3511 is Wieferich prime","Z14814":"3279 is not Wieferich prime (but a Wieferich number)","Z14815":"is Wieferich number","Z14816":"is Wieferich number, composition","Z14817":"1093 is Wieferich number","Z14818":"3279 is Wieferich number","Z14819":"is Wieferich prime, composition (based on Wieferich number)","Z14820":"is Wieferich prime, python (complete list)","Z14821":"is Wieferich number, python (complete list)","Z14822":"2^n, JavaScript","Z14823":"2^n-1, JavaScript","Z14824":"n mod 2, composition","Z14825":"6 mod 2 = 0","Z14826":"7 mod 2 = 1","Z14827":"0 mod 2 = 0","Z14828":"2^0 - 1 = 0","Z14829":"phi(1) = 1","Z14830":"phi(97) = 96","Z14831":"phi(100) = 40","Z14832":"\"𪚥\" is Han character (rare, CJK Ext B)","Z14833":"\"𪨊\" is Han character (rare, CJK Ext C)","Z14834":"\"𫞄\" is Han character (rare, CJK Ext D)","Z14835":"\"𬎆\" is Han character (rare, CJK Ext E)","Z14836":"\"𮀔\" is Han character (rare, CJK Ext F)","Z14837":"\"𰚼\" is Han character (rare, CJK Ext G)","Z14838":"\"𱎼\" is Han character (rare, CJK Ext H)","Z14839":"\"𮹝\" is Han character (rare, CJK Ext I)","Z14840":"\"㇆\" is not Han character (CJK stroke)","Z14841":"\"。\" is not Han character","Z14842":"\"언\" is not Han character","Z14843":"\"鿫\" is Han character (Unicode 11.0)","Z14844":"\"﨑\" is Han character (CJK Compatibility, but actually Unified Ideographs)","Z14845":"\"〇\" is Han character (but in CJK Symbols and Punctuation)","Z14846":"\"𪛞\" is Han character (rare, CJK Ext B, Unicode 14.0)","Z14847":"Narayana number","Z14848":"Narayana number, composition","Z14849":"N(4,2) = 6","Z14850":"N(8,5) = 490","Z14851":"N(100,100) = 1","Z14852":"binomial coefficient, python (using math.comb)","Z14853":"Narayana number, python","Z14854":"Euler totient function, python (using math.gcd)","Z14855":"is Wieferich number, python","Z14856":"central binomial coefficient, python (using math.comb)","Z14857":"GCD, python (using math.gcd)","Z14858":"LCM, python","Z14859":"Delannoy number","Z14860":"Delannoy number, python","Z14861":"D(3,3) = 63","Z14862":"D(8,9) = 598417","Z14863":"Delannoy number, python (recursive relation)","Z14864":"central Delannoy number","Z14865":"central Delannoy number, composition","Z14866":"D(0) = 1","Z14867":"D(5) = 1683","Z14868":"D(20) = 260543813797441","Z14869":"central Delannoy number, python","Z14870":"Catalan number, python (using math.comb)","Z14871":"Motzkin number","Z14872":"Motzkin number, python","Z14873":"M0 = 1","Z14874":"M10 = 2188","Z14875":"M30","Z14876":"Schröder number","Z14877":"Schröder number, python (recursive relation)","Z14878":"S5 = 394","Z14879":"S15 = 3937603038","Z14880":"Schröder number, python","Z14881":"Schröder number, composition","Z14882":"S0 = 1","Z14883":"little Schröder number","Z14884":"little Schröder number, python","Z14885":"s0 = 1","Z14886":"s10 = 518859","Z14887":"s20","Z14888":"cake number","Z14889":"cake number, python","Z14890":"C(0) = 1","Z14891":"C(10) = 176","Z14892":"C(99) = 161800","Z14893":"cake number, javascript","Z14894":"Eulerian number","Z14895":"Eulerian number, python","Z14896":"A(100,0) = 1","Z14897":"A(9,4) = 156190","Z14898":"factorial, python (using math.factorial)","Z14899":"factorial, javascript","Z14900":"Lah number","Z14901":"Lah number, python","Z14902":"L(0,0) = 1","Z14903":"L(5,0) = 0","Z14904":"L(10,4) = 12700800","Z14905":"Lobb number","Z14906":"Lobb number, python","Z14907":"L(0,0)=1","Z14908":"L(0,5)=42","Z14909":"L(5,10)=10659","Z14910":"Lobb number, composition","Z14911":"Catalan number, composition based on Lobb number","Z14912":"Dedekind psi(1) = 1","Z14913":"Dedekind psi(10) = 18","Z14914":"Dedekind psi(69) = 96","Z14915":"aliquot sum s(1) = 0","Z14916":"aliquot sum s(72) = 123","Z14917":"Hooley's delta function","Z14918":"Hooley's delta function, python","Z14919":"Hooley's delta(1) = 1","Z14920":"Hooley's delta(2) = 2","Z14921":"Hooley's delta(12) = 3","Z14922":"Hooley's delta(90) = 4","Z14923":"Hooley's delta(2880) = 10","Z14924":"is harmonic divisor number","Z14925":"is harmonic divisor number, composition","Z14926":" is harmonic divisor number, python","Z14927":"1 is harmonic divisor number","Z14928":"4 is not harmonic divisor number","Z14929":"100 is not harmonic divisor number","Z14930":"140 is harmonic divisor number","Z14931":"1089270 is harmonic divisor number","Z14932":"n + sum of proper divisors, composition","Z14933":"is perfect number","Z14934":"is perfect number, composition","Z14935":"6 is perfect number","Z14936":"100 is not perfect number","Z14937":"8589869056 is perfect number","Z14938":"is k-hyperperfect number","Z14939":"is k-hyperperfect number, python","Z14940":"6 is 1-hyperperfect number","Z14941":"21 is 2-hyperperfect number","Z14942":"6 is not 2-hyperperfect number","Z14943":"1950625 is 4-hyperperfect number","Z14944":"is k-hyperperfect number, composition","Z14945":"is 1-hyperperfect number, composition","Z14946":"is k-almost prime","Z14947":"is k-almost prime, composition","Z14948":"11 is 1-almost prime","Z14949":"22 is 2-almost prime","Z14950":"100 is 4-almost prime","Z14951":"is k-almost prime, python","Z14952":"is 1-almost prime, composition","Z14953":"is semiprime","Z14954":"is semiprime, composition","Z14955":"4 is semiprime","Z14956":"5 is not semiprime","Z14957":"111 is semiprime","Z14958":"is sphenic number","Z14959":"is sphenic number, composition","Z14960":"231 is sphenic number","Z14961":"is factorial","Z14962":"is factorial, python","Z14963":"1 is factorial","Z14964":"120 is factorial","Z14965":"60 is not factorial","Z14966":"is factorial prime","Z14967":"is factorial prime, composition","Z14968":"2 is factorial prime","Z14969":"5 is factorial prime","Z14970":"39916801 is factorial prime","Z14971":"is deficient number","Z14972":"is deficient number, composition","Z14973":"10 is deficient number","Z14974":"6 is not deficient number","Z14975":"12 is not deficient number","Z14976":"is abundant number","Z14977":"is abundant number, composition","Z14978":"6 is not abundant number","Z14979":"66 is abundant number","Z14980":"is semiperfect number","Z14981":"is semiperfect number, python","Z14982":"6 is semiperfect number","Z14983":"32 is not semiperfect number","Z14984":"100 is semiperfect number","Z14985":"3  is not semiperfect number","Z14986":"666 is semiperfect number","Z14987":"1666 is not semiperfect number","Z14988":"is perfect number, python","Z14989":"is deficient number, python","Z14990":"is abundant number, python","Z14991":"is weird number","Z14992":"is weird number, composition","Z14993":"is weird number, python","Z14994":"70 is weird number","Z14995":"100 is not weird number","Z14996":"166 is not weird number","Z14997":"11690 is weird number","Z14998":"836 is weird number","Z14999":"is superperfect number","Z15000":"is superperfect number, python","Z15001":"2 is superperfect number","Z15002":"6 is not superperfect number","Z15003":"100 is not superperfect number","Z15004":"2048 is not superperfect number","Z15005":"4096 is superperfect number","Z15006":"is superperfect number, composition","Z15007":"is (m,k)-perfect number","Z15008":"is (m,k)-perfect number, python","Z15009":"2 is (2,2)-perfect number","Z15010":"8 is not (2,4)-perfect number","Z15011":"480 is (2,10)-perfect number","Z15012":"156 is (3,10)-perfect","Z15013":"is m-superperfect number","Z15014":"m-superperfect numbers are (m,2)-perfect, composition","Z15015":"is 2-superperfect number, composition","Z15016":"is (2,2)-perfect number, composition","Z15017":"is (1,2)-perfect number, composition","Z15018":"is k-perfect number","Z15019":"is (1,k)-perfect number, composition","Z15020":"is 2-perfect number, composition","Z15021":"is k-perfect number, python","Z15022":"6 is 2-perfect number","Z15023":"120 is 3-perfect number","Z15024":"30240 is 4-perfect number","Z15025":"496 is perfect number","Z15026":"is Erdős–Nicolas number","Z15027":"is Erdős–Nicolas number, python","Z15028":"24 is Erdős–Nicolas number","Z15029":"100 is not Erdős–Nicolas number","Z15030":"2016 is Erdős–Nicolas number","Z15031":"is arithmetic number","Z15032":"is arithmetic number, composition","Z15033":"6 is arithmetic number","Z15034":"7 is arithmetic number","Z15035":"10 is not arithmetic number","Z15036":"is arithmetic number, python","Z15037":"pronic number P_n","Z15038":"pronic number, composition","Z15039":"pronic number, python","Z15040":"P_0 = 0","Z15041":"P_50 = 2550","Z15042":"half of pronic number, composition","Z15043":"triangular number(n=10) = 55","Z15044":"Cullen number","Z15045":"Cullen number, python","Z15046":"Cullen number(n=10) = 10241","Z15047":"Woodall number","Z15048":"Woodall number, python","Z15049":"Woodall number(n=10) = 10239","Z15050":"is palindromic number","Z15051":"is palindromic number, composition","Z15052":"9 is palindromic number","Z15053":"101 is palindromic number","Z15054":"123 is not palindromic number","Z15055":"is palindromic prime","Z15056":"is palindromic prime, composition","Z15057":"101 is palindromic prime","Z15058":"121 is not palindromic prime","Z15059":"199 is not palindromic prime","Z15060":"is palindromic number, python","Z15061":"Riordan number","Z15062":"Riordan number, python (recursive relation)","Z15063":"Riordan number(n=0) = 1","Z15064":"Riordan number(n=1) = 0","Z15065":"Riordan number(n=10) = 603","Z15066":"Riordan number(n=30)","Z15067":"Motzkin number, composition (based on Riordan number)","Z15068":"nth number in Baum–Sweet sequence","Z15069":"nth number in Baum–Sweet sequence, python","Z15070":"b4 = 1","Z15071":"b5 = 0","Z15072":"b99 = 0","Z15073":"b100 = 1","Z15074":"nth number in Baum–Sweet sequence, python (recursive relation)","Z15075":"Padovan number","Z15076":"Padovan number, python (recursive relation)","Z15077":"Padovan number P(0) = 1","Z15078":"Padovan number P(10) = 3","Z15079":"Padovan number P(100)","Z15080":"Perrin number","Z15081":"Perrin number, python","Z15082":"Perrin number P(0) = 3","Z15083":"Perrin number P(10) = 17","Z15084":"Perrin number P(100)","Z15085":"Padovan's spiral number","Z15086":"Padovan's spiral number, compostion (based on Padovan number)","Z15087":"Padovan's spiral number P(1) = 1","Z15088":"Padovan's spiral number P(10) = 9","Z15089":"Padovan's spiral number P(100)","Z15090":"Padovan's spiral number, python (based on binomial coefficients)","Z15091":"Padovan number (based on binomial coefficients)","Z15092":"nth number in Kolakoski sequence","Z15093":"nth number in Kolakoski sequence, python","Z15094":"Kolakoski sequence, n=1","Z15095":"Kolakoski sequence, n=10","Z15096":"Kolakoski sequence, n=100","Z15097":"Kolakoski sequence, n=999","Z15098":"nth number in Recamán's sequence","Z15099":"nth number in Recamán's sequence, python","Z15100":"Recamán's sequence a(1) = 1","Z15101":"Recamán's sequence a(10) = 11","Z15102":"Recamán's sequence a(100) = 164","Z15103":"Recamán's sequence a(7215) = 10000","Z15104":"sandbox-function (n-ary)","Z15105":"reverse a reversed list","Z15106":"Echo six strings to list","Z15107":"double","Z15108":"2*n+1","Z15109":"double number, python","Z15110":"2*n+1, Python","Z15111":"floor(n/2)","Z15112":"floor(n/2), python","Z15113":"quarter-square","Z15114":"quarter-square Python","Z15115":"exponent of highest power of 2 dividing n","Z15116":"Javascript exponent of highest power of 2 dividing","Z15117":"highest power of 2 dividing n","Z15118":"highest power of 2 dividing n, python","Z15119":"Hurwitz-Radon number","Z15120":"Hurwitz-Radon number, Javascript","Z15121":"is odious number","Z15122":"is odious number, python","Z15123":"1 is odious number","Z15124":"11 is odious number","Z15125":"111 is not odious number","Z15126":"is odious number, composition (based on Thue-Morse sequence)","Z15127":"is evil number","Z15128":"1 is not evil number","Z15129":"11 is not evil number","Z15130":"111 is evil number","Z15131":"is evil number, python","Z15132":"is evil number, composition (based on Thue-Morse sequence)","Z15133":"negate \"is odious number\", composition","Z15134":"nth number in lower Wythoff sequence","Z15135":"nth number in lower Wythoff sequence, python","Z15136":"10th number in lower Wythoff sequence is 16","Z15137":"1000th number in lower Wythoff sequence is 1618","Z15138":"nth number in upper Wythoff sequence","Z15139":"nth number in upper Wythoff sequence, python","Z15140":"10th number in upper Wythoff sequence is 26","Z15141":"1000th number in upper Wythoff sequence is 2618","Z15142":"list identity","Z15143":"alternating factorial","Z15144":"echo list","Z15145":"alternating factorial, python","Z15146":"af(0) = 0","Z15147":"af(2) = 1","Z15148":"af(10) = 3301819","Z15149":"alternating factorial, python (recursive relation)","Z15150":"echo [A, B, C, D, E, F]","Z15151":"is eban number","Z15152":"is eban number, composition","Z15153":"6 is eban number","Z15154":"9 is not eban number","Z15155":"70 is not eban number","Z15156":"2046 is eban number","Z15157":"exponential factorial","Z15158":"exponential factorial, python","Z15159":"exponential factorial of 0 is 1","Z15160":"Echo six arguments in list","Z15161":"exponential factorial of 1 is 1","Z15162":"exponential factorial of 4 is 262144","Z15163":"hyperfactorial","Z15164":"Success echoing arguments into a list","Z15165":"hyperfactorial, Python","Z15166":"hyperfactorial of 0 is 1","Z15167":"hyperfactorial of 3 is 108","Z15168":"hyperfactorial of 10","Z15169":"nth Leonardo number","Z15170":"nth Leonardo number, python","Z15171":"0th Leonardo number is 1","Z15172":"10th Leonardo number is 177","Z15173":"100th Leonardo number","Z15174":"nth polite number","Z15175":"join two strings separably","Z15176":"nth polite number, python","Z15177":"1st polite number is 1","Z15178":"10th polite number is 13","Z15179":"1000th polite number is 1009","Z15180":"join two strings separably Composition ","Z15181":"length of binary representation, python (using bit_length)","Z15182":"length of binary representation of 63 is 6","Z15183":"length of binary representation of 64 is 7","Z15184":"nth polite number, composition","Z15185":"(“first”, “second”, [U+200B x 2] ) → “first​second” [U+200B x1]","Z15186":"is refactorable number","Z15187":"is refactorable number, composition","Z15188":"100 is not refactorable number","Z15189":"104 is refactorable number","Z15190":"is square number","Z15191":"is square number, python","Z15192":"0 is square number","Z15193":"9801 is square number","Z15194":"1234 is not square number","Z15195":"is strobogrammatic number","Z15196":"is strobogrammatic number, python","Z15197":"0 is strobogrammatic number","Z15198":"55 is not strobogrammatic number","Z15199":"619 is strobogrammatic number","Z15200":"666 is not strobogrammatic number","Z15201":"is Størmer number","Z15202":"is Størmer number, composition","Z15203":"3 is not Størmer number","Z15204":"4 is Størmer number","Z15205":"21 is not Størmer number","Z15206":"666 is Størmer number","Z15207":"superfactorial","Z15208":"superfactorial, python","Z15209":"superfactorial of 0 is 1","Z15210":"superfactorial of 1 is 1","Z15211":"superfactorial of 5 is 34560","Z15212":"superfactorial of 10","Z15213":"nth Thabit number","Z15214":"nth Thabit number, python","Z15215":"0th Thabit number is 0","Z15216":"1st Thabit number is 2","Z15217":"10th Thabit number is 1535","Z15218":"is k-smooth number","Z15219":"is k-smooth number, composition","Z15220":"64 is 2-smooth number","Z15221":"3888 is 3-smooth number","Z15222":"15750 is 7-smooth number","Z15223":"702 is not 7-smooth number","Z15224":"is regular number","Z15225":"is regular number, composition","Z15226":"60 is regular number","Z15227":"7 is not regular number","Z15228":"is unusual number","Z15229":"is unusual number, composition","Z15230":"99 is unusual number","Z15231":"100 is not unusual number","Z15232":"McCarthy 91 function","Z15233":"McCarthy 91 function, python","Z15234":"McCarthy 91 function M(1) = 91","Z15235":"McCarthy 91 function M(101) = 91","Z15236":"McCarthy 91 function M(102) = 92","Z15237":"McCarthy 91 function by definition, python","Z15238":"McCarthy 91 function, javascript","Z15239":"McCarthy 91 function, composition","Z15240":"McCarthy 91 function M(100) = 91","Z15241":"is k-rough number","Z15242":"is k-rough number, composition","Z15243":"99 is 3-rough number","Z15244":"99 is not 5-rough number","Z15245":"101 is 5-rough number","Z15246":"101 is 7-rough number","Z15247":"is perfect cube","Z15248":"is perfect cube, python","Z15249":"1000 is perfect cube","Z15250":"999 is not perfect cube","Z15251":"is perfect kth power","Z15252":"is perfect kth power, python","Z15253":"256 is perfect 4th power","Z15254":"243 is perfect 5th power","Z15255":"1000 is not perfect 6th power","Z15256":"integer square root","Z15257":"integer square root, python","Z15258":" integer square root of 8 is 2","Z15259":"integer square root of 9 is 3","Z15260":"integer square root of 10 is 3","Z15261":"integer square root, python (using math.isqrt)","Z15262":"is square number, composition","Z15263":"is perfect 2nd power, composition","Z15264":"is perfect 3rd power, composition","Z15265":"is perfect power","Z15266":"is perfect power, python","Z15267":"343 is perfect power","Z15268":"1 is not perfect power","Z15269":"50 is not perfect power","Z15270":"729 is perfect power","Z15271":"k-permutation, python (using math.perm)","Z15272":"radical","Z15273":"radical, python","Z15274":"rad(504) = 42","Z15275":"rad(1000) = 10","Z15276":"is square-free integer","Z15277":"is square-free integer, composition","Z15278":"10 is square-free","Z15279":"18 is not square-free","Z15280":"12345 is square-free","Z15281":"python implementation of Korselt's criterion","Z15282":"is Lucas–Carmichael number","Z15283":"is Lucas–Carmichael number, python","Z15284":"399 is Lucas–Carmichael number","Z15285":"561 is not Lucas–Carmichael number","Z15286":"sphenic numbers are the square-free 3-almost primes, composition","Z15287":"primorial p(n)#","Z15288":"primorial, python","Z15289":"p(5)# = 2310","Z15290":"p(10)# = 6469693230","Z15291":"primorial of natural number","Z15292":"primorial of natural number, composition","Z15293":"primorial of natural number, python","Z15294":"11# = 2310","Z15295":"12# = 2310","Z15296":"Join with zero-width space when separator is empty string","Z15297":"(join with, space, “ ”) → “join with space” [no U+200B]","Z15298":"join two strings separably Python","Z15299":"compositorial of natural number","Z15300":"compositorial, composition","Z15301":"compositorial of 11 is 17280","Z15302":"Euler zigzag number","Z15303":"Euler zigzag number, python","Z15304":"Euler zigzag number A(0) = 1","Z15305":"2*0 = 0","Z15306":"Euler zigzag number A(5) = 16","Z15307":"Euler zigzag number A(20)","Z15308":"2 * 5 = 10","Z15309":"2*n, composition add n+n","Z15310":"2*5+1 = 11","Z15311":"10/2 = 5","Z15312":"floor(11/2) = floor(5.5) = 5","Z15313":"number of alternating permutations","Z15314":"number of alternating permutations, composition","Z15315":"number of alternating permutations Z(1) = 1","Z15316":"number of alternating permutations Z(5) = 32","Z15317":"number of alternating permutations Z(20)","Z15318":"Entringer number","Z15319":"highest power of 2 that divides 8 is 8","Z15320":"highest power of 2 that divides 9 is 1","Z15321":"highest power of 2 that divides 10 is 2","Z15322":"Entringer number, python","Z15323":"Entringer number E(4,2) = 4","Z15324":"Entringer number (5,5) = 16","Z15325":"Euler zigzag number, composition based on Entringer number","Z15326":"zig number","Z15327":"zig number, composition","Z15328":"zig number(n=1) = 1","Z15329":"zig number(n=4) = 1385","Z15330":"zag number","Z15331":"zag number, composition","Z15332":"zag number(n=2) = 2","Z15333":"zag number(n=5) = 7936","Z15334":"unsigned Stirling number of the first kind","Z15335":"unsigned Stirling number of the first kind, python","Z15336":"unsigned Stirling number of the first kind c(6,2) = 274","Z15337":"Stirling number of the second kind","Z15338":"Stirling number of the second kind, python","Z15339":"Stirling number of the second kind S(6,4) = 65","Z15340":" Stirling number of the second kind, python (recursive relation)","Z15341":"Fuss–Catalan number","Z15342":"Fuss–Catalan number, python","Z15343":"Fuss–Catalan number A_2(0,4) = 6","Z15344":"Fuss–Catalan number A_6(1,5) = 210","Z15345":"Fuss–Catalan number A_3(3,3) = 55","Z15346":"Catalan number, composition based on Fuss–Catalan number with p=2, r=1","Z15347":"nth digit of e","Z15348":"nth digit of e, python","Z15349":"1st digit of e is 2","Z15350":"2nd digit of e is 7","Z15351":"10th digit of e is 8","Z15352":"100th digit of e is 7","Z15353":"1000th digit of e is 5","Z15354":"10000th digit of e is 8","Z15355":"Echo into list by discarding zero elements","Z15356":"nth digit of sqrt(2)","Z15357":"nth digit of sqrt(2), Python","Z15358":"nth digit of sqrt(3)","Z15359":"nth digit of sqrt(3), Python","Z15360":"nth digit of sqrt(5)","Z15361":"nth digit of sqrt(5), Python","Z15362":"nth prime","Z15363":"nth prime, python","Z15364":"Echo list by removing zero matching elements","Z15365":"1st prime is 2","Z15366":"nth digit of sqrt(7)","Z15367":"10th prime is 29","Z15368":"nth digit of sqrt(7), Python","Z15369":"100th prime is 541","Z15370":"1000th prime is 7919","Z15371":"10000th prime is 104729","Z15372":"primorial, composition","Z15373":"nth digit of golden ratio","Z15374":"nth digit of golden ratio, Python","Z15375":"100000000000000020000000000000001 is square number","Z15376":"is square number, Python","Z15377":"is perfect kth power, Python (Sympy core power)","Z15378":"10000000000000001^3 is perfect cube","Z15379":"10^300 is perfect 4th power","Z15380":"3^1000 is perfect 4th power","Z15381":"is perfect cube Python (Newton’s method)","Z15382":"10^300 is perfect cube","Z15383":"3^1000 is not perfect cube","Z15384":"integer square root of 100000000000000020000000000000001 is 10000000000000001","Z15385":"Echo list Composition with Remove first matching element (dummy)","Z15386":"Wedderburn–Etherington number","Z15387":"Wedderburn–Etherington number, python","Z15388":"Wedderburn–Etherington number(n=0) = 0","Z15389":"Wedderburn–Etherington number(n=10) = 98","Z15390":"Wedderburn–Etherington number(n=30) = 1406818759","Z15391":"nth Fibonacci number of order k","Z15392":"nth Fibonacci number of order k, python (recursive)","Z15393":"10th Fibonacci number of order 2 is 55","Z15394":"10th Fibonacci number of order 3 is 81","Z15395":"10th Fibonacci number of order 4 is 56","Z15396":"10th Fibonacci number of order 5 is 31","Z15397":"nth Fibonacci number of order 2, composition","Z15398":"nth Tetranacci number","Z15399":"nth Tetranacci number, composition","Z15400":"4th Tetranacci number is 1","Z15401":"20th Tetranacci number is 39648","Z15402":"nth Fibonacci number of order k, python","Z15403":"nth Tribonacci number","Z15404":"nth Tribonacci number, composition","Z15405":"9th Tribonacci number is 44","Z15406":"20th Tribonacci number is 35890","Z15407":"nth Pentanacci number","Z15408":"nth Pentanacci number, composition","Z15409":"10th Pentanacci number is 31","Z15410":"30th Pentanacci number is 23099186","Z15411":"nth Hexanacci number","Z15412":"nth Hexanacci number, composition","Z15413":"10th Hexanacci number is 16","Z15414":"20th Hexanacci number is 15109","Z15415":"nth Heptanacci number","Z15416":"nth Heptanacci number, composition","Z15417":"15th Heptanacci number is 253","Z15418":"25th Heptanacci number is 248888","Z15419":"nth Octanacci number","Z15420":"nth Octanacci number, composition","Z15421":"20th Octanacci number is 4048","Z15422":"nth Enneanacci number","Z15423":"nth Enneanacci number, composition","Z15424":"20th Enneanacci number is 2040","Z15425":"nth Euclid number","Z15426":"nth Euclid number, composition","Z15427":"5th Euclid number is 2311","Z15428":"10th Euclid number","Z15429":"nth Kummer number","Z15430":"nth Kummer number, composition","Z15431":"5th Kummer number is 2309","Z15432":"10th Kummer number","Z15433":"is harshad number","Z15434":"is harshad number, python","Z15435":"1729 is harshad number","Z15436":"11 is not harshad number","Z15437":"is harshad number, composition","Z15438":"nth star number","Z15439":"nth star number, python","Z15440":"nth star number, composition","Z15441":"5th star number is 121","Z15442":"100th star number is 59401","Z15443":"nth centered k-gonal number","Z15444":"nth centered k-gonal number, python","Z15445":"nth centered 12-gonal number, composition","Z15446":"nth centered triangular number","Z15447":"nth centered triangular number, python","Z15448":"nth centered triangular number, composition","Z15449":"10th centered triangular number is 136","Z15450":"nth centered square number","Z15451":"nth centered square number, python","Z15452":"nth centered square number, composition","Z15453":"10th centered square number is 181","Z15454":"nth centered pentagonal number","Z15455":"nth centered pentagonal number, python","Z15456":"nth centered pentagonal number, composition","Z15457":"10th centered pentagonal number is 226","Z15458":"nth centered hexagonal number","Z15459":"nth centered hexagonal number, python","Z15460":"nth centered hexagonal number, composition","Z15461":"10th centered hexagonal number is 271","Z15462":"nth centered heptagonal number","Z15463":"nth centered heptagonal number, python","Z15464":"nth centered heptagonal number, composition","Z15465":"10th centered heptagonal number is 316","Z15466":"nth centered octagonal number","Z15467":"nth centered octagonal number, python","Z15468":"nth centered octagonal number, composition","Z15469":"10th centered octagonal number is 361","Z15470":"nth centered nonagonal number","Z15471":"nth centered nonagonal number, python","Z15472":"nth centered nonagonal number, composition","Z15473":"10th centered nonagonal number is 406","Z15474":"nth centered decagonal number","Z15475":"nth centered decagonal number, python","Z15476":"nth centered decagonal number, composition","Z15477":"10th centered decagonal number is 451","Z15478":"nth centered hendecagonal number","Z15479":"nth centered hendecagonal number, python","Z15480":"nth centered hendecagonal number, composition","Z15481":"10th centered hendecagonal number is 496","Z15482":"zero function, composition","Z15483":"nth r-simplex number","Z15484":"nth r-simplex number, python","Z15485":"11th 4-simplex number is 1001","Z15486":"6th 5-simplex number is 252","Z15487":"nth r-simplex number, composition","Z15488":"2-simplex number, composition","Z15489":"3-simplex number, composition","Z15490":"10th tetrahedral number is 220","Z15491":"nth pentatope number","Z15492":"nth pentatope number, composition","Z15493":"nth pentatope number, python","Z15494":"0th digit doesn't exist, default to 0","Z15495":"10th pentatope number is 715","Z15496":"100th pentatope number is 4421275","Z15497":"nth 5-simplex number","Z15498":"nth 5-simplex number, composition","Z15499":"10th 5-simplex number is 2002","Z15500":"nth k-gonal number","Z15501":"nth k-gonal number, python","Z15502":"nth k-gonal number, composition","Z15503":"10th 4-gonal number is 100","Z15504":"10th 7-gonal number is 235","Z15505":"triangular number, composition","Z15506":"square number, composition","Z15507":"10th pentagonal number is 145","Z15508":"pentagonal number, composition","Z15509":"nth hexagonal number","Z15510":"nth hexagonal number, python","Z15511":"nth hexagonal number, composition","Z15512":"10th hexagonal number is 190","Z15513":"nth heptagonal number","Z15514":"nth heptagonal number, python","Z15515":"nth heptagonal number, composition","Z15516":"10th heptagonal number is 235","Z15517":"nth octagonal number","Z15518":"nth octagonal number, python","Z15519":"nth octagonal number, composition","Z15520":"10th octagonal number is 280","Z15521":"nth nonagonal number","Z15522":"nth nonagonal number, python","Z15523":"nth nonagonal number, composition","Z15524":"10th nonagonal number is 325","Z15525":"nth decagonal number","Z15526":"nth decagonal number, python","Z15527":"nth decagonal number, composition","Z15528":"10th decagonal number is 370","Z15529":"nth hendecagonal number","Z15530":"nth hendecagonal number, python","Z15531":"nth hendecagonal number, composition","Z15532":"10th hendecagonal number is 415","Z15533":"nth dodecagonal number ","Z15534":"nth dodecagonal number, python","Z15535":"nth dodecagonal number, composition","Z15536":"10th dodecagonal number is 460","Z15537":"nth centered tetrahedral number","Z15538":"10th centered tetrahedral number is 791","Z15539":"nth centered tetrahedral number, python","Z15540":"nth centered octahedral number","Z15541":"nth centered octahedral number, python","Z15542":"10th centered octahedral number is 1561","Z15544":"nth centered cube number","Z15545":"nth centered cube number, python","Z15546":"10th centered cube number is 2331","Z15547":"nth centered dodecahedral number","Z15548":"nth centered dodecahedral number, python","Z15549":"10th centered dodecahedral number is 11571","Z15550":"nth centered icosahedral number","Z15551":"10th centered icosahedral number is 3871","Z15552":"nth centered icosahedral number, python","Z15553":"MD5 from hex (string)","Z15554":"MD5 from hex (string), python","Z15555":"1st centred icosahedral number is 13","Z15556":"MD5 from hex string of \"Hello, World!\" ","Z15557":"MD5 collision","Z15558":"MD5 of \"Hello, World!\"","Z15559":"MD5, composition","Z15560":"Fahrenheit to Celsius","Z15561":"Fahrenheit to Celsius (python)","Z15563":"100F = 38C","Z15564":"CRC-32","Z15565":"CRC-32, python","Z15566":"CRC-32 of \"Hello, World!\"","Z15567":"Malay cardinal","Z15568":"Malay cardinal, python","Z15569":"list of strings is truthy","Z15570":"are all true Python (explicitly True)","Z15571":"32F = 0C","Z15572":"212F = 100C","Z15573":"0F = -18C","Z15574":"Boolean functions evaluating to True","Z15575":"BLAKE2b","Z15576":"BLAKE2b, python","Z15577":"BLAKE2b-512, composition","Z15578":"BLAKE2b-512 of \"Hello, World!\"","Z15579":"BLAKE2b-512, python","Z15580":"BLAKE2b of \"Hello, World!\" with digest size of 32 (BLAKE2b-256) ","Z15581":"BLAKE2s","Z15582":"BLAKE2s, python","Z15583":"BLAKE2s of \"Hello, World!\" with digest size of 16 (BLAKE2s-128)","Z15584":"BLAKE2s-256, python","Z15585":"BLAKE2s-256 of \"Hello, World!\"","Z15586":"BLAKE2s-256, composition","Z15587":"BLAKE2b-160, composition","Z15588":"BLAKE2b-256, composition","Z15589":"BLAKE2b-384, composition","Z15590":"BLAKE2s-128, composition","Z15591":"BLAKE2s-160, composition","Z15592":"BLAKE2s-224, composition","Z15593":"is valid hex string","Z15594":"validate hex string, composition (regex)","Z15595":"\"FFFFFF\" is a valid hex string","Z15596":"\"FFFFFG\" is not a valid hex string","Z15597":"[F, F, F, and(T, T)] are not all False","Z15598":"nth Pell number","Z15599":"nth Pell number, python (recursive relation)","Z15600":"1st Pell number is 1","Z15601":"10th Pell number is 2378","Z15602":"100th Pell number","Z15603":"nth Pell number, python (closed form formula, naive implementation)","Z15604":"nth Fibonacci number, python (Binet's formula, naive implementation)","Z15605":"nth Pell–Lucas number","Z15606":"nth Pell–Lucas number, python","Z15607":"1st Pell–Lucas number is 2","Z15608":"10th Pell–Lucas number is 6726","Z15609":"nth Pell–Lucas number, composition","Z15610":"nth Fibonacci number, python (Binet's formula, improved accuracy)","Z15611":"nth Pell number, python (closed form formula, improved accuracy)","Z15612":"0th Lucas number is 2","Z15613":"10th Lucas number is 123","Z15614":"100th Lucas number","Z15615":" nth Lucas number, python (closed form formula, naive implementation)","Z15616":" nth Lucas number, python (closed form formula, improved accuracy)","Z15617":"is Fibonacci number","Z15618":"is Fibonacci number, composition","Z15619":"55 is Fibonacci number","Z15620":"354224848179261915075 is Fibonacci number","Z15621":"is perfect kth power, python (using decimal module)","Z15622":"is Fibonacci number, python","Z15623":"are all false (recursive) Composition ","Z15624":"1000th Fibonacci number","Z15625":"An empty list is False","Z15626":"is string in hiragana","Z15627":"ABC is not hiragana","Z15628":"おはよう is hiragana","Z15629":"Complete syllabogram list is fully in hiragana","Z15630":"all hirigana, javascript","Z15631":"codepoint to string","Z15632":"'a' (codepoint) -> \"a\" (string)","Z15633":"\"Good morning\" sentence is fully hiragana","Z15634":"おはようABC is not all hiragana","Z15635":"ABCおはよう is not all hiragana","Z15636":"empty string is hiragana","Z15637":"checks if every character is in the set of allowed characters","Z15638":"codepoint to string, javascript","Z15639":"is each character hiragana, composition of map functions","Z15640":"'abc' (codepoint) -> \"abc\" (string)","Z15641":"is hiragana string, composition of string removal","Z15642":"remove hiragana range from hiragana string","Z15643":"nth central trinomial coefficient","Z15644":"nth central trinomial coefficient, python","Z15645":"0th central trinomial coefficient is 1","Z15646":"10th central trinomial coefficient is 8953","Z15647":"nth Apéry number","Z15648":"nth Apéry number, python","Z15649":"1st Apéry number is 5","Z15650":"10th Apéry number is 13657436403073","Z15651":"nth Belphegor number","Z15652":"nth Belphegor number, python","Z15653":"0th Belphegor number is 16661","Z15654":"Belphegor's prime","Z15655":"13th Belphegor number is the Belphegor's prime","Z15656":"Belphegor's prime is palindromic prime","Z15657":"Belphegor's prime is palindromic number","Z15658":"is string in hiragana, composition of only has characters from alphabet","Z15659":"subfactorial","Z15660":"nth subfactorial, python","Z15661":"subfactorial !1 = 0","Z15662":"subfactorial !5 = 44","Z15663":"subfactorial !20","Z15664":"!n = [n!/e], python","Z15665":"!n = [n!/e], python (improved accuracy)","Z15666":"base n to int, JavaScript (simple approach)","Z15667":"convert a big number in base 16","Z15668":"base n to int, JavaScript","Z15669":"nullary true is (False or nullary true)","Z15670":"octal to int, composition","Z15671":"natural number to base n","Z15672":"int to base n, JavaScript","Z15673":"123456789 is \"21i3v9\" in base 36","Z15674":"int to base n, Python","Z15675":"int to octal (without prefix), composition","Z15676":"natural number to binary string (without prefix), composition","Z15677":"int to hexadecimal (lowercase, without prefix), composition","Z15678":"echo list with Boolean, string and natural number","Z15679":"echo constructed list of strings, including an empty string","Z15680":"nested lists with different types of element","Z15681":"is hiragana, python (using unicodedata)","Z15682":"remove punctuation, python","Z15683":"is string in hiragana, based on unicode data","Z15684":"is truthy","Z15685":"a String is truthy","Z15686":"Python truthy is True","Z15687":"N > 0 is truthy","Z15688":"\"\" is not truthy","Z15689":"0 is not truthy","Z15690":"[] is not truthy","Z15691":"[[], \"\", 0] is truthy","Z15692":"True is truthy too (who knew?)","Z15693":"False is falsy (of course)","Z15694":"is truthy Python bool function","Z15695":"➕test against probable duplicate","Z15696":"replicate string n times Python using *","Z15697":"natural number to binary string (without prefix), Javascript","Z15698":"int to binary (with prefix), composition","Z15699":"837799 goes below 837799 in 171 steps","Z15700":"Arabic numeral string, Composition with if and is truthy","Z15701":"is truthy Composition (recursive)","Z15702":"byte as hex string","Z15703":"single byte to hex, Python","Z15704":"single byte to int, composition","Z15705":"is katakana, python (using unicodedata)","Z15706":"Substring Exists, JavaScript (check lengths first)","Z15707":"Substring Exists: 'hi' and 'hello world' is false","Z15708":"is hangul","Z15709":"is hangul, python","Z15710":"\"언\" is hangul","Z15711":"\"諺\" is not hangul","Z15712":"\"ᄋ\" is hangul","Z15713":"\"ꥠ\" is hangul (Ext A)","Z15714":"\"ힰ\" is hangul (Ext B)","Z15715":"is hangul, python (using unicodedata)","Z15716":"remove leading spaces, JavaScript ","Z15717":"is Boolean","Z15718":"count substrings, JavaScript","Z15719":"True is Boolean","Z15720":"False is Boolean","Z15721":"zero is not Boolean","Z15722":"is True or False, Python","Z15723":"is Boolean, Composition with if","Z15724":"an empty list is not Boolean","Z15725":"A Boolean list containing True is not Boolean","Z15726":"blanc -> blanche","Z15727":"Odia example palindrome","Z15728":"iffy","Z15729":"iffy, Composition","Z15730":"iffy True returns “yes”","Z15731":"“” is True","Z15732":"unequal strings, so 42","Z15733":"empty list, so evaluate","Z15734":"is Han character, python (using unicodedata)","Z15735":"is power of 2","Z15736":"is power of 2, python","Z15737":"0 is not power of 2","Z15738":"1 is power of 2","Z15739":"4294967296 is power of 2","Z15740":"is power of 2, javascript","Z15741":"is power of k","Z15742":"is power of k, python","Z15743":"0 is power of 0","Z15744":"1 is power of 99","Z15745":"1 is not power of 0","Z15746":"27 is power of 3","Z15747":"505447028499293771 is power of 11","Z15748":" is power of 2, composition","Z15749":"is power of 2, composition based on bit manipulation","Z15750":"2 has 1 odd divisors","Z15751":"absolute difference between 1 and 100 is 99","Z15752":"15 has 4 odd divisors","Z15753":"absolute difference is independent of the order of arguments","Z15754":"25 has 3 odd divisors","Z15755":"absolute difference, JavaScript","Z15756":"one plus sum of terms (9i) for all i less than n","Z15757":"is Cunningham number","Z15758":"is Cunningham number, composition","Z15759":"99 is Cunningham number","Z15760":"101 is Cunningham number","Z15761":"100 is not Cunningham number","Z15762":"is power of k, javascript","Z15763":"42 gives Argument type mismatch error","Z15764":"unary True, composition (conditional)","Z15765":"nth non-square number","Z15766":"nth non-square number, Python","Z15767":"reverse decimal digits","Z15768":"reverse digits, python","Z15769":"repunit number","Z15770":"repunit number, Python","Z15771":"nth binary number in decimal","Z15772":"nth binary number in decimal, Python","Z15773":"is Boolean, Python type","Z15774":"Padovan number, recursive composition","Z15775":"Padovan number, javascript","Z15776":"nth binary number in decimal, composition","Z15777":"is String","Z15778":"“Wikifunctions” is a string","Z15779":"a Boolean is not a string","Z15780":"is String, Python","Z15781":"Z4K1/identity for 42’s Type is \"Z13518\" (Reference)","Z15782":"a list is not a String","Z15783":"a Natural number is not a String","Z15784":"a language code is a String","Z15785":"a Code Point 'A' is not a string","Z15786":"item in String list is string ","Z15787":"Type keys are equal","Z15788":"Python echo","Z15789":"Python slice 1 to end","Z15790":"is String, composition","Z15791":"false is a valid Boolean object","Z15792":"string \"True\" is not a Boolean","Z15793":"valid string object \"Hello, world!\" comes back as the same thing","Z15794":"valid natural language Arabic is returned as the same natural language","Z15795":"validate Python returns the same object","Z15796":"“Wikifunctions” reifies to a list","Z15797":"2nd element in 2nd item of reified String object is the literal string","Z15798":"ultimately, 36 has Type reference \"Z13518”","Z15799":"2^65 | 1","Z15800":"lists == when 1st item from unequal N","Z15801":"object type equality","Z15802":"two Strings have the same type","Z15803":"type equality, Composition","Z15804":"True and False have the same type","Z15805":"type equality, Composition with is Boolean","Z15806":"is Boolean, iffy composition","Z15807":"Boolean Type is not Boolean","Z15808":"type equality, composition (if is Boolean)","Z15809":"True (Boolean) is not a string","Z15810":"4 and 2 have the same type ","Z15811":"if is Boolean","Z15812":"string, so non-Boolean","Z15813":"if is Boolean, iffy composition","Z15814":"True or False is Boolean, so True","Z15815":"if is Boolean, composition (is Boolean)","Z15816":"if is Boolean, Python","Z15817":"15811 is not Boolean","Z15818":"is Natural number","Z15819":"15818 is a Natural number","Z15820":"“Z15818” is not a Natural number","Z15821":"is Natural number, composition","Z15822":"True is not a Natural number","Z15823":"a list is not a Natural number","Z15824":"is integer","Z15825":"zero is an integer","Z15826":"-1 is an integer","Z15827":"is integer, Python","Z15828":"is Natural number, recursive composition","Z15829":"chou -> choux","Z15830":"clou -> clous","Z15831":"carreau -> carreaux","Z15832":"is integer, composition ","Z1229":"Moroccan Amazigh (Latin script)","Z15833":"apply list of functions, recursive composition","Z15834":"equivalent to explicit composition","Z15835":"3^4 is \"81st\" as English ordinal","Z15836":"Find and replace patterns in Wikitext","Z15837":"123,456th digit of pi","Z15838":"ASCII Braille encode","Z15839":"encode full set","Z15840":"ASCII Braille decode","Z15841":"full set of ASCII representing Braille","Z15842":"ASCII Braille encode, composition","Z15843":"ASCII Braille decode, composition","Z15844":"unit integer sign of integer","Z15845":"5 is positive, returns 1","Z15846":"-5 is negative, returns -1","Z15847":"0 is not positive or negative, returns 0","Z15848":"JavaScript Math.sign()","Z15849":"Kronecker delta","Z15850":"delta(2,3) = 0","Z15851":"delta(3,3) = 1","Z15852":"Kronecker delta, composition","Z15853":"Kronecker delta, python","Z15854":"Kronecker delta, javascript","Z15855":"remove characters not suitable for markup in XML or HTML","Z15856":"remove characters not suitable for markup, composition","Z15857":"\"Hello, world!\" has no invalid characters","Z15858":"replace character set and discard other characters","Z15859":"replace and discard, composition","Z15860":"Hello, world! with lowercase, uppercase alphabets","Z15861":"abc123 -> ABC for lowercase, uppercase alphabets","Z15863":"Uppercase first letter, composition","Z15864":"hello, world!","Z15865":"To Titlecase, composition using sentence case","Z15866":"are all strictly false, Python","Z15867":"is portable game notation","Z15868":"echo motley list","Z15869":"Full game","Z15870":"\"1. e4\" is a valid first move","Z15871":"Listed Boolean evaluations have Boolean equality","Z15872":"list equality, composition with object equality","Z15873":"\"1. x5\" is not PGN","Z15874":"can't move to e5 on the first move","Z15875":"empty string is valid PGN","Z15876":"PGN comment only","Z15877":"incomplete tag is not valid PGN","Z15878":"PGN bracket comment","Z15879":"salted MD5","Z15880":"salted MD5, composition","Z15881":"salted MD5, python","Z15882":"MD5 of \"Hello, World!\" with salt \"Wikifunctions\"","Z15883":"salted hash","Z15884":"salted hash, composition","Z15885":"salted hash composition, with MD5 as the hash function","Z15886":"Z1K1 for string is Z6","Z15887":"((a,b),c) at depth 0 is ((a,b),c)","Z15888":"(((a,b),c),d) at depth 1 is ((a,b),c,d)","Z15889":"sum of digits of 99 is 18","Z15890":"sum of digits of 0 is 0","Z15891":"there are 4 primes <= 7","Z15892":"there are 4 primes <= 10","Z15893":"there are 0 primes <= 0","Z15894":"there are 0 primes <= 1","Z15895":"double factorial of 2n-1, composition","Z15896":"n=1: double factorial 2n-1 = 1","Z15897":"n=3: double factorial of 2n-1 = 15","Z15898":"n=10: double factorial of 2n-1 = 654729075","Z15899":"10!! = 2*4*6*8*10 = 3840","Z15900":"11!! = 1*3*5*7*9*11 = 10395","Z15901":"absolute difference, reversed arguments, ==Objects","Z15902":"de-duplicate, python {element}","Z15903":"Z1K1 of True is Z4K1 of Boolean","Z15904":"type of 42 *should be a reference to* Z13518","Z15905":"type of Test case is Z20","Z15906":"100^100","Z15907":"limited Natural number","Z15908":"1 ≤ 5 ≤ 12","Z15909":"1 ≤ N ≤ 31: 1 if N = 0","Z15910":"limited Natural number, composition","Z15911":"limited Natural number, Python","Z15912":"object equality of Natural numbers","Z15913":"42 (N) == 42 from String","Z15914":"string equality for Natural numbers","Z15915":"String(42)==\"42\"","Z15916":"string equality for Natural number, composition","Z15917":"equal Natural numbers with string equality","Z15918":"4 as it’s between 1 and 12","Z15919":"7 > 6 so 6","Z15920":"Natural number equality, composition of built-ins","Z15921":"Igbo: has light vowel (ụdamfe), Python","Z15922":"Igbo: has heavy vowel (udaarọ), Python","Z15923":"N >= N, composition [=, >]","Z15924":"N > N, composition with not N ≤ N","Z15925":"bitwise xor JavaScript","Z15927":"if(N1==N2, False, True)","Z15928":"(0==1) is False","Z15929":"large N inequality","Z15930":"is N > 1 its largest prime factor","Z15931":"XOR with if","Z15932":"if first then first else second","Z15933":"validate with XOR","Z15934":"validate XNOR with identity","Z15935":"(False) XOR True","Z15936":"\"AB\" ↤ join(\"A\", \"B\")","Z15937":"numerical order of two strings","Z15938":"\"Aa\" < \"Abc\"","Z15939":"relationship between two strings, Python ","Z15940":"N1 > N2 (string comparison)","Z15941":"1 > 0 ⇒ True","Z15942":"87 > 111 ⇒ False","Z15943":"N1 < N2 (string comparison)","Z15944":"if (N1 = N2, T, if (N1 <  N2, T, F))","Z15945":"1° in 1 > 1° in 2","Z15946":"are two numeric strings in descending order","Z15947":"\"111\" > \"99\" (numerically)","Z15948":"\"4\" > \"iii\": False","Z15949":"int(S1) > int(S2)","Z15950":"N1 > N2 with Boolean from string comparison","Z15951":"Reversing cyrillic word \"Хакатон\" to \"нотакаХ\"","Z15952":"Test for cyrillic word \"хакатон\" to \"ХАКАТОН\"","Z15953":"Ukrainian cardinal","Z15954":"15953 =  \"п'ятнадцять тисяч дев'ятсот п'ятдесят три\"","Z15955":"English cardinal, Javascript","Z15956":"JavaScript implemetation for Z15953","Z15957":"iffy, JavaScript","Z15958":"min(N, N) by greater digit string","Z15959":"13633 ↤ [13633, 103633]","Z15960":"Max(N, N), composition comparing strings","Z15961":"13630 ↤ [2474, 13630] (max)","Z15962":"greater “Item 1”","Z15963":"German cardinal number","Z15964":"is string, composition with reified Z1K1","Z15965":"Polish cardinal","Z15966":"Polish cardinal, javascript","Z15967":"JavaScript implemetation for Z15963","Z15968":"Z1K1s have == Z4s","Z15969":"reified Z1K1 (object for Key reference)","Z15970":"type of, composition (reify)","Z15971":"\"Wikifunctions\"→\"Z6\"","Z15972":"type of (True) = type of (False)","Z15973":"Igbo infinitive (from Z13941)","Z15974":"isolate imaginary part of complex number","Z15975":"6i+1 has 6i as the imaginary part","Z15977":"(!) return grammatical number for an integer and language","Z15978":"English for 1 is singular","Z15979":"for 12 things in German use the plural","Z15980":"for 2 things in Arabic, use the dual","Z15981":"2-5 are paucal in Láadan, test n=5","Z15982":"(!) grammatical number for languages with only singular and plural","Z15983":"1 is singular","Z15984":"2 is plural","Z15985":"100 is plural","Z15986":"python: 1 -> singular, else plural","Z15987":"composition dispatching based on language","Z15988":"(!) grammatical number for languages with singular, paucal, and plural","Z15989":"python: 1 -> singular, 2-5 -> paucal, else plural","Z15990":"2-5 are paucal in Láadan, test 3","Z15991":"code point prefix ","Z15992":"\"Z15991\" ↤ (\"Z\", \"15991”)","Z15993":"string from list from code point and string","Z15994":"Igbo infinitive (code point prefix)","Z15995":"discard first code point","Z15996":"first N code points","Z15997":"\"Wiki\" ↤ (\"Wikifunctions\", 4)","Z15998":"\"\" (empty) ↤ (\"Z15996\", 0)","Z15999":"first few code points","Z16000":"Igbo month name","Z16001":"Igbo month (string) from N, JavaScript","Z16002":"10 → Ọnwa Okike","Z16003":"6→ Ọnwa Ifejiọkụ","Z16004":"24→ empty ","Z16005":"13→ Ọnwa Ụzọ Alụsị","Z16006":"sandbox (2-ary)","Z16007":"sandbox 2 of 6","Z16008":"Swedish cardinal","Z16009":"sandbox-test","Z16010":"Swedish cardinal, python","Z16011":"grammatical number for integer and language, composition using select a function from list","Z16012":"(!) grammatical number for languages with singular, dual and plural","Z16013":"(!) grammatical number for languages with singular, dual and plural, python","Z16014":"n=2, \"dual\"","Z16015":"(!) grammatical number for languages with singular, paucal (2-5) and plural","Z16016":"grammatical number including paucal, python","Z16017":"n=4, paucal","Z16018":"Python is empty list","Z16019":"Python first item in pair","Z16020":"Python string to codepoint list","Z16021":"Python filter","Z16022":"Python codepoint list to string","Z16023":"Python code point equality","Z16024":"Python BLAKE2b-160","Z16025":"BLAKE2b-160('Hello, World!')","Z16026":"Python SHA3-224","Z16027":"SHA3-224('hello')","Z16028":"Python SHA3-256","Z16029":"SHA3-256('hello')","Z16030":"SHA3-384('hello')","Z16031":"Python SHA3-384","Z16032":"SHA3-512('hello')","Z16033":"Python SHA3-512","Z16034":"\"вікіфікація\" = 11 letters","Z16035":"\"ХАКАТОН\" is uppercase","Z16036":"\"ГАЛьМІВНИЙ\" is not uppercase","Z16037":"Ukrainian string \"П'ЯТЬ ТИСЯЧ\" is uppercase","Z16038":"Ukrainian string \"п'ять тисяч\" is lowercase","Z16039":"Ukrainian \"П'ЯТЬ ТИСЯЧ\" = \"п'ять тисяч\"","Z16040":"Ukrainian \"Порошенко\" contains \"рошен\" as a substring","Z16041":"Ukrainian \"Талалаївка\" contains \"ла\" twice","Z16042":"Russian word \"Употреблять\" ends in \"блять\"","Z16043":"Reversing Georgian word \"ვიკიპედია\"","Z16044":"String in Ukrainian contains only Ukrainian letters","Z16045":"String in Russian language contains not only Ukrainian letters","Z16046":"A string in Dragomanivka (variant of Ukrainian alphabet) contains not only contemporary Ukrainian letters","Z16047":"\"Жебракують філософи...\" is a pangram of the Ukrainian alphabet","Z16048":"Ukrainian cardinal of 999999999999999","Z16049":"0 = \"нуль\"","Z16050":"111 = \"сто одинадцять\"","Z16051":"Test “if” with list values ","Z16052":" Suffixing the verb 'ri' to get it past tense 'riri'","Z16053":"Igbo cardinal","Z16054":"igbo cardinal in javascript","Z16055":"54 = \"iri ise na anọ \"","Z16056":"70 = \"iri asaa\"","Z16057":"15 = \"iri na ise\"","Z16058":"300 = \"nnari ato\"","Z16059":"645 = \"nnari isii na iri anọ na ise\"","Z16060":"12345678+87654321","Z16061":"N1 > N2, JS >","Z16062":"N1 >= N2, composition [>, =]","Z16063":"True (from list) is True","Z16064":"True from arguments","Z89":"HTML fragment","Z16065":"6543 = \"puku isii na narị ise na iri anọ na atọ\"","Z16066":"88900 = \"puku iri asatọ na asatọ na narị itoolu\"","Z16067":"309650 = \"puku narị atọ na itoolu na narị isii na iri ise\"","Z16068":"7349896 = \"nde asaa na puku narị atọ na iri anọ na itoolu na narị asatọ na iri itoolu na isii\"","Z16069":"67984764 = \"nde iri isii na asaa na puku narị itoolu na iri asatọ na anọ na narị asaa na iri isii na anọ\"","Z16070":"577984764 = \"nde narị ise na iri asaa na asaa na puku narị itoolu na iri asatọ na anọ na narị asaa na iri isii na anọ\"","Z16071":"4490899111 = \"ijeri anọ na nde narị anọ na iri itoolu na puku narị asatọ na iri itoolu na itoolu na narị otu na iri na otu\"","Z16072":"609209555239 = \"ijeri narị isii na itoolu na nde narị abụọ na itoolu na puku narị ise na iri ise na ise na narị abụọ na iri atọ na itoolu\"","Z16073":"the infinitive form of 'zụ' is 'ịzụ'","Z16074":"prefix a verb to get it future tense(Igbo)","Z16075":"get the future tense of verb in Igbo (JavaScript)","Z16076":"The future tense of 'me' verb is 'ga-eme'","Z16077":"the future tense of 'gụ' is 'ga-agụ'","Z16078":"the future tense of 'zụ' is 'ga-azụ'","Z16079":"the future tense of 'ga' is 'ga-aga'","Z16080":"the future tense of 'si' is 'ga-esi'","Z16081":"the future tense of 'ri' is 'ga-eri'","Z16082":"the future tense of 'de' is 'ga-ede'","Z16083":"the future tense of 'hụ' is 'ga-ahụ'","Z16084":"the future tense of 'mụ' is 'ga-amụ'","Z16085":"Croatian numeral","Z16086":"7 = \"sedam\"","Z16087":"0 = \"nula\"","Z16088":"Croatian numeral, javascript","Z16089":"the future tense of 'nye' is 'ga-enye'","Z16090":"the future tense of 'rụ' is 'ga-arụ'","Z16091":"13682 >= 13111","Z16092":"N1 >= N2, JS >=","Z16093":"French cardinal","Z16098":"Gregorian calendar month","Z16099":"27 in Croatian","Z16100":"196 in Croatian","Z16101":"January","Z16102":"February","Z16103":"March","Z16104":"April","Z16105":"May","Z16106":"June","Z16107":"July","Z16108":"August","Z16109":"September","Z16110":"October","Z16111":"November","Z16112":"December","Z16113":"“forty-second” ↤ “forty-two”","Z16114":"Chinese numeral to natural number","Z16115":"Chinese numeral to natural number, python","Z16116":"\"一\" = 1","Z16117":"\"十一\" = 11","Z16118":"\"一百\" = 100","Z16119":"\"一百零一\" = 101","Z16120":"duplicate of Z16119","Z16121":"\"一千一百\" = 1100","Z16122":" \"壹拾壹\" = 11","Z16123":"\"一千零一亿一千零一万一千零一\" = 100110011001","Z16124":"\"一二三\" = 123","Z16125":"\"三万五\" = 35000","Z16126":"\"兩千六\" = 2600","Z16127":"\"〇\" = 0","Z16128":"\"100万\" = 1000000","Z16129":"\"100万三千\" = 1003000","Z16130":"\"10.1万\" = 101000","Z16131":"\"4亿7千5百万\" = 475000000","Z16132":"Gregorian calendar month to JS number","Z16133":"Gregorian calendar month to Python int","Z16134":"JS number to Gregorian calendar month","Z16135":"Python int to Gregorian calendar month","Z16136":"following month","Z16137":"same month","Z16138":"January = January","Z16139":"April ≠ December","Z16140":"July = July","Z16141":"July ≠ June","Z16142":"use JS identity","Z16143":"use Python equality","Z16144":"February follows January","Z16145":"January follows December","Z16146":"+1 modulo 12","Z16147":"+1, unless 12, then 1","Z16148":"eleven cascading ifs","Z16149":"❌false positive","Z16150":"Bengali cardinal","Z16151":"Bengali cardinal, python","Z16152":"Bengali cardinal for 1234567890","Z16153":"Aliquot sequence size","Z16154":"Aliquot sequence size, python","Z16155":"Aliquot sequence size, input = 1","Z16156":"Aliquot sequence size, input = 2","Z16157":"Aliquot sequence size, input = 4","Z16158":"Aliquot sequence size, input = 25","Z16159":"Aliquot sequence size, input = 28","Z16160":"Aliquot sequence size, input = 16","Z16161":"Aliquot sequence size, input = 19916","Z16162":"Aliquot sequence size, input = 276","Z16163":"Low German cardinal","Z16164":"Low German cardinal, javascript","Z16165":"French cardinal, python","Z16166":"\"279\" donne \"deux cent soixante-dix-neuf\"","Z16170":"\"70\" donne \"soixante-dix\"","Z16171":"\"91\" donne \"quatre-vingt-onze\"","Z16172":"Moroccan Arabic cardinal","Z16173":"Moroccan Arabic cardinal, python","Z16174":"Moroccan Arabic cardinal, input = 0","Z16175":"Moroccan Arabic cardinal, input = 2","Z16176":"Moroccan Arabic cardinal, input = 21","Z16177":"Moroccan Arabic cardinal, input = 99","Z16179":"Moroccan Arabic cardinal, input = 21030","Z16180":"Moroccan Arabic cardinal, input = 1000001","Z16181":"Moroccan Arabic cardinal, input = 2091000800","Z16182":"404 = \"quatre cent quatre\"","Z16183":"600000 = \"six cent mille\"","Z16184":"Standard Arabic cardinal","Z16185":"Klingon cardinal","Z16186":"Klingon cardinal, javascript","Z16187":"1 = \"een\"","Z16188":"13 = \"dörteihn\"","Z16189":"99 = \"negenunnegentig\"","Z16190":"654321 = \"sösshunnert veerunföfftig dusend dreehunnert eenuntwintig\"","Z16191":"1 = wa'","Z16192":"13 = \"wa'maH wej\"","Z16193":"99 = \"HutmaH Hut\"","Z16194":"Reserving test with diacritics \"ab́c\" to \"cb́a\"","Z16195":"Standard Arabic cardinal, input = 0","Z16196":"Standard Arabic cardinal, input = 1","Z16197":"Standard Arabic cardinal, input = 23","Z16198":"Standard Arabic cardinal, input = 245","Z16199":"rest of list","Z16200":"rest of list, recursive composition","Z16201":"weekdays after Saturday","Z16202":"months after May","Z16203":"(!) rest of list, composition","Z16204":"not (next Boolean)","Z16205":"next Boolean","Z16206":"Standard Arabic cardinal, python","Z16207":"escaped vertical bar character in title","Z16208":"Standard Arabic cardinal, input = 21030","Z16209":"Standard Arabic cardinal, input = 999999","Z16210":"Standard Arabic cardinal, input = 1987421","Z16211":"Standard Arabic cardinal, input = 1001000006","Z16212":"Standard Arabic cardinal, input = 2091000800","Z16213":"Standard Arabic cardinal, input = 8454543543515485554541","Z16214":"Standard Arabic cardinal, input = 84500000000000612353375485554541","Z16215":"last element of tail","Z16216":"December is the final month","Z16217":"last code point in list","Z16218":"September follows August","Z16219":"October follows September","Z16220":"Standard Arabic cardinal, input = 3005","Z16221":"Portuguese plural","Z16222":"plural portuguese","Z16223":"plural of \"humano\" is \"humanos\"","Z16224":"plural of \"missão\" is \"missões\"","Z16225":"plural of \"girassol\" is \"girassóis\"","Z16226":"plural of \"legal\" is \"legais\"","Z16227":"plural of \"mês\" is \"meses\"","Z16228":"February = February","Z16229":"February ≠ November","Z16230":"month to month number","Z16231":"January = 1","Z16232":"February = 2","Z16233":"March = 3","Z16234":"April = 4","Z16235":"May = 5","Z16236":"June = 6","Z16237":"July = 7","Z16238":"August = 8","Z16239":"September = 9","Z16240":"October = 10","Z16241":"November = 11","Z16242":"December = 12","Z16243":"month to month number, python","Z16244":"month to month number, javascript","Z16245":"element following match (0 to N)","Z16246":"November is 11 months after December","Z16247":"subsequent item Composition","Z16248":"Index of first listing, JS","Z16249":"12th month is December","Z16250":"index in cycle","Z16251":"2 after 6 is 1 (cycle 7)","Z16252":"index in cycle, composition","Z16253":"index in cycle: JS","Z16254":"element following match (0 to N), composition","Z16255":"month number to month","Z16256":"1 = January","Z16257":"2 = February","Z16258":"3 = March","Z16259":"4 = April","Z16260":"5 = May","Z16261":"6 = June","Z16262":"7 = July","Z16263":"8 = August","Z16264":"9 = September","Z16265":"10 = October","Z16266":"11 = November","Z16267":"12 = December","Z16268":"0 = December (define edge case)","Z16269":"13 = January (allow overcount to cycle)","Z16270":"month number to month, python","Z16271":"following month, composition via month numbers","Z16272":"twelve months","Z16273":"monolingual text in specified language from multilingual text","Z16274":"get Australian English text from multilingual list of two","Z16275":"incomplete list of months","Z16276":"12 months, composition","Z16277":"first monolingual text in specified language from list of monolingual texts","Z16278":"get Australian English text from list of monolingual texts","Z16279":"first monolingual text in language, recursive composition","Z16280":"all 12 months","Z16281":"return blank monolingual text when language is not in the list","Z16282":"monolingual text in specified language from multilingual text, composition","Z16283":"12 disordered months","Z16284":"blank monolingual text for language not in the multilingual text","Z16285":"index of month in list","Z16286":"12 months (re-listed)","Z16287":"singleton months are supersets","Z16288":"month N from twelve months","Z16289":"month is in list","Z16290":"January is one of twelve months","Z16291":"month-list is superset","Z16292":"March follows February","Z16293":"N months before month","Z16294":"October ↤ February, 4","Z16295":"N months before, JS","Z16296":"February ↤ March, 13","Z16297":"November ↤ December, 1","Z16298":"same as 11 months before, composition","Z16299":"previous month","Z16300":"previous month, composition","Z16301":"before January is December","Z16302":"before February is January","Z16303":"previous month, python","Z16304":"previous month, javascript","Z16305":"August ↤ May, 16293","Z16306":"(!) object equality should distinguish between 1 and January, but currently doesn't","Z16307":"N months after month","Z16308":"1 != January (but it is when mapped in python)","Z16309":"August ↤ September, 16307","Z16310":"1 and January are different types","Z16311":"add N months to month, javascript","Z16312":"Láadan cardinal","Z16313":"ldnnums","Z16314":"ultimately January is Z16098","Z16315":"42 is named \"thabebim i shin\"","Z16316":"days in month when not a leap year","Z16317":"January has 31 days","Z16318":"February has 28 days in non leap years","Z16319":"March has 31 days","Z16320":"April has 30 days","Z16321":"May has 31 days","Z16322":"June has 30 days","Z16323":"July has 31 days","Z16324":"August has 31 days","Z16325":"September has 30 days","Z16326":"October has 31 days","Z16327":"November has 30 days","Z16328":"December has 31 days","Z16329":"days in month, python equation","Z16330":"months in period (list)","Z16331":"Nov to Feb (list)","Z16332":"days in month during leap year","Z16333":"days in month during leap year, python equation","Z16334":"January has 31 days every year","Z16335":"February has 29 days in leap years","Z16336":"March has 31 days every year","Z16337":"April has 30 days every year","Z16338":"May has 31 days every year","Z16339":"June has 30 days every year","Z16340":"July has 31 days every year","Z16341":"August has 31 days every year","Z16342":"September has 30 days every year","Z16343":"October has 31 days every year","Z16344":"November has 30 days every year","Z16345":"December has 31 days every year","Z16346":"leap year month length, composition","Z16347":"days in month, python lookup","Z16348":"days in list of months (non-leap year)","Z16349":"days in list of months, recursive composition","Z16350":"empty list of months has 0 days","Z16351":"list of one month, December, has 31 days","Z16352":"month in period (list), recursive composition","Z16353":"Nov to Nov gives list of one month","Z16354":"full year has 365 days (non-leap year)","Z16355":"five consecutive months not including Feb have 153 days","Z16356":"January + July = 62 days","Z16357":"months in period (list), python","Z16358":"January is \"Z16101\"","Z16359":"Z16098K1 identity (reified)","Z1922":"Minnan (Tâi-lô)","Z16360":"Item 2","Z16361":"month 2 is February","Z16362":"Item 2: head of tail composition ","Z16363":"comp: split num into place values, parse and recombine","Z16364":"Item 2: Nth element composition","Z16365":"identity identity ","Z16366":"\"Z16112\" ↤ December","Z16367":"identity identity composition ","Z16368":"127 xor 128 == 255","Z16369":"\"Z41\" ↤ True","Z16370":"following month, composition N (=1) months after","Z16371":"N to string, identity composition ","Z16372":"identity identity identity","Z16373":"False == False","Z16374":"same, composition","Z16375":"same month, same identity composition ","Z16376":"42 == 42","Z16377":"August is 8th in the list","Z16378":"False != True","Z16379":"January != 1","Z16380":"\"test\" == \"test\"","Z16381":"1 is \"jeden\"","Z16382":"0 is \"zero\"","Z16383":"13 is \"trzynaście\"","Z16384":"295 is \"dwieście dziewięćdziesiąt pięć\"","Z16385":"12345678901234567890 in words, Polish","Z16386":"1000 is \"tysiąc\"","Z16387":"Standard Arabic cardinal, input = 6511","Z16388":"1001000 is \"milion tysiąc\"","Z16389":"11000 is \"jedenaście tysięcy\"","Z16390":"21000 is \"dwadzieścia jeden tysięcy\"","Z16391":"101000 is \"sto jeden tysięcy\"","Z16392":"September is not a String","Z16393":"broader equality","Z16394":"kelvins to degrees Celsius","Z16395":"293.15 K is 20 °C","Z16396":"0 K is −273.15 °C","Z16397":"Conversion in python","Z16398":"Brazilian Portuguese cardinal","Z16399":"42 = \"quarenta e dois\"","Z16400":"0 = zero","Z16401":"101 = \"cento e um\"","Z16402":"777777777777 = \"setecentos e setenta e sete bilhões[...]\"","Z16403":"12 = \"doze\"","Z16404":"777777777777777777777777777777777777777777777777 = \"setecentos e setenta e sete quatuordecilhões[...]\"","Z16405":"6510 = \"seis mil quinhentos e dez\"","Z16406":"5500 = \"cinco mil e quinhentos\"","Z16407":"parser in python","Z16408":"1000 = \"mil\"","Z16409":"Luxembourgish cardinal","Z16410":"Luxembourgish cardinal, Python","Z16411":"0 = \"null\"","Z16412":"1 = \"eent\"","Z16413":"10 = \"zéng\"","Z16414":"20 = \"zwanzeg\"","Z16415":"42 = \"zweeavéierzeg\"","Z16416":"91 = \"eenannonzeg\"","Z16417":"100 = \"honnert\"","Z16418":"101 = \"honnerteent\"","Z16419":"277 = \"zweehonnertsiwenasiwwenzeg\"","Z16420":"1000 = \"dausend\"","Z16421":"1001 = \"dausendeent\"","Z16423":"2377 = \"zweedausenddräihonnertsiwenasiwwenzeg\"","Z16424":"999999 = \"nénghonnertnéngannonzegdausendnénghonnertnéngannonzeg\"","Z16425":"2000000 = \"zwou Milliounen\"","Z16426":"7000000 = \"siwe Milliounen\"","Z16427":"102700001 = \"honnertzwee Millioune siwenhonnertdausendeent\"","Z16428":"1001000423 = \"eng Milliard eng Millioun véierhonnertdräianzwanzeg\"","Z16429":"123456789012 = \"honnertdräianzwanzeg Milliarde véierhonnertsechsafofzeg Millioune siwenhonnertnénganachtzegdausendzwielef\"","Z16430":"remove duplicated February from Typed list","Z16431":"Spanish cardinal","Z16432":"Spanish cardinal, python","Z16433":"0 = \"cero\"","Z16434":"1 = \"uno\"","Z16435":"cardinal from natural number functions","Z16436":"select the Standard Arabic cardinal for Modern Standard Arabic","Z16437":"cardinal in chosen language","Z16438":"general cardinal, composition","Z16439":"English 1 is \"one\"","Z16440":"French 1 is \"un\"","Z16441":"final N characters, JS","Z16442":"ISO 8601 MM from September","Z16443":"Standard Moroccan Tamazight cardinal","Z16444":"Standard Moroccan Tamazight cardinal, python","Z16445":"Standard Moroccan Tamazight cardinal, input = 1","Z16446":"42 = \"cuarenta y dos\"","Z16447":"100 = \"cien\"","Z16448":"Standard Moroccan Tamazight cardinal, input = 10","Z16449":"321 = \"trescientos veintiuno\"","Z16450":"1000 = \"mil\" Spanish","Z16452":" Standard Moroccan Tamazight cardinal, input = 1000","Z16453":"21000 = \"veintiún mil\"","Z16454":" Standard Moroccan Tamazight cardinal, input = 11","Z16455":" Standard Moroccan Tamazight cardinal, input = 200","Z16456":"31000 = \"treinta y un mil\"","Z16457":" Standard Moroccan Tamazight cardinal, input = 1345","Z16458":" Standard Moroccan Tamazight cardinal, input = 500","Z16459":"123456 = \"ciento veintitrés mil cuatrocientos cincuenta y seis\"","Z16460":" Standard Moroccan Tamazight cardinal, input = 5000","Z16461":"777777777777777777777777777777777777031031021021000001001001","Z16462":"error when number too large for Spanish cardinal function","Z16463":"(!) sine","Z16464":"sine, python","Z16465":"sin(1)","Z16466":"sine, JavaScript","Z16467":"English Holocene calendar conversion (strings)","Z16468":"(!) subtract floating point numbers (strings)","Z16469":"subtract floating point numbers, python","Z16470":"(!) subtract one integer string from another","Z16471":"subtract integers, python","Z16472":"(!) add integer strings","Z16473":"add integer strings, python","Z16474":"Holocene calendar conversion, Python","Z16475":"(!) tangent","Z16476":"tangent, python","Z16477":"\"2.5\" − \"1\" = \"1.5\"","Z16478":"tan(1)","Z16479":"\"−2\" + \"2\" = \"0\"","Z16480":"\"0\" +\"2\" = \"2\"","Z16481":"\"2\" + \"2\" = \"4\"","Z16482":"\"January 1, 10001\" ↤ (1, \"January\", 1)","Z16483":"(!) gamma function (strings)","Z16484":"gamma, python","Z16485":"Γ(\"1\")  = 0! = \"1\"","Z16486":"Γ(\"2\") = 1! = \"1\"","Z16487":"Celsius to Fahrenheit","Z16488":"°C to °F, python","Z16489":"\"0\" °C = \"32.0\" °F","Z16490":"°C to °F to °C (\"32.0\")","Z16491":"power set (natural numbers)","Z16492":"power set, python","Z16493":"is leap year (revised Julian calendar)","Z16494":"is RJ leap year, python","Z16495":"2000 is a leap year","Z16496":"2100 is not a leap year","Z16497":"2400 is a leap year in both revised Julian and Gregorian","Z16498":"date parser (string to list)","Z16499":"date parser, python","Z16500":"Parse 1 November 2011","Z16501":"\"3\" − \"1\" = \"2\"","Z16502":"(!) count decimal places","Z16503":"count decimal places, python","Z16504":"\"3.0312\" --> 4","Z16505":"\"30312\" --> 0","Z16506":"\"30.312\" --> 3","Z16507":"(!) truncate by","Z16508":"truncate by, python","Z16509":"(!) truncate to","Z16510":"\"54.321\", 3 --> \"54\"","Z16511":"\"54.321\", 2 --> \"54.3\"","Z16512":"truncate to, python","Z16513":"\"1.234\", 0 --> \"1\"","Z16514":"\"1.234\", 1 --> \"1.2\" ","Z16515":"Holocene calendar conversion (numbers and strings)","Z16516":"Holocene calendar conversion++, Python","Z16517":"“January 1, 10001” ↤ (1, January, 1)","Z16518":"month object to month name","Z16519":"month to month name, composition","Z16520":"month to month name, python","Z16521":"December --> \"December\"","Z16522":"English adjective to adverb, composition w/ edge cases","Z16523":"\"32\" °F = \"0\" °C = \"32.0\" °F","Z16524":"Suffix a verb to get it negative imperative form (Igbo)","Z16525":"get the negative imperative form of an Igbo verb","Z16526":"the negative imperative form of 'ga' is 'agala'","Z16527":"the negative imperative form of 'bịa' is 'abịala'","Z16528":"the negative imperative form of 'zụ' is 'azụla'","Z16529":"the negative imperative form of 'mụ' is 'amụla'","Z16530":"the negative imperative form of 'nye' is 'enyela'","Z16531":"the negative imperative form of 'bido' is 'ebidola'","Z16532":"the negative imperative form of 'ri' is 'erila'","Z16533":"the negative imperative form of 'rụ' is 'arụla'","Z16534":"the negative imperative form of 'gọ' is 'agọla'","Z16535":"Igbo 1 is 'otu'","Z16536":"remove January from list of months with only January","Z16537":"remove February from list of months: [January, February]","Z16538":"[January, February] contains February","Z16539":"add January to the list [February]","Z16540":"reverse [January, February]","Z16541":"remove first of [January, February, March]","Z16542":"is this month earlier than that month in the year?","Z16543":"March is before December","Z16544":"December is not before January (in the calendar year)","Z16545":"is earlier month in the year, python","Z16546":"is summer in southern hemisphere","Z16547":"December is summer in the southern hemisphere","Z16548":"July is not summer in the southern hemisphere","Z16549":"southern hemisphere summer, python","Z16550":"Test to select Summer months in Southern Hemisphere","Z16551":"all these months are summer in southern hemisphere","Z16552":"none of these months are summer in the southern hemisphere","Z16553":"[January, February] list has two elements","Z16554":"September = September","Z16555":"defect T359233","Z16556":"object labels","Z16557":"December label list","Z16558":"object labels, composition","Z16559":"December labels contains (Greek) \"Δεκέμβριος\"","Z16560":"string for a language","Z16561":"\"Δεκέμβριος\" ↤ December labels, \"el\"","Z16566":"string for language, Python","Z16567":" \"September\" ↤ (September, English)","Z16568":"object label","Z16569":"label for object, composition ","Z16570":"string from list of monolingual text, composition","Z16571":"\"Hello\" in literal natural language with code \"en\"","Z16572":"en: \"December\" from object labels","Z16573":"(! NOT WORKING) fetch February","Z16574":"unquote Feburary = February?","Z16575":"quote an object","Z16576":"unquote(validate quote(\"Hello, world!\") = \"Hello, world!\"?","Z16577":"quote, composition: June","Z16578":"unquote a quoted list","Z16579":"days in month, javascript equation","Z16580":"month label","Z16581":"\"juni\" ↤ June, Swedish","Z16582":"month label, composition","Z16583":"month label (three months)","Z16584":"opposite month","Z16585":"opposite month, composition","Z16586":"opposite of December is June","Z16587":"opposite of January is July","Z16588":"opposite of February is August","Z16589":"opposite of March is September","Z16590":"opposite of April is October","Z16591":"opposite of May is November","Z16592":"opposite of June is December","Z16593":"opposite of July is January","Z16594":"opposite of August is February","Z16595":"opposite of September is March","Z16596":"opposite of October is April","Z16597":"opposite of November is May","Z16598":"is winter in the southern hemisphere","Z16599":"is winter in the southern hemisphere, composition","Z16600":"July is winter in the southern hemisphere","Z16601":"August is winter in the southern hemisphere","Z16602":"June is winter in the southern hemisphere","Z16603":"September is not winter in the southern hemisphere","Z16604":"is spring in southern hemisphere","Z16605":"spring in southern hemisphere, python","Z16606":"September is spring in the southern hemisphere","Z16607":"October is spring in the southern hemisphere","Z16608":"Breton cardinal","Z16609":"November is spring in the southern hemisphere","Z16610":"December is not spring in the southern hemisphere","Z16612":"August is not spring in the southern hemisphere","Z16614":"Breton 13 =  \"trizek\"","Z16615":"is autumn in the southern hemisphere","Z16618":"is autumn in southern hemisphere, composition","Z16619":"March is autumn in southern hemisphere","Z16620":"April is autumn in southern hemisphere","Z16621":"May is autumn in the southern hemisphere","Z16622":"June is not autumn in the southern hemisphere","Z16623":"February is not autumn in the southern hemisphere","Z16624":"is function a reflexive relation on list of elements","Z16625":"greater than or equal is reflexive","Z16626":"greater than is not reflexive","Z16627":"Boolean equality is reflexive","Z16628":"is reflexive, recursive composition","Z16629":"is function symmetric relation over elements of list","Z16630":"is divisible is not symmetric","Z16631":"Boolean equality is symmetric","Z16632":"\"fou\" -> \"folle\"","Z16633":"Breton cardinal, JS","Z16634":"is function commutative for this first argument with all arguments in list","Z16635":"is function commutative for common first argument and list of seconds, recursive composition","Z16636":"boolean equality is commutative for T with either of [T,F]","Z16637":"is function symmetric relation over elements of list, recursive composition","Z16638":"is prime (JavaScript)","Z16639":"get n=1 elements gives a list with one element (not the element itself)","Z16640":"first month from list of months in the calendar year is January","Z16641":"first element of list of primes is 2","Z16642":"sum[1,2,3] = 6","Z16643":"sum numeric list, recursive composition","Z16644":"sum[99] = 99","Z16645":"sum[42,99] = 141","Z16646":"sum list, recursive composition with last element","Z16648":"is later month in the year","Z16649":"November is after February","Z16650":"January is not after itself","Z16651":"June is not later than December","Z16652":"December is after January","Z16653":"using > in JS","Z16654":"using > in Python","Z16655":"if same false, otherwise negate if earlier","Z16656":"is earlier with switched arguments","Z16657":"transform months to numbers and check if the first is greater than the second","Z16658":"using JS <","Z16659":"Sign","Z16660":"positive","Z16661":"neutral","Z16662":"negative","Z16663":"Sign to JS number","Z16664":"Sign to Python int","Z16665":"JS number to Sign","Z16666":"Python int to Sign","Z16667":"same sign","Z16668":"positive is same as positive","Z16669":"positive and negative are not the same","Z16670":"Negative is negative","Z16671":"positive is not the same as neutral","Z16672":"Neutral is not negative","Z16673":"neutral is same as neutral","Z16674":"python implementation of same sign","Z16675":"using JS === on the converted value","Z16676":"invert sign","Z16677":"negative inverted is positive","Z16678":"positive inverted is negative","Z16679":"using python - operator","Z16680":"inverted neutral is neutral","Z16681":"multiply sign by -1","Z16682":"if positive then negative, if negative then positive, else neutral","Z16683":"Integer","Z16684":"JS converter from Integer","Z16685":"Python converter from Integer","Z16686":"Python int to Integer","Z16687":"BigInt to Integer","Z16688":"same Integer","Z16689":"+2 = +2","Z16690":"python == ","Z16691":"+2 =/= -2","Z16692":"using JS === for Integer","Z16693":"add Integers","Z16694":"+2 + -2 = 0","Z16695":"-9 + -99 == -108","Z16696":"+2 + +2 = +4","Z16697":"0 + 7 == 7","Z16698":"+ in Python","Z16699":"+ on BigInt","Z16700":"display Integer","Z16701":"-178 in Croatian","Z16702":"0 in English","Z16703":"42 in British English","Z16704":"simply BigInt.toString","Z16705":"read Integer","Z16706":"\"0\" in English","Z16707":"\"42\" in British English","Z16708":"\"-272\" in Croatian","Z16709":"BigInt constructor","Z16710":"(February, January) is a superset of (January, February)","Z16711":"subsequence exists","Z16712":"[April, May] is a subsequence of [January, ..., June]","Z16713":"[May, April] is not a subsequence of [January, ..., June]","Z1923":"Ekpeye","Z16714":"DNA sequence complement","Z16715":"DNA Sequence Complement, python","Z16716":"Test for empty input","Z16717":"Test for all uppercase","Z16718":"sign of net charge from SMILES string","Z16719":"[Ti+4] is positive","Z16720":"[S--] is negative","Z16721":" [Cu+2].[O-]S(=O)(=O)[O-] is neutral overall","Z16722":"beta carotene is neutral","Z16723":"ethanol, single bonds can be explicitly written out but are not charges","Z16724":"cyclopropene: single bond in ring-closing is not a charge","Z16725":"sign of net charge from SMILES, composition","Z16726":"4 \"+\" in \"[Ti++++]\"","Z16727":"leave [Na+] unchanged","Z16728":"multiply signs","Z16729":"multiply signs, python","Z16730":"positive * negative = negative","Z16731":"sign of difference","Z16732":"99 - 42 is positive","Z16733":"99 - 99 is neutral","Z16734":"42 - 99 is negative","Z16735":"sign of difference, composition","Z16736":"sign of difference, python","Z16737":"sign of difference, javascript","Z16738":"positive * positive = positive","Z16739":"positive * neutral = neutral","Z16740":"negative * negative = positive","Z16741":"remove non-stereochemical single bonds from SMILES","Z16742":"cyclopropene with ring-closing single bond","Z16743":"ethanol C-C-O","Z16744":"leave charges in CuSO4 untouched","Z16745":"F/C=C/F leave single bonds indicating stereochemistry","Z16746":"oxide ion [O--] leave both negative charges","Z16747":"oxide ion [O-2] leave both negative charges","Z16748":"[N-H4+] -> [NH4+]","Z16749":"remove non-stereochemical single bonds, python","Z16750":"different sign","Z16751":"not(same sign()), composition","Z16752":"positive is different to negative","Z16753":"positive is different to neutral","Z16754":"positive is not different to positive","Z16755":"different sign, python","Z16756":"sign non-negative","Z16757":"different sign (this, negative)","Z16758":"positive is non-negative","Z16759":"neutral is non-negative","Z16760":"negative is not non-negative","Z16761":"sign non-negative, python","Z16762":"sign (a-b)*(a-c)","Z16763":"(99-42)*(99-0) is positive","Z16764":"sign (a-b)*(a-c), composition of multiply signs and difference sign","Z16765":"(42-99)*(42-0) is negative","Z16766":"(99-99)*(99-42) is neutral","Z16767":"sign (a-b)(a-c), python","Z16768":"sign is non-positive","Z16769":"sign non-positive, python","Z16770":"negative is non-positive","Z16771":"neutral is non-positive","Z16772":"positive is not non-positive","Z16773":"first natural number is in closed interval of the other two","Z16774":"number in range, composition","Z16775":"42 is in the range [0,99]","Z16776":"0 is not in the range [42,99]","Z16777":"42 is in the range [42,99]","Z16778":"42 is in the range [99,0]","Z16779":"42 is in the range [42,42]","Z16780":"999...999 > 999...998","Z16781":"do these charges electrostatically attract?","Z16782":"electrostatic attraction, composition","Z16783":"negative and positive attract","Z16784":"positive and positive don't attract","Z16785":"positive and neutral don't attract","Z16786":"neutral and neutral don't attract","Z16787":"multiply signs, composition","Z16788":"neutral * neutral = neutral","Z16789":"multiply signs, javascript","Z16790":"Test for lowercase","Z16791":"Test for invalid DNA","Z16792":"Test for DNA sequence with complements","Z16793":"do these charges electrostatically repel","Z16794":"do these charges repel, composition","Z16795":"positive and positive repel","Z16796":"positive and negative don't repel","Z16797":"negative and neutral don't repel","Z16798":"is any false","Z16799":"is any false, python","Z16800":"list with one false has a false","Z16801":"list with only true has no falses","Z16802":"(true, false, true) has falses","Z16803":"(true, true, true) has no falses","Z16804":"is any false, composition","Z16805":"limited Natural number, JavaScript","Z16806":"duplicates “Natural number is between” (Z14711)","Z16807":"error: [1, 7, 2]","Z16808":"First N characters of a cyrillic string","Z16809":"Last N characters of a cyrillic string","Z16810":"Remove first three characters from cyrillic word \"Йорданія\"","Z16811":"Ukrainian 1 is \"один\"","Z16812":"transliterate Ukrainian text into Latin characters","Z16813":"\"Єнакієве\" = \"Yenakiieve\"","Z16814":"\"ГОЩАНСЬКИЙ\" = \"HOSHCHANSKYI\"","Z16815":"\"м'ята\" = \"miata\"","Z16816":"\"Згурівський район\" = \"Zghurivskyi raion\"","Z16817":"\"Жебракували філософи...\" = \"Zhebrakuvaly filosofy...\"","Z16818":"\"Юріївка\" = \"Yuriivka\"","Z16819":"\"Житомир\" = \"Zhytomyr\"","Z16820":"Empty string test for Z16812","Z16821":"Sign identity","Z16822":"Positive ↤ Positive","Z16823":"echo Sign","Z16824":"Neutral ↤ reference","Z16825":"echo Natural number","Z16826":"reversed Z1 is 1Z","Z16827":"\"ніколи не кажи 'ніколи'\" = \"nikoly ne kazhy 'nikoly'\"","Z16828":"product of list, recursive composition","Z16829":"type of object","Z16830":"type of object, composition","Z16831":"type of string 'hello world's is string","Z16832":"type of true is boolean","Z16833":"Type of a Boolean list is Type of any Boolean list","Z16834":"ISBN validator","Z16835":"ISBN number validator","Z16836":"JavaScript implemetation for Z16812","Z16837":"Valid ISBN-10","Z16838":"(!) Valid ISBN-10 composition","Z16839":"test 2","Z16840":"is valid ISBN","Z16841":"Is the empty string a valid ISBN?","Z16842":"is valid ISBN, Python","Z16843":"Is 0-306-40615-2 a valid ISBN?","Z16844":"is valid ISBN, Python 2","Z16845":"test 1","Z16846":"test 3","Z16847":"test 4","Z16848":"test 5","Z16849":"type of correct test case is Z20/Test case","Z16850":"unimplemented function","Z16851":"test for an unimplemented function","Z16852":"type of test case of unimplemented function is Z20","Z16853":"type of number 123 is natural number","Z16854":"type of Neutral is Sign","Z16855":"English number <20 to natural number","Z16856":"\"one\" = 1","Z16857":"English number <20, python","Z16858":"\"nineteen\" = 19","Z16859":"\"zero\" = 0","Z16860":"empty string returns 0","Z16861":"\"twenty\" is outside the range of this function, so should return 0","Z16862":"English number <100 to natural number","Z16863":"\"ninety-nine\" = 99","Z16864":"\"ninety\" = 90","Z16865":"\"nineteen\" is 19","Z16866":"\"nine\" is 9","Z16867":"\"one hundred and one\" is out of range, any return is ok","Z16868":"empty string should return 0","Z16869":"English multiple of 10 between 20 and 90 (inclusive) to natural number","Z16870":"English multiple of 10, python","Z16871":"\"twenty\" = 20","Z16872":"\"thirty\" = 30","Z16873":"twenty-seven is not a multiple of 10","Z16874":"\"ten\" is not in the required range, return 0","Z16875":"English number <100 name to number, composition","Z16876":"discard until end of first substring, javascript","Z16877":"English -ty to N, composition ","Z16878":"English number <1000 to natural number","Z16879":"\"nine hundred and ninety-nine\" = 999","Z16880":"English number <1000 composition","Z16881":"\"nine\" = 9 only","Z16882":"English <20 to N, composition","Z16883":"17 ↤ “seventeen” ↤ 17","Z16884":"2 ↤ “two” ↤ “second” ↤ “two” ↤ 2","Z16885":"has generic Type","Z16886":"generic: Typed list","Z16887":"Z1K1.Z1K1.Z9K1 is \"Z7\"","Z16888":"reference String","Z16889":"\"Z40\" ↤ Z42.Z1K1","Z16890":"String ↤ 2nd element of Item 2","Z16891":"has generic Type (Z7K1)","Z16892":"not generic: String","Z16893":"not generic: True","Z16894":"not generic: 17","Z16895":"not generic: Neutral [Sign]","Z16896":"generic: Typed pair","Z16897":"do these charges electrostatically interact","Z16898":"do these charges interact, composition ","Z16899":"positive and positive interact","Z16900":"positive and neutral don't interact","Z16901":"positive and negative interact","Z16902":"negative and negative interact","Z16903":"neutral and neutral don't interact ","Z16904":"Bengali text to cardinal","Z16905":"Bengali text to cardinal, python implementation","Z16906":"\"এক হাজার তিন শত পাঁচ\" = 1,305","Z16907":"\"নিরানব্বই কোটি নিরানব্বই লাখ নিরানব্বই হাজার নয় শত নিরানব্বই\" = 999,999,999","Z16908":"go back n days to get a previous date (D/M/YYYY)","Z16909":"get previous date","Z16910":"go back 2 days from '19/2/2024' to get '17/2/2024","Z16911":"go back 3652 days(a decade) from '19/2/2024' to get '19/2/2014'","Z16912":" go back 18,262 days from '19/2/2014' to get '20/2/1964'","Z16913":" go back 36525 days(a century) from '19/2/2024' to get '19/2/1924'","Z16914":"get weekday number (starting Sunday=1) from date","Z16915":"get weekday number","Z16916":"weekday number for '2024-02-15' is 5","Z16917":"weekday number for '1809-09-17' is 1","Z16918":"weekday number for '1789/4/17' is 6","Z16919":"English natural number transcription","Z16920":"English natural number transcription, python","Z16921":"English natural number transcription, input = zero","Z16922":"English natural number transcription, input = fifteen","Z16923":"English natural number transcription, input = four hundred twenty three","Z16924":"English to Natural number","Z16925":"English natural number transcription of 234 undecillion…","Z16926":"test numeral to Natural number with English cardinal","Z16927":"Igbo calendar month","Z16928":"Mbụ","Z16929":"Abụo","Z16930":"Ife Eke","Z16931":"Anọ","Z16932":"Agwụ","Z16933":"Ifejiọkụ","Z16934":"Alọm Chi","Z16935":"Ilo Mmụọ","Z16936":"Ana","Z16937":"Okike","Z16938":"Ajana","Z16939":"Ede Ajana","Z16940":"Ụzọ Alụsị","Z16941":"Igbo calendar month to JS number","Z16942":"Igbo calendar month to Python int","Z16943":"JS number to Igbo calendar month","Z16944":"Python int to Igbo calendar month","Z16945":"same Igbo month","Z16946":"Mbụ = Mbụ","Z16947":"Ede Ajana ≠ Ajana ","Z16948":"use == in Python","Z16949":"use === in JS","Z16950":"same Igbo month, composition ","Z16951":"\"zero\" is 0","Z16952":"composition from full range function","Z16953":"[Ife ike, Ana] contains Ana","Z16954":"contains, Composition (index ≠ 0)","Z16955":"month number to Igbo month","Z16956":"month number to Igbo month, JavaScript","Z16957":"0 = Ụzọ Alụsị","Z16958":"14 = Mbụ","Z16959":"1 =  Mbụ","Z16960":"2 = Abụo","Z16961":"3 = Ife Eke","Z16962":"4 = Anọ","Z16963":"5 = Agwụ","Z16964":"6 = Ifejiọkụ","Z16965":"7 =  Alọm Chi","Z16966":"8 = Ilo Mmụọ","Z16967":"9 = Ana","Z16968":"10 = Okike","Z16969":"11 =  Ajana","Z16970":"12 = Ede Ajana","Z16971":"13 = Ụzọ Alụsị","Z16972":"following month (Igbo)","Z16973":"Igbo month to month number ","Z16974":"igbo month to month number, JavaScript","Z16975":"Mbụ = 1","Z16976":"Agwụ = 5","Z16977":"Alọm Chi\t= 7","Z16978":"Ajana = 11","Z16979":"Ede Ajana = 12","Z16980":"following Igbo month, Composition","Z16981":" Ede Ajana follows  Ajana","Z16982":"following igbo month, JavaScript","Z16983":" Ilo Mmụọ follows Alọm Chi","Z16984":"Agwụ follows Anọ","Z16985":"Okike follows Ana","Z16988":"prime factorization, python","Z16989":"Mbụ follows Ụzọ Alụsị","Z16990":"previous month (Igbo)","Z16991":"before Mbụ is Ụzọ Alụsị","Z16992":"before Ụzọ Alụsị is Ede Ajana\t","Z16993":"before Ilo Mmụọ is Alọm Chi","Z16994":"previous igbo month, Javascript","Z16995":"before Abụo is  Mbụ","Z16996":"before Ajana is Okike","Z16997":"p not an igbo vowel","Z16998":"e is an igbo vowel","Z16999":"l not an igbo vowel","Z17000":"i is an igbo vowel","Z17001":"a is an igbo vowel","Z17002":"A is an igbo vowel","Z17003":"U is an igbo vowel","Z17004":"sum of integers in [99,99] = 99","Z17005":"charges electrostatically interact, python","Z17006":"electrostatic attraction, javascript ifs","Z17007":"10 long hello: hello....","Z17008":"Byte 20 becomes \"20\"","Z17009":"single byte to int, JavaScript","Z17010":"single byte to hex, JavaScript","Z17011":"quaternary and, JavaScript","Z17012":"octanary and, JavaScript","Z17013":"remove U+FFFC, JavaScript","Z17014":"remove U+FEFF, JavaScript","Z17015":"remove U+FFFC, replace all composition","Z17016":"following Igbo month, python","Z17017":"previous Igbo month, Python","Z17018":"Ụzọ Alụsị follows Ede Ajana","Z17019":"reversed strings: Vithkuqi alphabet 𐖗𐖛 (aç) and 𐖛𐖗 (ça)","Z17020":"'\\uD873\\uDFB8\\uD872\\uDFB7' and '\\uD872\\uDFB8\\uD873\\uDFB7'","Z17021":"is anagram (letter counting, JavaScript)","Z17022":"length of “𬾸𬮷” is 2","Z17023":"length of “∀𝑥∈ℝ,𝑥²≥0” is 9","Z17024":"string length: Composition","Z17025":"bitwise and, JavaScript","Z17026":"iffy, Python","Z17027":"\"quipped\" ↤ \"quip\"","Z17028":"double factorial, JavaScript","Z17029":"hyperfactorial, JavaScript","Z17030":"string length in UTF-16 code units","Z17031":"string length in UTF-16 code units, JavaScript","Z17032":"length of “Hello, world!” in UTF-16 code units is 13","Z17033":"length of empty string in UTF-16 code units is 0","Z17034":"length of “∀𝑥∈ℝ,𝑥²≥0” in UTF-16 code units is 11","Z17035":"length of “𬾸𬮷” in UTF-16 code units is 4","Z17036":"string length in UTF-8 code units","Z17037":"string length in UTF-8 code units, JavaScript","Z17038":"length of empty string in UTF-8 code units is 0","Z17039":"length of “Hello, world!” in UTF-8 code units is 13","Z17040":"length of “∀𝑥∈ℝ,𝑥²≥0” in UTF-8 code units is 24","Z17041":"length of “𬾸𬮷” in UTF-8 code units is 8","Z17042":"string length in UTF-8 code units, Python","Z17043":"string length in UTF-16 code units, Python","Z17044":"n**n JavaScript","Z17045":"2*n+1, JavaScript","Z17046":"2*n+1, composition","Z17047":"n^2 JavaScript","Z17048":"n**3, JavaScript","Z17049":"n^4, JavaScript","Z17050":"left shift, JavaScript","Z17051":"right shift, JavaScript","Z17052":"binary weight of n, JavaScript","Z17053":"Boolean to Sign","Z17054":"Boolean to Sign, composition","Z17055":"Boolean to Sign, JavaScript","Z17056":"Boolean to Sign, Python","Z17057":"True → Positive","Z17058":"False → Negative","Z17059":"natural number is even, JavaScript %2","Z17060":"double number, JavaScript","Z17061":"2*n, composition multiply","Z17062":"is Boolean, JavaScript typeof","Z17063":"is String, JavaScript","Z17064":"Positive is not Boolean","Z17065":"Boolean to natural number","Z17066":"true becomes 1","Z17067":"false becomes 0","Z17068":"Boolean to natural number, python","Z17069":"Boolean to natural number, composition","Z17070":"length of \"🤦🏼‍♂️\" is 5","Z17071":"\"🤦🏼‍♂️\" has 17 UTF-8 units","Z17072":"\"🤦🏼‍♂️\" has 7 UTF-16 code units","Z17074":"1 becomes một","Z17075":"is Empty string, composition ","Z17076":"Z6:empty string is empty","Z17077":"every(x => x === true)","Z17078":"every(x => x === false)","Z17079":"some((x) => x === false)","Z17080":"is true or false, JavaScript","Z17081":"Vietnamese cardinal from up to 3 digit natural number","Z17082":"1 = \"một\"","Z17083":"Vietnamese cardinal, python","Z17084":"10 = \"mười\"","Z17085":"14 = \"mười bốn\"","Z17086":"15 = \"mười lăm\"","Z17087":"20 = \"hai mươi\"","Z17088":"21 = \"hai mươi mốt\"","Z17089":"24 = \"hai mươi tư\"","Z17090":"11 = \"mười một\"","Z17091":"100 = \"một trăm\"","Z17092":"101 =  \"một trăm linh một\"","Z17093":"90 = \"chín mươi\"","Z17094":"99 = \"chín mươi chín\"","Z17095":"104 = \"một trăm linh bốn\"","Z17096":"444 = \"bốn trăm bốn mươi tư\"","Z17097":"555 = \"năm trăm năm mươi lăm\"","Z17098":"less than, JavaScript","Z17099":"less than or equal, JavaScript","Z17100":"Indian English cardinals,python","Z17101":"natural number to integer","Z17102":"natural number to integer, python","Z17103":"99 (natural) -> 99 (integer)","Z17104":"natural number to integer, javascript","Z17105":"sign of integer","Z17106":"-99 is negative","Z17107":"0 is neutral","Z17108":"unit integer sign of integer, python","Z17109":"42 is positive","Z17110":"sign of integer, python","Z17111":"subtract an Integer","Z17113":"-99 + 42 = -57","Z17114":"subtract integers, python implementation ","Z17115":"5 − 2 = 3","Z17117":"2 − 5 = −3","Z17118":"2 −  −7 = 9","Z17120":"multiply integers","Z17121":"5*7=35","Z17122":"99 + 42 = 141","Z17123":"4*-2=-8","Z17124":"-3*-6=18","Z17125":"multiply integers, python","Z17126":"multiply integers, javascript","Z17127":"subtract integers, javascript","Z17128":"absolute value of integer","Z17129":"absolute value of 5 = 5","Z17130":"absolute value of -8 = 8","Z17131":"abs in python","Z17132":"greater than (integer)","Z17133":"3 > 5 is false","Z17134":"8 > 1 is true","Z17135":"6>-4 is true","Z17136":"-7 > 4 is false","Z17137":"-2 > -9 is true","Z17138":"-3 > -7 is true","Z17139":"greater than (integer), python","Z17140":"less than (integer)","Z17141":"5 < 6 is true","Z17142":"8 < 4 is false","Z17143":"6 < -2 is false","Z17144":"absolute value of integer as natural number","Z17145":"-4 < 1 is true","Z17146":"absolute value to natural number, python","Z17147":"-5 < -9 is false","Z17148":"abs(-5) = natural number 5","Z17149":"-8 <-3 is true","Z17150":"less than (integer), python","Z17151":"sign to unit integer","Z17152":"negative is -1","Z17153":"increment integer","Z17154":"neutral is 0","Z17155":"positive is 1","Z17156":"increment(-1) = 0","Z17157":"increment integer, python","Z17158":"sign to unit integer, python","Z17159":"increment integer, javascript","Z17160":"decrement integer","Z17161":"decrement of 5 is 4","Z17162":"decrement of 0 is -1","Z17163":"decrement of -4 is -5","Z17164":"decrement integer, python","Z17165":"decrement integer, composition ","Z17166":"sign (a-b)*(a-c), JavaScript","Z17167":"integer modulo another integer","Z17168":"5 mod 7 = 5","Z17169":"8 mod 6 = 2","Z17170":"-3 mod 5 = 2","Z17171":"modulus of integers, python","Z17172":"sign to integer, javascript","Z17173":"greater than or equal (integer)","Z17174":"greater than or equal (integer), python","Z17175":"9 >= -99","Z17176":"-9 >= -9","Z17177":"-9 is not greater than or equal to 9","Z17178":"greater than or equal (integer), composition","Z17179":"11 mod -10 = -9","Z17180":"is void","Z17181":"is void, composition","Z17182":"void is void","Z17183":"void == void","Z17184":"1 mod 0 is void","Z17185":"-7 mod -6 = -1","Z17186":"negate integer","Z17187":"negate integer, python","Z17188":"negate(9) = -9","Z17189":"negate(-9) = 9","Z17190":"negate(0) = 0","Z17191":"negate integer, composition inverting sign","Z17192":"if (integer output)","Z17193":"if (integer output), composition","Z17195":"if (integer), python","Z17196":"JS absolute value (integer -> natural number)","Z17198":"Absolute value of 0 = 0","Z17199":"Absolute value of 5 = 5","Z17200":"Integer to string - using natural number to string","Z17201":"JS greater or equal (integer)","Z17202":"if(true,-9,99) = -9","Z17203":"if(false,9,-99) = -99","Z17204":"is positive integer","Z17205":"99 is a positive integer","Z17206":"> 0, python","Z17207":"-99 is not a positive integer","Z17208":"0 is not a positive integer","Z17209":"sign of value == positive, composition","Z17210":"first integer modulo second, composition from natural number mod","Z17211":"-20 mod 10 = 0","Z17212":"absolute value, value by key composition","Z17213":"sign of integer, value by key composition","Z17214":"String from reified Z1K1","Z17215":"is negative integer","Z17216":"-27 is negative","Z17217":"4 is not negative","Z17218":"0 is not negative","Z17219":"sign of value == negative","Z17220":"< 0","Z17221":"value < 0","Z17222":"decrement integer, JavaScript","Z17223":"not (greater than or equal)","Z17224":"less than zero","Z17225":"quoted value by key","Z17227":"negated -6 is 6","Z17228":"negated 8 is -8","Z17229":"is non-negative integer","Z17230":"0 is non-negative","Z17231":"99 is non-negative","Z17232":"-99 is not non-negative","Z17233":"non-negative, composition >=0","Z17234":"non-negative, composition not(negative integer())","Z17235":"non-negative, python","Z17236":"non-negative, javascript","Z17237":"is non-negative integer, composition of different sign: negative","Z17238":"non-negative, composition OR(positive, =0)","Z17239":"is zero (integer)","Z17240":"0 is zero","Z17241":"99 is not zero","Z17242":"-99 is not zero","Z17243":"is zero, composition of sign = neutral","Z17244":"is zero, python","Z17245":"is zero, javascript ==0n","Z17246":"is zero, composition neither negative nor positive","Z17247":"is zero, composition same integer 0","Z17248":"subtract, composition of add and negate","Z17249":"integers have the same sign","Z17250":"99 and 42 have the same sign","Z17251":"99 has a different sign to -9","Z17252":"0 has a different sign to 1","Z17253":"integers have the same sign, composition","Z17254":"integers have the same absolute magnitude","Z17255":"-99 and 99 have the same absolute magnitude","Z17256":"99 and 9 do not have the same magnitude","Z17257":"absolute magnitudes equal, composition","Z17258":"absolute values equal, python","Z17259":"absolute values equal, javascript","Z17260":"same Integer, composition of composite checks","Z17261":"42 != 99","Z17262":"sign of integer, javascript","Z17263":"natural number exponentiation of integers","Z17264":"(-3)^2 = 9","Z17265":"(-2)^3 = -8","Z17266":"exponentiation, javascript","Z17267":"negate natural number to integer","Z17268":"negate natural number, python","Z17269":"negate natural number(9) = -9","Z17270":"negate natural number 0 to integer 0","Z17271":"integer exponentiation, composition","Z17272":"integers have the same sign, python","Z17273":"increment integer, composition of increment natural number","Z17274":"increment 0 to 1","Z17275":"increment(-100) = -99","Z17276":"increment(99) = 100","Z17277":"increment integer, composition of add 1","Z17278":"multiply integers, sign-case composition of multiply natural numbers and negate","Z17279":"-9 * 0 = 0","Z17280":"unit integer sign of integer, composition","Z17281":"greater than, javascript","Z17282":"sign to unit integer, if composition","Z17283":"less than (integer), javascript","Z17284":"absolute value of integer, composition","Z17285":"0 (natural) -> 0 (integer)","Z17286":"natural number to integer, composition","Z17287":"negate natural number to integer, composition","Z17288":"negate natural number to integer, javascript","Z17289":"integer exponentiation, python","Z17290":"composition of multiply integer by multiplying sign and natural number,","Z17291":"floor divide integers","Z17292":"floor divide integers, python","Z17293":"4/2=2","Z17294":"floor(7/3)=3","Z17295":"-9/3=-3","Z17296":"floor(-8/5)=-2","Z17297":"quoted Z40K1 of true is quoted true","Z17298":"quoted value by key, python","Z17299":"quoted identity of January is quoted January","Z17300":"Triangular number Javascript","Z17301":"ordered pair of natural numbers representing integer","Z17302":"0  = (0,0)","Z17303":"1 = (1,0)","Z17304":"-1 = (0,1)","Z17305":"ordered pair of natural numbers representing integer, composition","Z17306":"ordered pair of natural numbers representing integer, python","Z17307":"integer represented by ordered pair of natural numbers","Z17308":"(0,0) = 0","Z17309":"(1,0) = 1","Z17310":"(0,1) = -1","Z17311":"(9,9) = 0","Z17312":"(99,9) = 90","Z17313":"(9,99) = -90","Z17314":"integer represented by ordered pair, python","Z17315":"subtract natural numbers as integer","Z17316":"subtract natural numbers, python","Z17317":"subtract natural numbers, javascript","Z17318":"42 - 99 = -57","Z17319":"subtract natural numbers as integer, composition","Z17320":"integer represented by ordered pair, composition","Z17321":"are equivalent ordered pairs representing integers","Z17322":"equivalent ordered pairs, composition of integer equality","Z17323":"equivalent ordered pairs, (a+d)=(b+c) definition composition","Z17324":"(42,0) = (99,57)","Z17325":"last[99,9] = 9","Z17326":"negate ordered pair of natural numbers representing integer","Z17327":"negate ordered pair, composition switching first/last elements (definition)","Z17328":"negate ordered pair, composition of reverse list","Z17329":"-(99,42) = (42,99)","Z17330":"less than (ordered pairs of natural numbers representing integers)","Z17331":"less than, composition a+d<b+c","Z17332":"(42,0) < (99,42)","Z17333":"(42,99) < (9,42)","Z17334":"(42,99) < (99,42)","Z17335":"(0,0) is not less than (99,99)","Z17336":"less than (ordered pair integers), python","Z17337":"less than using set-theoretic representations","Z17338":"negate integer, using set-theoretic definitions","Z17339":"negate integer, javascript","Z17340":"add integers (represented by an ordered pair of natural numbers)","Z17341":"[99,42] + [42,99] = [141,141] = 0","Z17342":"add integers, (a,b)+(c,d) = (a+c,b+d)","Z17343":"add integers, set-theoretic definition composition","Z17344":"add integers represented by pairs of natural numbers, python","Z17345":"multiply integers (represented by an ordered pair of natural numbers)","Z17346":"multiply integers (set-theoretic), python","Z17347":"(5,0)*(0,5) = (0,25) = -25","Z17348":"multiply integers, set-theoretic composition","Z17349":"multiply integers, composition (ac+bd,ad+bc)","Z17350":"same integer, JS ==","Z17351":"integers have the same sign, JavaScript","Z17352":"apply natural number function to positive integer","Z17353":"apply natural number function to positive integer, composition","Z17354":"apply(n^2, +9) = 81","Z17355":"apply integer function to natural number","Z17356":"apply integer function to natural number, composition","Z17357":"decrement integer (natural number 0) = -1","Z17358":"quoted value of natural number 6 is quoted '6'","Z17359":"get key id","Z17360":"key id of Z8K2 is 2","Z17361":"get key id, python","Z17362":"key id of K1 is 1","Z17363":"less than or equal (integer)","Z17364":"3 is less than or equal to 3","Z17365":"key id of Z4K10 is 10","Z17366":"key id of Z12K1 is 1","Z17367":"less than or equal (integer), composition","Z17368":"less than or equal (integer), javascript","Z17369":"less than or equal (integer), python","Z17370":"-9 <= 3","Z17371":"-3 is not less than or equal to -9","Z17372":"0 <= 9","Z17373":"(6,1)*(1,6) = (12,37) = -25","Z17374":"multiply, composition from integer multiply","Z17375":"quoted value by key, composition using abstract","Z17376":"greater of two integers","Z17377":"greater of two integers, python","Z17378":"9 is the greater of [-99,9]","Z17379":"greater of two integers, javascript","Z17380":"lesser of two integers","Z17381":"-99 is the lesser of [9,-99]","Z17382":"lesser integer, python","Z17383":"lesser integer, javascript","Z17384":"(#) quoted value by key, javascript","Z17385":"quote an object, composition using abstract","Z17386":"Lucas sequence U_n(P,Q)","Z17387":"Lucas sequence U, recursive python","Z17388":"6th Pell number","Z17389":"Fibonacci 7th term","Z17390":"Fibonacci, Lucas sequence (1,-1)","Z17391":"5th Fibonacci number is 5","Z17392":"U_10(1,2)","Z17393":"Lucas sequence U, composition","Z17394":"Lucas sequence V_n(P,Q)","Z17395":"Lucas sequence V, recursive python","Z17396":"Lucas number n=8","Z17397":"n=99 -> 1","Z17398":"16th Fibonacci number is 987","Z17399":"product of natural number list, javascript","Z17400":"product of Natural number list (*1)","Z17401":"N-list.product, composition: reduce(multiply, tail, head)","Z17402":"Day of the week","Z17403":"Monday","Z17404":"Tuesday","Z17405":"Wednesday","Z17406":"Thursday","Z17407":"Friday","Z17408":"Saturday","Z17409":"Sunday","Z17410":"Day of the week to JS number","Z17411":"Day of the week to Python int","Z17412":"JS number to Day of the week","Z17413":"Python int to Day of the week","Z17414":"same day of the week","Z17415":"Wednesday = Wednesday","Z17416":"Friday ≠ Saturday","Z17417":"Monday ≠ Sunday","Z17418":"using JS identity","Z17419":"using Python equality","Z17420":"next day of the week","Z17421":"after Wednesday is Thursday ","Z17422":"after Saturday is Sunday","Z17423":"after Sunday is Monday ","Z17424":"day number to day (integer, starting 1=Sunday)","Z17425":"next day if the week, python","Z17426":"day number to day, JavaScript ","Z17427":"1 = Sunday ","Z17428":"next day of the week, javascript","Z17429":"2 = Monday ","Z17430":"3 = Tuesday ","Z17431":"after Monday is Tuesday","Z17432":"after Tuesday is Wednesday","Z17433":"after Thursday is Friday","Z17434":"after Friday is Saturday","Z17435":"previous day of the week ","Z17437":"previous day, JavaScript ","Z17438":"before Sunday is Saturday ","Z17439":"Before Monday is Sunday ","Z17440":"previous day, python","Z17441":"before Thursday is Wednesday ","Z17442":"day to day number (starting Sunday=1, integer)","Z17443":"day number of Sunday is 1","Z17444":"day number of Wednesday is 4","Z17445":"day to day number, javascript","Z17446":"day number of Saturday is 7","Z17447":"4 = Wednesday ","Z17448":"day number to day (1=Sun), Python","Z17449":"5 = Thursday ","Z17450":"6 = Friday ","Z17451":"7 = Saturday ","Z17452":"count a day of the week in a month","Z17453":"day to day number (Sun=1), python","Z17454":"get the total count of a given day ","Z17455":"4 Wednesdays in February 2023","Z17456":"5 Thursdays in February 2024","Z17457":"4 Saturday in February 2022","Z17458":"using JS getDate","Z17459":"days in month, using JS getDate in leap year","Z17460":"Absolute value of Integer, composition from N","Z17461":"+0 = -0 ?","Z17462":"0 and 0 have the same sign","Z17463":"integer object equality","Z17464":"⚠️ same Reference","Z17465":"negative has Type: Sign","Z17466":"⚠️ same Reference, JavaScript","Z17467":"positive is not neutral","Z17468":"absolute value of 0 is 0","Z17469":"subtract integers (represented by an ordered pair of natural numbers)","Z17470":"subtract integers represented by pairs of natural numbers, python","Z17471":"(5,0) - (5,0) = (5,5) = 0","Z17472":"subtract integers, set-theoretic method","Z17473":"(5,0) - (0,7) = (12,0) = 12","Z17474":"(5,0) - (7,0) = (5,7) = -2","Z17475":"(a,b) - (c,d) = (a+d,b+c), composition","Z17476":"99 - 42 = 57","Z17477":"42 - 42 = 0","Z17478":"day number to day (starting 1=Sunday)","Z17479":"day number to day (1=Sun), Javascript","Z17480":"1 -> Sunday","Z17481":"composition, cast to natural number function","Z17482":"2 -> Monday","Z17483":"7 -> Saturday","Z17484":"day number to day (starting 1=Sunday), python","Z17485":"day to day number (starting Sunday=1)","Z17486":"day to day number (starting Sun=1), javascript","Z17487":"Sunday -> 1","Z17488":"Saturday -> 7","Z17489":"day to day number (Sunday=1), python","Z17490":"composition, from natural number version","Z17491":"is Monday to Friday","Z17492":"weekday, python","Z17493":"Monday is a weekday","Z17494":"Friday is a weekday","Z17495":"Saturday is not a weekday","Z17496":"Sunday is not a weekday","Z17497":"is weekday, javascript","Z17498":"weekday, composition","Z17499":"apply to test K combinator","Z17500":"apply(K combinator(99))(\"arbitrary string\") = 99","Z17501":" negate natural number to integer, composition with \"negate integer\" (Z17186)","Z17502":"> 0, composition","Z17503":"> 0, JavaScript","Z17504":"if either neutral, neutral, else if same positive else negative","Z17505":"modulus of integers, JavaScript","Z17506":"first date of a given day in a month","Z17507":"first date of a given day in a month, JavaScript","Z17508":"first Tuesday of January 2024 is 2/1/2024","Z17509":"first sunday of April 1964 is 5/4/1964","Z17510":"first Thursday of September 1994 is 1/9/1994","Z17511":"last date of a given day in a month","Z17512":"last date of a given day in a month, JavaScript","Z17513":"last Friday of March 2012 is 30/3/2012","Z17514":"last Friday of February 2024 is 23/2/2024","Z17515":"last Monday of February 2020 is 24/2/2020","Z17516":"Date list for a specific day in a given month and year","Z17517":"advance N days of the week","Z17518":"advance N days, python","Z17519":"Monday + 1 = Tuesday","Z17520":"Sunday + 14 = Sunday","Z17521":"Wednesday - 14 = Wednesday","Z17522":"offset N days, javascript","Z17523":"next day, composition advance N=1","Z17524":"previous day, composition advance -1 days","Z17525":"is pangram (Latin alphabet), python","Z17526":"Caesar cipher (Bengali Consonants)","Z17527":"shift \"কখগঘঙ\" by 3","Z17528":"Caesar cipher of Bengali Consonants in Python","Z17529":"shift  \"ক\" by 38","Z17530":"Caesar cipher (Bengali alphabets)","Z17531":"shift  \"অ\" by 49","Z17532":"Caesar cipher of Bengali alphabets in Python","Z17533":"shift  \"অআকখ\" by 2","Z17534":"make pair","Z17535":"make pair, composition","Z17536":"count a day of the week in a year","Z17537":"53 Mondays in 2024","Z17538":"53 Tuesdays in 2024 (leap year)","Z17539":"52 Wednesdays in 2024","Z17540":"get day of the week from numerical date","Z17541":"2024-07-01 is a Monday","Z17542":"day of the week from numerical date, composition","Z17543":"count day of week in year, composition","Z17544":"get day of the week from numerical date, javascript","Z17545":"get weekday number, composition","Z17546":"Date list for a specific day in a given month and year, JavaScript","Z17547":"contains all the dates that Monday occurred in June 2024","Z17548":"contains all the dates that thursday occurred in february 2024","Z17549":"get nth date of a given day in month","Z17550":"get nth date of a given day in month, Composition","Z17551":"The date of the second Saturday in July 2024 is 13/7/2024.","Z17552":"The date of the third Saturday in July 2024 is 20/7/2024.","Z17553":"The date of the fourth Saturday in July 2024 is 27/7/2024.","Z17554":"The date of the first Saturday in July 2024 is 6/7/2024.","Z17555":"The date of the six Saturday in July 2024 returns nothing","Z17556":"is date on day","Z17557":"is date on day, JavaScript","Z17558":"2/7/2024 is not on a monday","Z17559":"25/12/2022 is on a sunday","Z17560":"25/12/2012 is not on a sunday","Z17561":"get English weekday from date, Composition","Z17562":"Exodus 16:16 is a pangram of the Hebrew alphabet","Z17563":"Bengali to braille (India)","Z17564":"Bengali to braille (Bangladesh)","Z17565":"\"পৃথিবী\" in braille","Z17566":"Bengali to braille Indian standard, python","Z17567":"Bengali vowels in braille (Indian standard)","Z17568":"80530  = 73874 + 6656","Z17569":"same String","Z17570":"+4 – +5 = –1","Z17571":"Bengali to braille Bangladesh standard, python","Z17572":"Bengali vowels in braille (Bangladesh standard)","Z17577":"shift \"অ\" by 11","Z17578":"days from one day to another","Z17579":"Monday is 3 days after Friday","Z17580":"Friday is 4 days after Monday","Z17581":"Sunday is 0 days after Sunday","Z17582":"days from one day to another, python","Z17583":"days from one day to another, javascript","Z17584":"count day of the week in a month, composition","Z17585":"subtract natural numbers with floor 0, javascript","Z17586":"count day of the week in month, composition from list","Z17587":"3^1000-1 is not a perfect 4th power","Z17588":"add integers [a+c,b+d], javascript","Z17589":"count day of week in month, javascript calculation","Z17590":"(#) is permutation, javascript, NOT WORKING","Z17591":"Integer in range","Z17592":"3 is between 0 and 8","Z17593":"8 is not between 2 and 5","Z17594":"-2 is between -5 and 3","Z17595":"integer in range, python","Z17596":"4 is between 2 and 7","Z17597":"integer in range, composition ","Z17598":"6 is in range of 4 and 6","Z17599":"Arabic to Bangla numerals","Z17600":"1857 → ১৮৫৭","Z17601":"Arabic to Bangla numerals Python","Z17602":"-2537 → -২৫৩৭","Z17603":"echo test case for void","Z17604":"Gregorian:2024,7,9 = Bangla:  25 Ashar 1431","Z17605":"is valid email address, python","Z17606":"replicate(\"a\",10000)","Z17607":"same sign, composition","Z17608":"negative is not positive","Z17609":"neutral is not positive","Z17610":"negative is not neutral","Z17611":"same Sign, composition (args swapped)","Z17612":"27^4 = 531441","Z1924":"Interslavic (Cyrillic script)","Z1925":"Chitonga","Z1926":"Chiluvale","Z1927":"Jakalteko","Z1928":"Kihunde","Z1929":"Abron","Z1930":"Suret","Z289":"Validate HTML fragment built-in","Z189":"Validate HTML fragment","Z17613":"2^79 evaluates","Z17614":"Z1 > Z2 composition","Z17615":"0 > –17132","Z17616":"N-list contains Z","Z17618":"divisors(10) = [1, 2, 5, 10]","Z17619":"divisors of 6 = [1, 2, 3, 6]","Z17620":"factors of 17 are 1 and 17","Z17621":"factor 0 = []","Z17622":"divisors(Belphegor's prime) = [1, Belphegor's prime]","Z17623":"check for every number up to argument whether it is modulo 0","Z17624":"Modulo of number in JS","Z17625":"divisors(16)=[1,2,4,8,16] (no repeats)","Z17626":"Shift 'য়' by 1","Z17628":"same list of natural numbers","Z17629":"[1,2,3] == [1,2,3]","Z17630":"[] == []","Z17631":"[0] =/= []","Z17632":"[1,2] =/= [2,1]","Z17633":"[27] ==[27]","Z17634":"[1,2] =/= [1,2,3]","Z17635":"list equality(this, that, equality of natural numbers)","Z17636":"==","Z17637":"check length and then check each value","Z17638":"divisors of 9 are [1, 3, 9]","Z17639":"Spanish plural","Z17640":"Plural of \"casa\" = \"casas\"","Z17641":"Plural of \"canción\" = \"canciones\"","Z17642":"Plural of \"jabalí\" = \"jabalíes\"","Z17643":"Plural of \"pájaro\" = \"pájaros\"","Z17644":"Plural of \"café\" = \"cafés\"","Z17645":"Plural of \"pared\" = \"paredes\"","Z17646":"Plural of \"farol\" = \"faroles\"","Z17647":"Plural of \"arroz\" = \"arroces\"","Z17648":"Plural of \"cactus\" = \"cactus\"","Z17649":"Plural of \"tórax\" = \"tórax\"","Z17650":"Plural of \"autobús\" = \"autobuses\"","Z17651":"Acute Spanish word","Z17652":"\"Canción\" = True","Z17653":"\"Lanza\" = False","Z17654":"English country demonym","Z17655":"United States → American","Z17656":"English country demonym python","Z17657":"India → Indian","Z17658":"Japan → Japanese","Z17659":"New Zealand → New Zealander","Z17660":"Italy → Italian","Z17661":"Uruguay → Uruguyan","Z17662":"gcd(18,6) = 6","Z17663":"GCD(18,42) = 6","Z17664":"convert hex colour to [R,G,B]","Z17665":"convert hex colour to [R,G,B] list, python","Z17666":"#000000 = [0,0,0]","Z17667":"#FFFFFF = [255,255,255]","Z17668":"0FFF00 = [15,255,0]","Z17669":"GCD(0, 42) = GCD(42, 0)","Z17670":"add vectors (containing natural numbers)","Z17671":"[1,2,3] + [4,5,6] = [5,7,9]","Z17672":"python map(sum, zip(a,b))","Z17673":"[1,2] + [0,0] = [1,2]","Z17674":"add vectors, javascript loop over length","Z17675":"average vectors (containing natural numbers)","Z17676":"avg([1,2,3],[5,6,7]) = [3,4,5]","Z17677":"avg([0,1],[1,2]) = [0,1]","Z17678":"average vectors (natural numbers), javascript loop over length","Z17680":"composition of divide natural numbers","Z17681":"halve(2) = 1","Z17682":"halve(3) = 1","Z17683":"halve, javascript","Z17684":"average vectors, map halve add vectors","Z17685":"days in month (Igbo)","Z17686":"28 days in Mbu","Z17687":"convert [R,G,B] to hex colour","Z17688":"days in Igbo month, python","Z17689":"[0,0,0] = #000000","Z17690":"[255,255,255] = #ffffff","Z17691":"29 days in Uzo Alusi","Z17692":"convert [R,G,B] to hex, composition","Z17693":"natural number to hexadecimal, javascript","Z17694":"convert [R,G,B] to hex colour, javascript construction","Z17695":"mix colors, composition","Z17696":"255 → ff","Z17697":"0 → 0","Z17699":"sum[4,14,7]=25","Z17700":"sum[]=0","Z17702":"[5, 3, 2] ↦ [2, 3, 5] (Natural numbers in untyped lists)","Z17703":"replace suffix \"a\" with \"or\"","Z17704":"swedish noun first declension plural python","Z17705":"flicka -> flickor","Z17706":"gata -> gator","Z17707":"[-5,-3,-2] to [-2,-3,-5]","Z17708":"reverse list, JS loop over elements backward","Z17709":"product of [9] = 9","Z17710":"product of empty list defaults to 1","Z17711":"product of [11,9] = 99","Z17712":"plural of \"penis\" is \"penises\"","Z17713":"convert X11 colour to hex","Z17714":"lightgoldenrodyellow = #FAFAD2","Z17715":"white = #FFFFFF","Z17716":"[[\"hello\"],[\"world\"]] → [[\"world\"],[\"hello\"]]","Z17717":"reverse list, python [::-1]","Z17718":"reverse list, python append pop","Z17719":"string type list test","Z17720":"\"hund\" -> \"\"","Z17721":"Swedish noun, second declension, indefinite plural, -ar/-rar","Z17722":"swedish noun second declension indefinite plural -ar python","Z17723":"pojke -> pojkar","Z17724":"hund -> hundar","Z17725":"Swedish noun, first declension, definite singular, -n","Z17726":"flicka -> flickan","Z17727":"Swedish noun root in first morpheme in combinations","Z17728":"flicka -> flick","Z17729":"moln -> moln","Z17730":"gata -> gat","Z17731":"äpple -> äppel","Z17732":"swedish noun root morpheme python","Z17733":"bygge -> bygg","Z17734":"swedish noun first declension definitive singular composition ","Z17735":"gata -> gatan","Z17736":"Swedish noun, second declension, definite singular, -en/-eln","Z17737":"fågel -> fågeln","Z17738":"pojke -> pojken","Z17739":"bil -> bilen","Z17740":"Swedish noun, second declension, definite singular python","Z17741":"Swedish noun, third declension, definite singular, -en/-len","Z17742":"student -> studenten","Z17743":"muskel -> musklen","Z17744":"Swedish noun, third declension, definite singular, python","Z17745":"Swedish noun, third declension, indefinite plural, -er/-äder/-ter/-öcker","Z17746":"student -> studenter","Z17747":"muskel -> muskler","Z17748":"swedish noun third declension indefinite plural python","Z17749":"add suffix \"r\" to string if it does not end with \"r\"","Z17750":"fiende -> fiender","Z17751":"Swedish noun, fourth declension, plural, -r, python ","Z17752":"bok -> böcker","Z17753":"fot -> fötter","Z17754":"mor -> mödrar","Z17755":"dotter -> döttrar","Z17756":"bokstav -> bokstäver","Z17757":"bonde -> bönder","Z17758":"and -> änder","Z17759":"natt -> nätter","Z17760":"son -> söner","Z17761":"stad -> städer","Z17762":"tång -> tänger","Z17763":"prefixed reversed list","Z17764":"[[\"\"], 3, 2] ↤ [2, 3]","Z17765":"[1,2,3] is a permutation of [3,2,1] (natural numbers)","Z17766":"bror -> bröder","Z17767":"\"far\" -> \"fäder\"","Z17768":"sommar -> somrar","Z17769":"morgon -> morgnar","Z17770":"reverse list (of natural numbers)","Z17771":" [5, 3, 2] ↦ [2, 3, 5] (Natural number typed lists) in typed reversal","Z17772":"reverse natural number list, javascript","Z17773":"reverse natural number list, python","Z17774":"reverse list (of integers)","Z17775":"[-5, -3, -2] ↦ [-2, -3, -5] (integer typed lists) in typed reversal","Z17776":"reverse integer list, javascript","Z17777":"reverse integer list, python","Z17778":"reverse list (of days of the week)","Z17779":"reverse [Mon,Tue,Wed,Thu,Fri,Sat,Sun]","Z17780":"reverse list of days, javascript","Z17781":"reverse list of days, python","Z17782":"prepend 0 to [1,2,3] natural number list","Z17783":"Swedish noun, sixth declension, indefinite plural (same as singular)","Z17784":"äpple -> äpplen","Z17785":"lärare -> lärare","Z17786":"bord -> bord","Z17787":"mekaniker -> mekaniker","Z17788":"Swedish noun indefinite plural sixth declension, composition","Z17789":"linje -> linjer","Z17790":"märke -> märken","Z17791":"add suffix \"n\" to string if it does not already end with \"n\"","Z17792":"swedish noun, fifth declension, indefinite plural, python","Z17793":"prefixed reversed untyped list","Z17794":"signed bitwise not","Z17795":"signed bitwise not, python","Z17796":"bitwise not 10 = -11","Z17797":"bitwise not -4 = 3","Z17798":"tail of prefixed reversed list","Z17799":"echo Natural number list","Z17813":"Gregorian era","Z17814":"AD","Z17815":"BC","Z17816":"2 from [1,2,3] (natural numbers)","Z17817":"same Gregorian era","Z17818":"use JavaScript === ","Z17819":"Converter of Gregorian era to JS","Z17820":"Boolean to natural number, javascript","Z17821":"Converter of Gregorian era to Python","Z17822":"Swedish noun declension, indefinite plural, irregular nouns with only shortening of vovel (umlaut)","Z17823":"mus -> möss","Z17824":"lus -> löss","Z17825":"gås -> gäss","Z17826":"Swedish noun declension, indefinite plural, irregular nouns with only shortening of vovel, python","Z17827":"replace suffix \"a\" with \"on\"","Z17828":"öga -> ögon","Z17829":"öra -> öron","Z17830":"Swedish noun declension, indefinite plural, -on, python","Z17831":"split list [1,2,3,4] (natural numbers)","Z17832":"Swedish noun, ninth declension, indefinite plural, -en","Z17833":"huvud -> huvuden","Z17834":"Swedish noun declension, indefinite plural, -en, python","Z17835":"man -> män","Z17836":"brandman -> brandmän","Z17837":"cashewnöt -> cashewnötter","Z17838":"gnet -> gnetter","Z17839":"farfar -> farfäder","Z17840":"långfinger -> långfingrar","Z17841":"mormor -> mormödrar","Z17842":"statsöverhuvud -> statsöverhuvuden","Z17843":"Converter of Gregorian era from JavaScript","Z17844":"Converter of Gregorian era from Python","Z17845":"pad string with leading 0 until it is two characters long","Z17846":"use Python ==","Z17847":"pad string (\"0\" , 2), composition","Z17848":"\"1\" -> \"01\"","Z17849":"empty string -> \"00\"","Z17850":"\"ff\" -> \"ff\"","Z17851":"convert RGB to hex, Map composition","Z17852":"prefixed unreversed list","Z17853":"Swedish noun, fourth declension, singular definite, -n","Z17854":"fiende -> fienden","Z17855":"Swedish noun, fourth declension, singular definite, -n composition ","Z17856":"same Gregorian era, composition","Z17857":"BCE is not the same as CE","Z17858":"AD = AD","Z17859":"BCE is the same as BCE","Z17860":"CE is not the same as BCE","Z17861":"Is \"ayer\" an Spanish acute word?","Z17862":"\"Base\" = False","Z17863":"\"Volver\" = True","Z17864":"\"Dominó\" = True","Z17865":"\"Cántaro\" = False","Z17866":"Spanish syllables from word","Z17867":"Syllables of \"calabaza\"","Z17868":" remove first of (untyped) [January, February, March]","Z17869":"sort list ascending (integers)","Z17870":"Syllables of \"funcionamiento\"","Z17871":"sort [1,7,-3,2,0,-11,2]","Z17872":"sort ascending integers, python","Z17873":"sort list ascending (natural numbers)","Z17874":"sort [2,0,4,3,1,2]","Z17875":"sort ascending (natural numbers), composition mapping integer sort","Z17876":"sort ascending (natural numbers), python","Z17877":"sort empty list is empty list","Z17878":"[-99 (integer), 99 (natural number)] are not same-typed","Z17879":"is this list untyped?","Z17880":"list containing elements with multiple types is untyped","Z17881":"untyped list of strings is untyped","Z17882":"string-typed list of strings is not untyped","Z17883":"untyped list of integers is untyped","Z17884":"integer-typed list of integers is not untyped","Z17892":"is this list typed, composition of same type as object-typed list","Z17893":"ZID of object type","Z17894":"natural number 0 has type ZID \"Z13518\"","Z17895":"untype a list","Z17896":"[1,2,3] check untyped?","Z17897":"[1,2,3] check correct list content equality","Z17898":"add two different types, then remove them (NOT WORKING)","Z17899":"[\"string\", 0] -> untyped list [0]","Z17900":"is this list typed?","Z17901":"is typed list, composition not(untyped)","Z17902":"natural number [1,2,3] is typed","Z17903":"untyped [1,2,3] is not typed","Z17904":"add suffix \"t\" to string if it does not end with \"t\"","Z17905":"äpple -> äpplet","Z17906":"Swedish noun declension, singular definite -t python ","Z17907":"Swedish noun declension, singular definite, -n/-et","Z17908":"bord -> bordet","Z17909":"lärare -> läraren","Z17910":" Swedish noun declension, singular definite, -n/-et python","Z17911":"Swedish noun declension, singular definite, -nen/-en","Z17912":"lus -> lusen","Z17913":"man -> mannen","Z17914":"Swedish noun declension singular definite -nen/-en python ","Z17915":"replace suffix \"a\" with \"orna\"","Z17916":"gata -> gatorna","Z17917":"Swedish noun, first declension, definite plural, -orna python","Z17918":"replace suffix \"a\" with \"ornas\"","Z17919":"gata -> gatornas","Z17920":"Swedish noun, first declension, definite genitive plural, -ornas python","Z17921":"Swedish noun, second declension, definite plural, -arna/-larna","Z17922":"växel -> växlarna","Z17923":"Swedish noun, second declension, definite plural genitive, -arnas/-larnas","Z17924":"växel -> växlarnas","Z17925":"Swedish noun, second declension, definite genitive plural, -arnas python","Z17926":"dotter -> döttrarnas","Z17927":"mormor -> mormödrarnas","Z17928":"Swedish noun, third declension, definite plural, -erna/-äderna/-terna/-öckna","Z17929":"student -> studenterna","Z17930":"Swedish noun, third declension, definite plural, -erna composition","Z17931":"add suffix \"na\" if string does not already end with \"na\"","Z17932":"studenter -> studenterna","Z17933":" Swedish noun, declension, definite plural, -na python","Z17934":"Swedish noun, third declension, definite genitive plural, -ernas/-ädernas/-ternas/-öcknas","Z17935":"student -> studenternas","Z17936":"Swedish noun, third declension, definite genitive plural, -ernas composition","Z17937":"muskel -> musklernas","Z17938":"bok -> böckernas","Z17939":"add suffix \"rna\" to string if it does not end with \"rna\"","Z17940":"fiende -> fienderna","Z17941":"Swedish noun, fourth declension, definite plural, -rna composition","Z17942":"add suffix \"rnas\" to string if it does not end with \"rnas\"","Z17943":"fiende -> fiendernas","Z17944":" Swedish noun, fourth declension, definite genitive plural, -rnas composition","Z17945":"Swedish noun, fifth declension, definite genitive plural, -nas composition","Z17946":"add suffix \"na\" to string if it does not end with \"na\"","Z17947":"äpple -> äpplena","Z17948":"add suffix \"a\" to string if it does not end in \"a\"","Z17949":"test -> testa","Z17950":"Swedish declension, definitive plural, -a python","Z17951":" Swedish noun, fifth declension, definite plural, -na composition","Z17952":"add suffix \"nas\" to string if it does not already end with \"nas\"","Z17953":"äpple -> äpplenas","Z17954":"substitute mediawiki editchangetags query","Z17955":"?action=editchangetags&ids%5B","Z17956":"substitute mediawiki revisiondelete query","Z17957":"subst mediawiki revisiondelete query composition","Z17958":"run unary endofunction n times","Z17959":"run endofunction n times, composition","Z17960":"8 steps of Collatz function from 42 reaches 1","Z17961":"run number of primes up to N on its own result","Z17962":"afton -> aftnar","Z17963":"Swedish -s declension ","Z17964":"Swedish noun, second declension, definite plural, -arna composition","Z17965":" Swedish noun, first declension, definite plural, -orna composition","Z17966":"Swedish noun, sixth declension, definite plural, -en/-rna","Z17967":"bord -> borden","Z17968":"lärare -> lärarna","Z17969":" Swedish noun, sixth declension, definite plural, -en python","Z17970":"Swedish noun, sixth declension, definite genitive plural, -ens/-rnas","Z17971":"bord -> bordens","Z17972":"lärare -> lärarnas","Z17973":"add suffix to string if it does not already end with the suffix","Z17974":"test + ing -> testing","Z17975":"testing + ing -> testing","Z17976":" add suffix to string if it does not already end with the suffix python","Z17977":"opposite era","Z17978":"opposite of AD is BC","Z17979":"opposite of BC is AD","Z17980":"opposite era, composition","Z17981":"opposite era, python","Z17982":"opposite era, javascript","Z17983":" Swedish noun, sixth declension, definite genitive plural, -ens/-rnas composition","Z17984":" Swedish noun, declension, definite plural, -na composition","Z17985":" Swedish declension, definitive plural, -a composition","Z17989":" Swedish noun, fourth declension, indefinite plural, -r composition","Z17991":" Swedish noun, first declension, definite genitive plural, -ornas composition","Z17992":" Swedish noun declension, indefinite plural, -en composition","Z17993":" add \"t\" to string if not already ends in \"t\" composition","Z17994":" Swedish noun declension, indefinite plural, -on composition","Z17995":" Swedish noun, first declension, indefinite plural, -a/-or composition","Z17996":" Swedish noun, second declension, definite genitive plural, -arnas composition","Z17997":"fängelse -> fängelserna","Z17998":"fängelse -> fängelser","Z17999":"afton -> aftonen","Z18000":"afton -> aftnarna","Z18001":"duplicate \"🌾\" then duplicate the result","Z18002":"is Swedish noun with multiple plural forms?","Z18003":"hammare -> true","Z18004":"is Swedish noun with multiple plural forms? python hardcoded list","Z18005":"båt -> false","Z18006":"is Swedish noun with no plural forms?","Z18007":"glädje -> true","Z18008":"båt -> false (has plural)","Z18009":"is Swedish noun with no plural forms? python hardcoded list","Z18010":"Plural of a masculine noun [Hebrew; Naive]","Z18011":"Plural of a feminine noun [Hebrew; naive]","Z18012":"replace suffix \"a\" with \"onen\"","Z18013":"öga -> ögonen","Z18014":"replace suffix \"a\" with \"onen\", composition","Z18015":"Plural of a masculine noun, composition","Z18016":"Plural of a feminine noun, composition","Z18017":"add suffix \"ts\" to string if it does not already ends with \"ts\"","Z18018":"öga -> ögats","Z18019":" add suffix \"ts\" if not already ends in \"ts\" composition","Z18020":"add suffix \"s\" to string if it does not already end with \"s\"","Z18021":"öga -> ögas","Z18022":" add suffix \"s\" to string if not already ends in \"s\" composition","Z18023":"replace suffix \"a\" with \"onens\"","Z18024":"öga -> ögonens","Z18025":"replace suffix \"a\" with \"onens\" composition","Z18026":"replace suffix \"a\" with \"ons\"","Z18032":"add suffix \"ena\" if string does not end with \"ena\"","Z18034":"huvud -> huvudena","Z18035":"add suffix \"ena\" if string does not end with \"ena\" composition","Z18036":"add suffix \"enas\" to string if it does not end with \"enas\"","Z18037":"huvud -> huvudenas","Z18038":"add suffix \"enas\" if string does not end with \"enas\" composition","Z18039":"add suffix \"ens\" to string if it does not end with \"ens\"","Z18040":"huvud -> huvudens","Z18041":"add suffix \"ens\" if string does not end with \"ens\" composition","Z18042":"add suffix \"ets\" to string if it does not end with \"ets\"","Z18043":"huvud -> huvudets","Z18044":"add suffix \"ets\" to string if it does not end with \"ets\" composition","Z18045":"Swedish noun seventh declension singular definite genitive -sens/-nens","Z18046":"mus -> musens","Z18047":"Swedish noun seventh declension definite genitive -sens/-nens composition","Z18048":"Swedish noun seventh declension plural definite umlaut + -en","Z18049":"mus -> mössen","Z18050":"add suffix \"en\" to string if it does not end with \"en\"","Z18051":"test -> testen","Z18052":" add suffix \"en\" to string if it does not end with \"en\" composition","Z18053":" Swedish noun seventh declension plural definite umlaut + -en composition","Z18054":"পৃথিবী = স্বরবর্ণ: 3 ; ব্যাঞ্জনবর্ণ: 3","Z18055":" Swedish noun seventh declension plural definite umlaut + -ens","Z18056":"mus -> mössens","Z18057":"প্রত্যুৎপন্নমতিত্ব = স্বরবর্ণ: 2 ; ব্যাঞ্জনবর্ণ: 16","Z18058":" Swedish noun seventh declension plural definite umlaut + -ens composition","Z18059":"কিংকর্তব্যবিমূঢ় = স্বরবর্ণ: 3 ; ব্যাঞ্জনবর্ণ: 12","Z18060":"lus -> lössens","Z18061":"Bengali cardinal for 9999","Z18062":"Bengali cardinal for 10000000","Z18063":"Swedish noun, sixth declension, singular definite genitive -ns/-ets ","Z18064":"lärare -> lärarens","Z18065":"Swedish noun, sixth declension, singular definite genitive -ns/-ets  composition","Z18066":"add suffix \"ns\" to string if it does not end with \"ns\"","Z18067":"äpple -> äpplens","Z18068":"add suffix \"ns\" to string if it does not end with \"ns\" composition","Z18069":"select alphabetically first item","Z18070":"children, adult humans → adult humans","Z18071":"select alphabetically first item, python","Z18072":"Gregorian era to sign","Z18074":"AD is positive","Z18075":"BC is negative","Z18076":"Gregorian era to sign, composition ","Z18077":"Gregorian era to sign, javascript","Z18078":"Gregorian era to sign, python","Z18079":"cat, horse → cat","Z18080":"sign to Gregorian era","Z18081":"positive → AD","Z18082":"negative → BC","Z18083":"sign to Gregorian era, python","Z18084":"Gregorian era is AD","Z18085":"AD is AD","Z18086":"BC is not AD","Z18087":"Gregorian era is AD, javascript","Z18088":"Gregorian era is AD, python","Z18089":"Syllables of \"mencionar\"","Z18090":"Syllables of \"aproximación\"","Z18091":"neutral returns an error","Z18092":"replace suffix \"a\" with \"ors\"","Z18093":"gata -> gators","Z18094":"replace suffix \"a\" with \"ors\" composition ","Z18095":"add suffix \"rs\" to end if string does not already end with \"rs\"","Z18096":"fiende -> fienders","Z18097":"add suffix \"rs\" to end if string does not already end with \"rs\" composition ","Z18098":"Swedish noun, third declension, definite singular genitive, -ens/-lens","Z18099":"student -> studentens","Z18100":"Swedish noun, third declension, definite singular genitive, -ts/-tens -els/-lens composition ","Z18101":"Swedish noun, third declension, indefinite plural genitive, -ers/-äders/-ters/-öckers","Z18102":"bok -> böckers","Z18103":"Swedish noun, third declension, indefinite plural genitive, -ers/-äders/-ters/-öckers composition ","Z18104":"Swedish noun, second declension, definite singular genitive, -ens/-elns","Z18105":"fågel -> fågelns","Z18106":"Swedish noun, second declension, definite singular, -ens/-elns composition","Z18107":"fågel -> fåglar","Z18108":"Swedish noun, second declension, indefinite plural genitive, -ars/-rars","Z18109":"fågel -> fåglars","Z18110":"Swedish noun, second declension, indefinite plural genitive, -ars/-rars composition","Z18111":"fågel -> fåglarnas","Z18112":"Separation of \"বিশ্ব\" ","Z18113":"Separation of \"কিংকর্তব্যবিমূঢ়\"","Z18114":"Separation of \"ক্ষ\"","Z18115":"1,000 = \"এক হাজার\"","Z18116":"55 = \"পঞ্চান্ন\"","Z18117":"199 = \"এক শত নিরানব্বই\"","Z18118":"\"এক লক্ষ কোটি\" = 1,000,000,000,000","Z18119":"N months after month, python","Z18120":"genitive case of \"তারা\" is \"তাদের\"","Z18121":"genitive case of \"আপনি\" is \"আপনার\"","Z18122":"genitive case of \"সে\" is \"তার\"","Z18123":"convert [R,G,B] to hex colour, python string formatting","Z18124":"[112,128,144] = #708090","Z18125":"item 2 of [\"hello\", \"world\"]","Z18126":"natural number list length comparison","Z18127":"len[1,2,3,4] = len[-1,-2,-3,-4]","Z18128":"index of first listing, recursive composition","Z18129":"[1,2,3] is a superset of [2,3] (natural numbers)","Z18130":"[0,2,4,6] and [2,4,5,7] share a common element","Z18131":"Bengali to Gregorian date (Bangladesh)","Z18132":"Bangla: 1430/1/1 = Gregorian: 14 April 2023","Z18133":"Bangla: 1431/12/30 = Gregorian: 13 April 2025","Z18134":"Bangla to Gregorian in python (Bangladesh)","Z18135":"Bangla: 1431/9/16 = Gregorian: 1 January 2025","Z18136":"distinct words from string, python implementation","Z18137":"distance between \"kitten\" and \"sitting\" is 3","Z18138":"levenshtein distance, python implementation","Z18139":"right shift via division, composition","Z18140":"Russian to Tajik","Z18141":"Russian to Tajik (Python)","Z18142":"add suffix \"de\" to string if it does not already end with \"de\"","Z18143":"titta -> tittade","Z18144":"add suffix \"de\" to string if it does not already end with \"de\" composition ","Z18145":"Swedish verb, group 2, imperative","Z18146":"köra -> kör","Z18147":"remove last character from string composition ","Z18148":"replace suffix \"a\" with \"t\"","Z18149":"köra -> kört","Z18150":"replace suffix \"a\" with \"t\" composition ","Z18151":"add suffix \"dde\" if string does not already end with \"dde\"","Z18152":"bo -> bodde","Z18153":"add suffix \"dde\" if string does not already end with \"dde\" composition ","Z18154":"add suffix \"tt\" if string does not end with \"tt\"","Z18155":"bo -> bott","Z18156":"add suffix \"tt\" if string does not end with \"tt\" composition ","Z18157":"replace suffix \"a\" with \"er\"","Z18158":"dricka -> dricker","Z18159":"replace suffix \"a\" with \"er\" composition ","Z18160":"Swedish verb, preterite, umlaut - a","Z18161":"dricka -> drack","Z18162":"Swedish verb, preteritum, umlaut - a python ","Z18163":"Swedish verb, group 4, supine, umlaut + it/-it/-tt","Z18164":"dricka -> druckit","Z18165":"Swedish verb, group 4, supine, python hard coded","Z18166":"(Swedish verb) has imperative?","Z18167":"böra -> false","Z18168":"(Swedish verb) has imperative? python hard coded values ","Z18169":"Days in Bengali month (Bangladesh)","Z18170":"In leap year, Falgun has 30 days","Z18171":"Days in Bengali month, python","Z18172":"If not leap year, Falgun has 29 days","Z18173":"Boishakh always has 31 days","Z18174":"Chaitro always has 30 days","Z18175":"Swedish verb, group 4, present -er/-r/-an","Z18176":"dricka -> dricker .","Z18177":"Swedish verb, group 4, present -er/-r/-an python hard coded values","Z18178":"vilja -> vill","Z18179":"få -> får","Z18180":"få-> fått","Z18181":"cost of fossil fuel car journey (litres)","Z18182":"10 km, 1 liter per 10 km, 10 kr/liter -> 10","Z18183":"cost of fossil fuel car journey (litres) python ","Z18184":"Tint of colour","Z18185":"'#ff5733' (50) = '#ffab99'","Z18186":"Tint of colour, python","Z18187":"'#ff0000' (80) = '#ffcccc'","Z18188":"'#000000' (100) = '#ffffff'","Z18189":"Shade of colour","Z18190":"'#ff5733' (50) = '#802c1a'","Z18191":"Shade of colour, python","Z18192":"'#ffffff' (100) = '#000000' ","Z18193":"'#ff0000' (10) = '#e60000'","Z18194":"powerset","Z18195":"combinatorics, set theory","Z18196":"Tone of colour","Z18197":"'#ff5733' (20) = '#e65f42'","Z18198":"Tone of colour, python","Z18199":"Kurdish plural","Z18200":"Kurdish plural Python","Z18204":"Analogous colour","Z18205":"\"#ff5733\" = [\"#ff5733\", \"#ffbb32\", \"#ff3276\"]","Z18206":"Analogous colour, python","Z18207":"\"#195ce6\" = [\"#195ce6\", \"#3b19e5\", \"#19c3e5\"]","Z18208":"Tetradic colours (square)","Z18209":"'#ff5733' = ['#ff5733', '#76ff32', '#32ddff', '#bb32ff']","Z18210":"Square tetradic colours , python","Z18211":"'#2bc0d4' = ['#2bc0d4', '#932bd3', '#d33e2b', '#6bd32b']","Z18212":"Triadic colours","Z18213":"'#ff5733' = ['#ff5733', '#32ff54', '#5532ff']","Z18214":"Triadic colours, python","Z18215":"'নমস্কার' = ['ন', 'ম', 'স্কা', 'র']","Z18216":"New Persian join ezafe to fa based on tg","Z18217":"Python ezafe join","Z18218":"car itinerary CO2E","Z1931":"Torwali","Z1932":"Hakka (Simplified Han script)","Z1933":"Hakka (Traditional Han script)","Z1934":"Hakka (Latin script)","Z18219":"5^2=25","Z18220":"(Swedish noun) interfix \"s\" needed in compound?","Z18221":"gata + pratare -> false","Z18222":"tvätt + maskin -> false","Z18223":"affär+ plan -> true","Z18224":"(Swedish noun) need interfix \"s\" in compound? python ","Z18225":"bord+ben -> true","Z18226":"(Swedish noun) interfix \"u\" needed in compound?","Z18227":"gata+sten -> false","Z18228":"gata+beläggning -> true","Z18229":"gata+loppis -> true","Z18230":"gata+hörn -> false","Z18231":"gata+belysning -> true","Z18232":"(Swedish noun) needs interfix \"u\"? python ","Z18233":"(Swedish noun) interfix \"o\" needed in compound?","Z18234":"kyrka+gård -> true","Z18235":"kyrka+torn -> false","Z18236":"kyrka+besökare -> true","Z18237":"(Swedish noun) interfix \"o\" needed in compound? python ","Z18238":"(Swedish noun) interfix \"e\" needed in compound?","Z18239":"(Swedish noun) interfix \"e\" needed in compound? python ","Z18240":"jord+mor -> true","Z18241":"jord+hög -> false","Z18242":"slott+skog -> true","Z18243":"skog+bygd->true","Z18244":"chef+sekreterare -> None","Z18245":"sport+hall-> false","Z18246":"sport+mannamässig -> true","Z18256":"is title case - Python","Z18257":"is pascal case - Python","Z18258":"is snake case - Python","Z18259":"is pangram of alphabet - Python","Z18260":"is ISO 639-1 language code - Python","Z18261":"ReLU by composition","Z18262":"is valid language code, python","Z18263":"Saturation of colour","Z18264":"\"#ffff00\" has a saturation of \"100.0%\"","Z18265":"Saturation of colour, python","Z18266":"\"#36b890\" has a saturation of \"54.6%\"","Z18267":"\"#1e2321\" has a saturation of \"7.7%\"","Z18268":"Lightness of colour","Z18269":"\"#ffff00\" has a lightness of \"50.0%\"","Z18270":"\"#3c36b8\" has a lightness of \"46.7%\"","Z18271":"exponential factorial by composition","Z18272":"Lightness of colour, python","Z18273":"not boolean implication - Python","Z18274":"backwards Boolean implication - Python","Z18275":"not backwards Boolean implication - Python (temp)","Z18276":"append natural number to list","Z18277":"5 + [0,1,2,3,4] = [0,1,2,3,4,5]","Z18278":"append (NN) composition: reverse(prepend(reverse()))","Z18279":"append (NN), python","Z18280":"3 + [0,1,2] = [0,1,2,3]","Z18281":"sort in alphabetic order","Z18282":"sort [\"banana\", \"cherry\", \"apple\"]","Z18283":"alphabetic sort, python","Z18284":"list without last element (natural numbers)","Z18285":"[1,2,3] -> [1,2]","Z18286":"removing element from empty list gives an empty list","Z18287":"slice off last element, javascript","Z18288":"concatenate lists (of natural numbers)","Z18289":"[1,2]+[3,4] = [1,2,3,4]","Z18290":"concatenate lists (NN), python","Z18291":"remove all matching elements from list (of natural numbers)","Z18292":"[1,2,3,2] - 2 = [1,3]","Z18293":"remove matching (NN), python","Z18294":"split into two lists, javascript","Z18295":"faro out-shuffle, javascript","Z18296":"Subtractive colour","Z18297":"'#ff0000' - '#0000ff' = '#ffff00'","Z18298":"'#ff5733' -  '#00ff00' = '#ff57ff'","Z18299":"Subtractive colour, python","Z18300":"Additive colours","Z18301":"'#ff0000' + '#00ff00' = '#ffff00'","Z18302":"'#0000ff' + '#00ff00' = '#00ffff'","Z18303":"Additive colours, python","Z18304":"Boolean Right - JavaScript","Z18305":"Boolean Not Right - JavaScript","Z18306":"Boolean Not Left - JavaScript","Z18307":"sign non-negative - JavaScript","Z18308":"sign is non-positive - JavaScript","Z18309":"different sign - JavaScript","Z18310":"do these charges electrostatically repel - Python","Z18311":"do these charges electrostatically repel - JavaScript","Z18312":"do these charges electrostatically interact - Python","Z18313":"do these charges electrostatically interact - JavaScript","Z18314":"is truthy - JavaScript","Z18315":"is title case - JavaScript","Z18316":"Bengali to braille Indian standard, javascript","Z18317":"noun lexeme is endocentric compound?","Z18318":"L3286 (birthday) -> true","Z18319":"Wikidata entity JSON has entity-type claim?","Z18320":"JSON of L3286 (birthday) + -P31 (instance of) + -Q61366396 (endocentric compound) -> true","Z18321":"base n to base m","Z18322":"binary 10 to decimal 2","Z18323":"base n to base m, composition","Z18324":"duodecimal 1a to octal 26","Z18325":"trinary 21 to hexadecimal 7","Z18326":"base n to base m, python","Z18327":"entity has entity-type claim? python","Z18328":"reversed P1 is 1P","Z18329":"reversed L1 is 1L","Z18330":"K1 reversed is 1K","Z18331":"Wikidata entity JSON has string-type claim?","Z18332":"JSON of L3286 (birthday) + '-P11130' (an identifier) + 'birthday' -> true","Z18333":"Wikidata entity has string-type claim? python","Z18334":"JSON of L3286 (birthday) + '-P11130' (an identifier) + 'test' -> false","Z18335":"Parse wikitext configuration page","Z18336":"is valid Wikidata entity identifier?","Z18337":"-P1 -> true","Z18338":"-AW1 -> false","Z18339":"negabinary to int","Z18340":"negabinary to int, python ","Z18341":"negabinary 11 = -1","Z18342":"negabinary 101 = 5","Z18343":"negabinary 110 = 2","Z18344":"negabinary 1011 = -9","Z18345":"negabinary 1 = 1","Z18346":"int to negabinary","Z18347":"-1 = negabinary 11","Z18348":"5 = negabinary 101","Z18349":"2 = negabinary 110","Z18350":"-9 = negabinary 1011","Z18351":"1 = negabinary 1","Z18352":"int to negabinary, python","Z18353":"(!) meters to kilometers","Z18354":"1000 m -> 1 km","Z18355":"meters to kilometers composition ","Z18356":"is valid Wikidata entity identifier? python","Z18357":"Distance between Mumbai and Delhi -> 1153241 ","Z18358":"Python implementation V1","Z18359":"Multi-case test","Z18360":"Stockfish Internal Evaluation To Winrate","Z18361":"Python Implementation","Z18362":"(!) distance between two points on earth in kilometers (Haversine)","Z18363":"Distance between two QIDs (SI-unit output in meters) (Wikidata lookup and float type needed)","Z18364":"(!) carbon dioxide emissions of MK1 petrol car journey","Z18365":"German to Braille","Z18370":"Is Bangla word, javascript","Z18371":"Is Bangla word (Unicode Range)","Z18376":"Distance between two points on earth in kilometers (float type needed) composition ","Z18377":"August + 5 = January","Z18378":"August + 4 = December","Z18379":"contains all characters of Bengali alphabet, javascript","Z18381":"Bangla vowels type (javascript)","Z18382":"1 -> 2,66","Z18383":"petrol car journey CO2e output (non SI-unit output in kg CO2 equivalents) composition","Z18384":"1*2,66 -> 2,66","Z18385":"1,5 -> 3.99","Z18386":"climate cost of car journey","Z18387":"Month number to Bengali month","Z18388":"1 = Boishakh","Z18389":"13 = Boishakh (overcount)","Z18390":"6 = Ashshin","Z18391":"(!) carbon dioxide emissions of MK1 diesel car journey","Z18392":"1 -> 2.36","Z18393":"12 = Choitro","Z18394":"(!) diesel car journey CO2e output (non SI-unit output in kg CO2 equivalents) (float type needed) composition (full stop support only)","Z18395":"2 = Joishtho","Z18396":"Month number to Bengali month, python","Z18397":"Bengali to Gregorian months","Z18398":"1 = ['April', 'May']","Z18399":"Bengali to Gregorian months, python","Z18400":"2 = ['May', 'June']","Z18401":"3 = ['June', 'July']","Z18402":"100 = „one hundred“","Z18403":"Korean add (-eul) to the end of a noun","Z18404":"Korean -eul composition","Z18406":"(!) carbon dioxide emissions of ethanol E85 car journey","Z18407":"1 -> 1.15","Z18408":"(!) Ethanol E85 car journey CO2e output (output in kg CO2 equivalents) (float type needed) composition (full stop support only)","Z18409":"(!) carbon dioxide emissions of biogas (CNG) car journey","Z18410":"1 -> 0.11","Z18411":"(!) carbon dioxide emissions of biogas (CNG) car journey composition (full stop support only)","Z18412":"(!) carbon dioxide emissions of electric car journey (Sweden)","Z18413":"1 -> 0.026","Z18414":"(!) carbon dioxide emissions of electric car journey (Sweden) composition","Z18415":"(!) carbon dioxide emissions of fatty acid methyl ester car journey","Z18416":"1 -> 1.09","Z18417":"(!) carbon dioxide emissions of fatty acid methyl ester car journey composition (full stop support only)","Z18418":"(!) carbon dioxide emissions of HVO car journey","Z18419":"1 -> 0.357","Z18420":"(!) carbon dioxide emissions of HVO car journey composition (full stop support only)","Z18421":"(!) carbon dioxide emissions of journey","Z18422":"1 + 1 -> 1","Z18423":"(!) carbon dioxide emissions of journey composition (full stop support only)","Z18424":"(!) carbon dioxide emissions of train journey","Z18425":"1000 + -Q34 + 2024 -> 1.0","Z18426":"(!) carbon dioxide emissions of train journey python hard coded emissions per year and country","Z18427":"1000 + -Q39 + 2024 -> 2.0","Z18428":"(!) miles to kilometers","Z18429":"1 -> 1.60934","Z18430":"(!) miles to kilometers composition","Z18431":"(!) Scandinavian miles to kilometers","Z18432":"1 -> 10","Z18433":"(!) Scandinavian miles to kilometers composition (full stop support only)","Z18434":"Distance between New York City and Los Angeles -> 3935.746254609722","Z18435":"Gregorian to Bengali date (India)","Z18436":"Gregorian: 2024/1/2 = Bangla: 17 Poush 1430","Z18437":"Gregorian: 2026/4/14 = 31 Chaitro 1433","Z18438":"Gregorian: 2024/7/9 = 24 Ashar 1431","Z18439":"Gregorian to Bangla in python (India)","Z18440":"Judeo-Persian morpheme join","Z18441":"Python tg1, jpr1, jpr2","Z18447":"(!) meters to miles","Z18448":"1 -> 0.000621371","Z18449":"(!) meters to miles composition","Z18450":"(!) miles to meters","Z18451":"1 -> 1609.34","Z18452":"(!) miles to meters composition","Z18453":"(!) centimeter to inch","Z18454":"1 -> 0.393700787","Z18455":"(!) centimeter to inch composition","Z18456":"(!) inch to feet","Z18457":"12 -> 1.0","Z18458":" (!) inch to feet composition","Z18459":"(!) inches to feet and inches","Z18460":"13 -> 1 foot 1 inch","Z18461":"(!) inches to feet and inches composition","Z18462":"Bengali to Gregorian date (India)","Z18463":"Bangla: 1430/1/1/ = Gregorian: 15 April 2023","Z18464":"Bangla: 1431,12,30 = Gregorian: 13 April 2025","Z18465":"Bangla: 1431,9,16 = Gregorian: 1 January 2025","Z18466":"Bangla to Gregorian in python (India)","Z18467":"base n to int (integer base)","Z18468":"negadecimal 16 = -4","Z18469":"base n to int, python (integer base)","Z18470":"reverse NN list, composition of integer reverse","Z18471":"map absolute value of integer list to natural numbers","Z18472":"map list of natural numbers to list of integers","Z18474":"Reversed list of 5 Signs","Z18475":"return Typed list","Z18476":"untyped list of Booleans to Boolean list","Z18477":"return Typed list, JavaScript ","Z18478":"list of Strings to String-list","Z18479":"reverse Typed list","Z18480":"reverse Integer list","Z18481":"return Integer-list","Z18482":"reverse Typed list, composition","Z18483":"reverse String list","Z18484":"reverse Boolean list","Z18485":"reverse Natural number list","Z18486":"reverse Gregorian month list","Z18487":"reverse Sign list","Z18488":"reverse Igbo month list","Z18489":" Arabic to Indo-Arabic numerals","Z18490":"123 → ١٢٣","Z18491":"Arabic to Indo-Arabic numerals Python","Z18492":"untype a list, composition ","Z18493":"-123 → -١٢٣","Z18494":"3.14 → ٣٫١٤","Z18495":"99.9% → ٩٩٫٩٪","Z18496":"reverse Typed, composition with untype a list","Z18497":"reverse Natural language list","Z18498":"reverse Gregorian era list","Z18499":"reverse many-typed list","Z18500":"reverse N-list as Typed list","Z18501":"reverse Z-list as Typed list","Z18502":"4th integer in Z-list","Z18503":"12th Igbo month in list of 13","Z18504":"Indo-Arabic to Arabic numerals","Z18505":"Indo-Arabic to Arabic numerals Python","Z18506":"١٢٣ → 123","Z18507":"-١٢٣ → -123","Z18508":" ٣٫١٤ → 3.14","Z18509":"٩٩٫٩٪ → 99.9%","Z18510":"return 12 months","Z18511":"append N to N-list, composition","Z18512":"remove 3 integers","Z18513":"composition of reverse Typed list","Z18514":"test if list of days is now typed","Z18515":"Attic numerals to Natural number","Z18516":"\"Γ\" = 5","Z18517":"\"Δ\" = 10","Z18518":"(!) '–' is 10 (Aegean numerals)","Z18519":"String Arabic ","Z18520":"Simple JS switch statement","Z18522":"segment sentences","Z18523":"1 = \"satu\" ","Z18524":"Yoruba plural ","Z18526":"20 = \"dua puluh\"","Z18527":"\"ΗΗΗΗ\" = 400","Z18529":"display natural number in Khmer numerals","Z18530":"1 =  \"១\"","Z18531":"Byzantine to Arabic numeral","Z18532":"Segment Telefonoa XIX. mendearen amaieran ...","Z18535":"Attic numerals to natural number, python","Z18536":"convert number to Khmer, javascript","Z18537":"\"ΔΔΔΔΠΙΙΙΙ\" = 49","Z18538":"\"souffrir\" belongs to 3rd group","Z18539":"\"finir\" does not belong to 3rd group","Z18540":"67 = \"៦៧\"","Z18541":"Basque plural noun","Z18542":"\"souffrir\" does not belong to 2nd group","Z18543":"Basque plural noun python simple","Z18544":"katu becomes katuak","Z18545":"balea becomes baleak","Z18546":"Indonesian cardinal","Z18547":"txakur becomes txakurrak","Z18548":"\"ΧΧΙ\" = 2001","Z18549":"Is Quechua word","Z18550":"\"Χ𐅅ΗΗΗΗ𐅄ΔΔΔΙΙ\" = 1982","Z18551":"city name","Z18552":"Interpret JavaScript","Z18553":"is Quechua word, Python","Z18554":"Indonesian cardinal, python","Z18555":"1+1 becomes 2","Z18556":"get middle character or characters of a string","Z18557":"\"𐅇ΜΧΧ𐅅ΗΗΠΙΙΙ\" = 62708","Z18558":"Interpret JavaScript, JavaScript","Z18559":"Yoruba plural","Z18560":"34 = \"tiga puluh empat\"","Z18561":"abc gives b","Z18562":"120 = \"seratus dua puluh\"","Z18563":"\"Π\" = 5","Z18564":"convert X11 color to hex (javascript)","Z18565":"White = #FFFFFF","Z18566":"Deep Sky Blue = #00BFFF","Z18567":"type of Weekday-list","Z18568":"reverse Weekday-list","Z18569":"type of list (as string)","Z18570":"\"Z16098\" ↤ [Z16098, …]","Z18571":"Type of list, composition ","Z18572":"paper becomes paperak","Z18573":"Days in Bengali month (India)","Z18574":"Ashar always has 32 days","Z18575":"Boishakh month always has 31 days","Z18576":"Chaitro always has 31 days","Z18577":"If leap year, Falgun month has 30 days","Z18578":"Days in Bangla month, python","Z18579":"Basque plural noun python","Z18580":"\"Z6\" from String-list","Z18581":"not \"Typed\" if Type is \"Z1\"","Z18582":"Is same Bengali month days","Z18583":"Boishakh has same number of days","Z18584":"Joishtho has same number of days","Z18585":"Ashar doesn't has same number of days","Z18586":"Same Bengali month days, composition","Z18587":"Same Bengali month days, python","Z18588":"Z1-list is “untyped”","Z18589":"November is 11th in Typed month-list","Z18590":"12 months without December","Z18591":"Typed: reversed tail of reversed list","Z18592":"int to base n (integer base)","Z18593":"12 = octal 14","Z18594":"12 = negadecimal 192","Z18595":"int to base n (integer base, python)","Z18596":"get first 2 elements of [0,1,2] (untyped list of natural numbers)","Z18597":"append element to untyped list","Z18598":"4 + (untyped)[1,2,3] = [1,2,3,4]","Z18599":"composition: untype list and append to untyped","Z18600":"add \"world\" to untyped [\"hello\"]","Z18601":"Malay cardinal, JavaScript","Z18602":"iterate adding existing elements to result, then append extra element, javascript","Z18603":"has sequence of vowels in Kurdish","Z18604":"hasSequenceVowels Python","Z18605":"same day, composition of same reference","Z18606":"قەڵاەکان: True","Z18607":"same language, composition of same reference","Z18608":"same Igbo month, same Key (identity) composition","Z18609":"append to untyped, composition of reverse untyped and prepend","Z18610":"append to Z1-list, composition ","Z18611":"دارستان: False","Z18612":"hasSequenceVowels JavaScript","Z18613":"untyped: 12 months & January","Z18614":"concatenate Z1-lists, JavaScript","Z18615":" Select Standard Moroccan Tamazight cardinal, input = 842543689","Z18616":"List of words containing a sequence of vowels in Kurdish","Z18617":"List of Kurdish words contains sequence of vowels Python","Z18618":"append untyped singleton","Z18619":"[\"چۆۆنی\", \"خۆات\"] ← \"سڵاو، چۆۆنی؟ دەی خۆات لەگەڵ!\"","Z18620":"convert X11 color to hex (python)","Z18621":"365 = \"three hundred and sixty-five\"","Z18622":"Integers: [2, 3, 5] & [1, 4, 6]","Z18623":"first 3 days from Typed list","Z18624":"edgy prepend","Z18625":"list is month-list","Z18626":"type of Typed list","Z18627":"list’s Type is Gregorian calendar month","Z18628":"type of Typed list, composition ","Z18629":"Z1↤ mixed Type Z1-list","Z18630":"Boolean from Boolean-list","Z18631":"Type from singleton list is String","Z18632":"Object Type from singleton Typed list","Z18633":"same singleton list Type","Z18634":"list equality in expected order","Z18635":"Type: String ↤ String-list","Z18636":"Typed list has the same Object for its Type","Z18637":"list is Z1-list","Z18638":"Typed list and reference object have the same Type","Z18639":"list is String-list","Z18640":"untyped list if Type: Object","Z18641":"list is Boolean-list","Z18642":"list is N-list (Natural numbers)","Z18643":"both lists are Month-lists","Z18645":"Z1-list of Signs is not a Sign-list","Z18646":"same list","Z18647":"twelve months === Typed list","Z18648":"same list, composition","Z18649":"not (empty String-list === empty Boolean list)","Z18650":"same String-list","Z18651":"same list, composition with object equality","Z18652":"same N-list (Natural numbers)","Z18653":"object equality, composition with contains","Z18654":"same Sign-list","Z18655":"same listed lists (differently Typed)","Z18656":"lists of natural numbers are equivalent, although one list is typed","Z18657":"(N)[0,1,2]  !=== (object)[0,1,2]","Z18658":"invalid lists are the same","Z18659":"(N typed) [(Z)-1,(N)0,(N)1] == (untyped) [(Z)-1,(N)0,(N)1]","Z18660":"same invalid lists (Integer in N-list)","Z18661":"\"61252\" = enam puluh satu ribu dua ratus lima puluh dua","Z18662":"Months in period (Bengali)","Z18663":"121 = satu ratus dua puluh satu","Z18664":"List of months from 'Boishakh' to 'Shrabon' (1 - 4)","Z18665":"List of months from 'Shrabon' to 'Boishakh' (4 - 1)","Z18666":"List of month from 'Shrabon' to 'Shrabon' (4 - 4)","Z18667":"Malay cardinal to ordinal","Z18668":"List of month from 1 to 13, overcount","Z18669":"List of Bengali months in period (python)","Z18670":"Basque ergative singular case declension","Z18671":"basque singular ergative case","Z18672":"Aitor -> Aitorrek","Z18673":"motor -> motorrak","Z18674":"Unai -> Unaik","Z18675":"etxe -> etxeak","Z18676":"Untyped and mis-Typed lists with equal elements","Z18677":"list’s Type is Natural number","Z18678":"list’s Type is Sign","Z18679":"Malay cardinal to ordinal number","Z18680":"Malay ordinal: Python (strings)","Z18681":"satu > pertama","Z18682":"sembilan ratus dua puluh tujuh > kesembilan ratus dua puluh tujuh","Z18683":"strict object equality","Z18684":"1 !=== January","Z18685":"January !=== February","Z18686":"Sunday === Sunday","Z18687":"invalid positive 0 integer !=== neutral 0 integer","Z18688":"incorrectly typed list is equal to untyped version","Z18689":"untyped list is equal to equivalent incorrectly typed list","Z18690":"input is a mis-typed list","Z18691":"composition, filter list of words for Kurdish vowel sequence","Z18692":"get middle one or two characters, composition","Z18693":"middle characters of \"abcd\" are \"bc\"","Z18694":"empty string returns empty string","Z18695":"middle character of \"hello\" is \"l\"","Z18696":"middle of single character string \"a\" is \"a\"","Z18697":"split (Typed or untyped) list into two, recursive if Typed","Z18698":"Bolibar -> Bolibarrek","Z18699":"Central Kurdish cardinal from digit string","Z18700":"Number2Words in Kurdish Python","Z18701":"\"0\" → \"سفر\"","Z18702":"\"123456789\" → \"سەد و بیست و سێ ملیۆن و چوارسەد و پەنجا و شەش ھەزار و حەوتسەد و ھەشتا و نۆ\"","Z18703":"\"1000001\" → \"یەک ملیۆن و یەک\"","Z18706":"\"007\" → \"حەوت\"","Z18707":"\"7777777777777777777777777777777777777\" → \"Input exceeds the limit. A maximum of 36 digits is allowed. Please enter a shorter value.\"","Z18708":"contains non-standard Kurdish characters","Z18709":"contains non-standard Kurdish characters Python","Z18710":"سڵآو: True","Z18711":"دەست‌پێ‌کردن: True","Z18712":"ھەڵووژە: False","Z18713":"هەڵووژە: True","Z18714":"درێـــــــــــــــــژی: True","Z18715":"contains non-standard Kurdish characters JavaScript","Z18716":"List of words containing non-standard Kurdish letters","Z18717":"List of words containing non-standard Kurdish letters Python","Z18718":"\"پاقله بۆ کەم‌خوێنی بـاش نییە\" ← [\"پاقله\", \"کەم‌خوێنی\", \"بـاش\"]","Z18719":"\"پاقلە بۆ کەمخوێنی باش نییە\" → []","Z18720":"English Wiktionary HTML page content","Z18721":"English Wiktionary HTML page content python","Z18722":"python help","Z18723":"python help Python","Z18724":"modules","Z18725":"keywords","Z18726":"symbols","Z18727":"symbol names","Z18728":"composition, filter contains non-standard Kurdish","Z18729":"return Typed or untyped list","Z18730":"[Integer, 42] ↤ [Object, 42], True","Z18731":"return Typed or untyped list, composition","Z18732":"[Object, –42, 0, +42] ↤ [‌Object, –42, 0, +42], False","Z18733":"Basque Cardinal","Z18734":"return Typed or untyped list, composition with untype a list","Z18735":"Typed: twelve months","Z18736":"Basque Cardinal Python","Z18737":"11 becomes hamaika","Z18738":"-11 becomes \"minus hamaika\"","Z18739":"37 becomes hogeita hamazazpi","Z18740":"100 becomes ehun","Z18741":"101 in Basque is ehun eta bat","Z18742":"Basque cardinal to ordinal","Z18743":"Basque cardinal to ordinal, python","Z18744":"bat becomes lehenengo","Z18745":"bost becomes bosgarren","Z18746":"Basque Ordinals","Z18747":"Basque Ordinals, composition","Z18748":"5 becomes bosgarren","Z18749":"1000000 becomes milioi bat","Z18750":"milioi bat becomes milioigarren","Z18752":"Javascript implementation of generating a random string","Z18753":"random English string generator should generate a string of at least 1 character","Z18754":"untyped: twelve months","Z18755":"concatenate Typed lists","Z18756":"weekdays + weekend = whole week","Z18757":"concatenate typed lists, composition via untyped lists","Z18758":"concatenate N lists, composition of typed lists","Z18759":"reverse list preserving list typing/untyping","Z18760":"reverse any list, composition of typed or untyped","Z18761":"(untyped)[0,1] -> (untyped)[1,0]","Z18762":"(N)[0,1] -> (N)[1,0]","Z18763":"reverse (String)[\"hello\",\"world\"]","Z18764":"reverse (*)[\"hello\",\"world\"]","Z18765":"language retrieved from code by built-in function is the correct language","Z18766":"is lipogram","Z18767":"Javascript implementation of lipogram test","Z18768":"is monovocalic","Z18769":"Javascript implementation of monovocalic ","Z18770":"prepend element (Typed or untyped list)","Z18771":"to Headline Case","Z18772":"String-list ↤ String, String-list, True","Z18773":"Javascript implementation of conversion to headline case","Z18774":"headline case test : the quick brown fox jumps over the lazy dog","Z18775":"to kebab case","Z18776":"prepend to Typed (?) list, composition","Z18777":"JavaScript implementation of kebab case conversion","Z18778":"test case > test-case","Z18779":"join using Oxford punctuation","Z18780":"JavaScript implementation of join with Oxford punctuation","Z18781":"one, two > one and two","Z18782":"one, two, three > one, two, and three","Z18783":"untyped list ↤ Integer, [Natural number, …], True","Z18784":"convert a language name in Russian to an adverb","Z18785":"English returns \"по-английски\"","Z18786":"empty string is left blank","Z18787":"Python implementation","Z18788":"Empty string","Z18789":"Single character","Z18790":"Kurdish Latin to Arabic","Z18791":"\"Navê te çi ye?\" → \"ناڤێ تە چیە؟\"","Z18792":"\"Merreke ba'eba' dekat\" → \"مەڕەکە باعەباع دەکات\"","Z18793":"join with or using Oxford punctuation","Z18794":"JavaScript implementation of join (or) with Oxford punctuation","Z18795":"one, two, three > one, two, or three ","Z18796":"prefix English word","Z18797":"JavaScript implementation of prefixing an English","Z18798":"normal, ab > abnormal","Z18803":"Kurdish Latin to Arabic, python","Z18804":"English antonym using prefix","Z18805":"implementation of English antonym using prefix","Z18806":"[normal, ab] > abnormal","Z18807":"suffix Kurdish word","Z18808":"Suffix Kurdish word in Python","Z18825":"language name in Russian to an adverb on JS","Z18826":"Basque month name from month number","Z18827":"Basque month name from month number, python","Z18828":"Balochi Latin (Jahani 2019) to Tajik Latin","Z18829":"January becomes Urtarrila","Z18830":"Python bal-latn > tg-latn","Z18831":"Bengali -এর suffix form","Z18832":"'উইকিপিডিয়া' + 'এর' = 'উইকিপিডিয়ার'","Z18833":"'মানুষ' + 'এর' = 'মানুষের'","Z18834":"Bengali -এর suffix form (python)","Z18837":"Bengali -এরা suffix form","Z18839":"'ছাত্র' + 'এরা' = 'ছাত্রেরা' ","Z18840":"'শিক্ষক' + 'এরা' = 'শিক্ষকেরা' ","Z18842":"Bengali -এরা suffix form (python)","Z18845":"English declarative sentence - subject verb","Z18846":"English declarative sentence - SV, composition","Z18847":"he ate > He ate.","Z18852":"contains shouting","Z18853":"contains shouting in python","Z18854":"\"You are a lier.\" → false","Z18855":"\"STOP IT! This is not true!\" → true","Z18856":"\"Why are you shouting? Are you angry?\" → false","Z18857":"\"I AM NOT ANGRY!\" → true","Z18858":"contains shouting in javascript","Z18859":"Filter shouting words","Z18860":"Filter shouting words in python","Z18861":"\"You are a lier.\" → []","Z18862":"\"STOP IT! This is not true!\" → [\"STOP\", \"IT\"]","Z18863":"\"Why are you shouting? Are you angry?\" → []","Z18864":"\"I AM NOT ANGRY!\" → [\"AM\", \"NOT\", \"ANGRY\"]","Z18865":"Filter shouting words in javascript","Z18866":"\"12345678\" = dua belas juta tiga ratus empat puluh lima ribu enam ratus tujuh puluh lapan","Z18867":"Malay natural number transcription","Z18868":"Malay natural number transcription, python","Z18869":"Input = dua belas juta tiga ratus empat puluh lima ribu enam ratus tujuh puluh lapan","Z18870":"Input = satu","Z18871":"English imperative sentence - verb","Z18872":"English imperative sentence - verb, composition","Z18873":"go > Go!","Z18874":"English imperative sentence - verb + adverb","Z18875":"English imperative sentence - verb + adverb, composition","Z18876":"go quickly > Go quickly!","Z18877":"Balochi Latin (Jahani 2009) to Balochi Latin (Abdolla 1935)","Z18878":"Python bal-latn > bal-latn-tm","Z18881":"Bengali -গুলো suffix form","Z18882":"'বই' + 'গুলো' = 'বইগুলো' ","Z18883":"'বইগুলো' + 'গুলো' = 'বইগুলো' ","Z18884":"'গাছগুলা'  → 'গাছগুলা' ","Z18885":"Bengali -গুলো suffix form (python)","Z18886":"English imperative sentence - verb + object","Z18887":"English imperative sentence - verb + object, composition","Z18888":"read, the book > Read the book!","Z18889":"validate hex color","Z18890":"validate hex color, python","Z18891":"simple calculator, custom parser in python","Z18892":"0.1 + 0.2 = 0.3","Z18893":"Malay prefix peN- conversion","Z18894":"Malay prefix peN, python","Z18895":"Test \"nyanyi\" > \"penyanyi\"","Z18896":"leave #FFFFFF unchanged","Z18897":"X11 names: lightgoldenrodyellow + Deep Sky Blue","Z18898":"echo string except for specific replacement","Z18899":"warning for empty string","Z18900":"matching string is not identically matched, so echo","Z18901":"replace an identical string","Z18902":"echo or replace, composition","Z18903":"echo or replace, python","Z18904":"echo or replace, javascript","Z18910":"product of primes < 30","Z18911":"re.search, python","Z18912":"Test \"perang\" > \"pemerang\"","Z18913":"Test \"ghairah\" > \"pengghairah\"","Z18914":"Test \"karam\" > \"pengaram\"","Z18915":"Test \"garam\" > \"penggaram\"","Z18916":"Test \"antara\" > \"pengantara\"","Z18917":"Test \"hantar\" > \"penghantar\"","Z18918":"Test \"fikir\" > \"pemikir\"","Z18919":"Test \"kritik\" > \"pengkritik\"","Z18920":"Test \"sapu\" > \"penyapu\"","Z18921":"Test \"swasta\" > \"penswasta\"","Z18922":"Required cables in mesh topology","Z18923":"Required cables in mesh topology, python","Z18924":"5 nodes require 10 cables","Z18925":"100 nodes require 4950 cables","Z18926":"Required cables in mesh topology, javascript","Z18927":"phrase","Z18928":"noun phrase","Z18929":"verb phrase","Z18930":"imperative sentence (verb) for natural languages ","Z18931":"pick the English generator for imperative sentence (verb)","Z18932":"Molar mass of compound","Z18933":"H2O = 18.02 g/mol","Z18934":"H2SO4 = 98.09 g/mol","Z18935":"P = 30.97 g/mol","Z18936":"C27H46O = 386.64 g/mol","Z18937":"Molar mass calculation (python)","Z18938":"999888777666555 (maximum digits)","Z18939":"character to sign","Z18940":"character to sign, python","Z18941":"\"+\" is positive","Z18942":"\"-\" is negative","Z18943":"\"0\" is neutral","Z18944":"\"−\" (minus sign) is negative","Z18945":"blood compatibility, composition","Z18946":"negative primorial 30","Z18947":"multiply integers (ordered N pair), javascript","Z1935":"Northern Tujia","Z1936":"Sabah Malay","Z1937":"Saint Lucian Creole","Z18948":"N months after month, recursive composition","Z18949":"7 -> [7]","Z18950":"(N)[1,2,3] - 2 = [1,3]","Z18951":"remove first matching, recursive composition","Z18952":"remove August from list","Z18953":"remove 0th element leaves list unchanged","Z18954":"remove first, composition of Nth at first index","Z18955":"remove 99th element of 2 element list: unchanged","Z18956":"[\"aa\",\"cc\",\"bb\",\"cc\"] - first \"cc\"","Z18957":"date difference","Z18958":"01-01-2023&28-08-2024=1 year,7 months,3 weeks,6 da","Z18959":"31-12-2023 & 28-08-2024= 7 months, 4 weeks","Z18960":"date difference, python","Z18961":"date difference in days","Z18962":"01-01-2023 & 28-08-2024 = 605","Z18963":"31-12-2023 & 28-08-2024 = 241","Z18964":"date difference in days, python","Z18965":"0 = null","Z18966":"is language in list, contains composition","Z18967":"\"I am A SCIENTIST\" -> [\"A\", \"SCIENTIST\"]","Z18968":"filter shouting words, uppercase composition","Z18969":"Roman letters are not non-standard Kurdish letters","Z18970":"month is in list, contains composition","Z18971":"month is in list, python","Z18972":"Python math.acos()","Z18973":"month is in list, composition:  if index not zero","Z18974":"1+ -2 = -1","Z18975":"T373607","Z18976":"January is not in list","Z18978":"not Reference (Z41) is False","Z18979":"adverb phrase","Z18980":"September’s Z16098K1 and September are same month","Z18981":"prepend Code point:A to 30-element list","Z18982":"is list typed, composition: False when Type:Object","Z18983":"Convert BN to EN ","Z18984":"BN to EN ","Z18985":"Tokenize \"baker's dozen\"","Z18986":"element to Typed list, Python","Z18987":"Form after number in Arabic languages","Z18988":"Form after numbers in Arabic languages","Z18989":"Form after numbers in Arabic languages, python","Z18990":"Integer test for forms after numbers in Arabic","Z18991":"Float test case for forms after numbers in Arabic","Z18993":"Large Integer for forms after numbers in Arabic","Z18994":"Form after numbers in Arabic languages, Javascript","Z18995":"strict equality, composition: ==Z1 && == Z1K1","Z18996":"object type equality, composition: same Z1K1 or …","Z18997":"Sign:positive != Month:January","Z18998":"Object Type: value of Z1K1 unless is String (True)","Z18999":"Type of String is Type","Z19000":"Type of Type is Type","Z19001":"Type of September is Gregorian calendar month","Z19002":"Type of −42 is Integer","Z19003":"Type of Ede Ajana is Igbo calendar month","Z19004":"CE/AD is not Boolean:True","Z19005":"Type of Tuesday is Day of the week","Z19006":"Type of BC(E) is Gregorian era","Z19007":"Boolean lists have the same Type when one is empty","Z19008":"Type of Boolean-list’s Type is Type","Z19009":"Phonetic transcription of Tunisian","Z19010":"Phonetic transcription of Tunisian, python","Z19011":"Indefinite to definite noun in Arabic languages","Z19012":"Indefinite to definite noun in Arabic, python","Z19013":"Imperative to Present Tense in Tunisian","Z19014":"Imperative to Present Tense in Tunisian, python","Z19015":"Imperative to Present Tense in Tunisian, javascrip","Z19019":"Javascript Present Tense in Tunisian","Z19020":"is a Typed list","Z19021":"3 \"r\"s in \"strawberry\"","Z19022":"checking for regexps in the needle","Z19023":"EU VAT number to Finnish Business ID","Z19024":"simple implementation","Z19026":"is Mersenne prime","Z19027":"(!) is Mersenne Prime, javascript calls other func","Z19028":"count substrings, recursive composition","Z19029":"count empty substrings: \"hello\" has 6?","Z19030":"flat a list in Python","Z19031":"zip lists together","Z19032":"zip lists Python","Z19033":"hamming distance","Z19034":"Hamming Distance Composition","Z19035":"Hamming Distance Python","Z19036":"Equal String Test","Z19037":"Single Bit Difference Test","Z19038":"Multiple Bit Difference Test","Z19039":"Unequal Bit Length Test","Z19040":"All Zero and One Test","Z19041":"Anno Domini to Common Era and vice versa (English)","Z19042":"AD → CE","Z19043":"CE → AD","Z19044":"AD to CE and vice versa Python","Z19045":"(!) Convert BN to EN, composition","Z19046":"Declension for Latvian nouns","Z19047":"vējš is 1st declension","Z19048":"mežs is 1st declension","Z19049":"kaķis is 2nd declension","Z19050":"lietus is 3rd declension","Z19051":"māsa is 4th declension","Z19052":"lauva is 4th declension","Z19053":"pele is 5th declension","Z19054":"bende is 5th declension","Z19055":"sirds is 6th declension","Z19057":"Declension for Latvian nouns: JavaScript","Z19061":"Is Boolean, composition (same Type as Boolean)","Z19062":"AD/CE is not Boolean","Z19063":"a default empty list is a Typed list","Z19064":"is a Typed list, Python","Z19065":"Gregorian era of year number","Z19066":"2024 is in AD","Z19067":"-100 is in BC","Z19068":"Gregorian era of year number, python","Z19069":"Boolean-Typed lists are strictly equal","Z19070":"Caesar cipher of Bengali alphabets in javascript","Z19071":"Shift 'ক' by 100 (overcount)","Z19072":"Shift 'একটি মুক্ত জ্ঞান ভান্ডার' by 10","Z19074":"Type of Z41/true (Reference) = Type of True object","Z19075":"Boolean lists have the same generic Type","Z19076":"same Type, composition: nor(is String)","Z19077":"Type identity","Z19078":"identity of a Boolean list’s Type is Boolean","Z19079":"Type identity, composition: Z803","Z1938":"Haryanvi (Arabic script)","Z1939":"Negeri Sembilan Malay","Z6091":"Wikidata item reference","Z6092":"Wikidata property reference","Z6094":"Wikidata lexeme form reference","Z6095":"Wikidata lexeme reference","Z6004":"Wikidata lexeme form","Z6096":"Wikidata lexeme sense reference","Z6803":"same Wikidata statement","Z6804":"same Wikidata lexeme form","Z6805":"same Wikidata lexeme","Z6806":"same Wikidata lexeme sense","Z6821":"Fetch Wikidata item","Z6822":"Fetch Wikidata property","Z6824":"Fetch Wikidata lexeme form","Z6825":"Fetch Wikidata lexeme","Z6826":"Fetch Wikidata lexeme sense","Z6901":"Built-in implementation of Same Wikidata item","Z6902":"Built-in implementation of Same Wikidata property","Z6903":"Built-in implementation of Same Wikidata statement","Z6904":"Built-in implementation of Same Wikidata lexeme form","Z6905":"Built-in implementation of Same Wikidata lexeme","Z6906":"Built-in implementation of Same Wikidata lexeme sense","Z6921":"Built-in implementation of Fetch Wikidata item","Z6922":"Built-in implementation of Fetch Wikidata property","Z6924":"Built-in implementation of Fetch Wikidata lexeme form","Z6925":"Built-in implementation of Fetch Wikidata lexeme","Z6926":"Built-in implementation of Fetch Wikidata lexeme sense","Z6001":"Wikidata item","Z6002":"Wikidata property","Z6003":"Wikidata statement","Z6005":"Wikidata lexeme","Z6006":"Wikidata lexeme sense","Z6801":"same Wikidata item","Z6802":"same Wikidata property","Z19080":"get weekday(Python)","Z19081":"Wikidata lexeme is a Type","Z19082":"FI123ABC78","Z19083":"identity of Type","Z19084":"same Type","Z19085":"Number to scientific notation","Z19086":"2 = 2e0","Z19087":"Type for Boolean list is Type of False","Z19088":"same Type, Python","Z19089":"16 = 1.6e1","Z19090":"0.4 = 4e-1","Z19091":"12.05 = 1.205e1","Z19092":"Boolean lists’ generic Type identities are equal","Z19093":"object Type equality, objects have same Type","Z19094":"2 by 2 matrices multiplication","Z19095":"2x2 matrix multiplication in python","Z19096":"same: Z11.Z11K1.Z1K1.Z4K1, Z60.Z4K1","Z19097":"same Type: Type of “Wikifunctions”, String","Z19098":"identity key of Gregorian era is Boolean","Z19099":"–42’s Type (Integer) is not Natural number","Z19100":"Type identity of Type is Type (Reference)","Z19101":"same Type, composition ","Z19102":"first element in String-list === unlisted String","Z19103":"Python with decimal","Z19104":"object equality, JavaScript","Z19105":"equal N-lists are the same","Z19106":"use reduce on the list with mul operation","Z19107":"using reduce and a lambda","Z19108":"same Key","Z19109":"Z40K1/identity keys are equal in ”true” Objects","Z19110":"same values by key, composition","Z19111":"equal Natural numbers have the same value Key","Z19112":"Reverse domain name notation","Z19113":" Reverse domain name notation, Javascript","Z19114":"Reverse domain name notation, Python","Z19115":"\"org\" - one element","Z19116":"\"org.wikifunctions\" - two elements","Z19117":"long test with some punctuation","Z19118":"Hex Inverter","Z19119":"Hex Inverter, Python","Z19120":"#17151d becomes #e8eae2","Z19121":"to s-expression","Z19125":"English plural possessive","Z19126":"dog → dogs'","Z19127":"fish → fish's or fishes'","Z19128":"volunteer → volunteers'","Z19129":"composition of plural and possessive","Z19130":"Matrix → Matrices' or Matrixes'","Z19131":"kiss → kisses'","Z19132":"Moroccan Arabic ordinal","Z19133":"Moroccan Arabic ordinal, input = 1","Z19135":"Moroccan Arabic ordinal (up to 10)","Z19136":"Moroccan Arabic ordinal (up to 10), input = 1","Z19139":"every(x => !x), JavaScript","Z19140":"electrostatic attraction using inequality, JS","Z19141":"discard from end of first substring, JS","Z19142":"substring, JavaScript","Z19143":"remove first N characters with substring, JS","Z19144":"Nth last character using at, JavaScript","Z19145":"replicate using repeat, JS","Z19146":"hex to [R,G,B] using regex spliting, JavaScript","Z19147":"[R,G,B] to hex using reduce, JavaScript","Z19148":"[15,16,17] = #0f1011","Z19150":"Moroccan Arabic ordinal (up to 10), python","Z19151":"Moroccan Arabic ordinal (up to 10), input = 25","Z19152":"Moroccan Arabic ordinal (up to 10), input = 10","Z19153":"ur becomes urak","Z19154":"zur becomes zurak","Z19156":"inverse tangent","Z19157":"inverse tangent python","Z19158":"Inverse tangent of 2 is 1.10714872","Z19159":"hamming distance using reduce, JavaScript","Z19160":"F to C, JavaScript","Z19161":"format large numbers using recursion, JS","Z19162":"blood compatibility, JavaScript","Z19163":"remove all matching elements with filter, JS","Z19164":"sort integer list, JavaScript","Z19165":"is square number, JavaScript","Z19166":"date difference in days, JavaScript","Z19167":"correctly decodes two separate words","Z19168":"123 reversed is 321","Z19169":"reverse digits, JavaScript","Z19170":"has double letter","Z19171":"\"letter\" has a double (\"t\")","Z19172":"\"double\" has no double letter","Z19173":"empty string has no double letter","Z19174":"\"coat tie\" does not have a double","Z19175":"has double letter, python","Z19176":"\"Aardvark\" does not have a double letter","Z19177":"is subword of string","Z19178":"\"Wiped\" is a subword of \"Wikipedia\"","Z19179":"\"fun\" is a subword of \"Wikifunctions\"","Z19180":"\"scion\" is not a subword of \"Wikifunctions\"","Z19181":"the empty string is a subword of any string","Z19182":"subword, python","Z19183":"\"aa\" is not a subword of \"a\"","Z19184":"the empty string is a subword of the empty string","Z19185":"remove repeated characters","Z19186":"\"Wikifunctions\" becomes \"Wikfunctos\"","Z19187":"reverse digits, composition, use “reverse string”","Z19191":"is square-free","Z19192":"Leech's morphism is square-free","Z19193":"010 is square-free","Z19194":"\"ABAB\" is not square-free","Z19195":"\"pneumonoultramicroscopicsilicovolcanoconiosis\" is","Z19196":"\"pseudopseudohypoparathyroidism\" isn't","Z19197":"is square-free, python","Z19198":"remove elements common to second list","Z19199":"[A,B,C,A] - [A,C] = [B]","Z19200":"remove duplicated February from untyped list","Z19201":"de-duplicate, python element-by-element","Z19202":"remove duplicates from Typed list","Z19203":"de-duplicate Typed list, composition","Z19204":"(N) [3,2,1,2] -> (N) [3,2,1]","Z19205":"remove duplicates preserving typing/untyping","Z19206":"de-duplicate any list, composition","Z19207":"(Z)[-1,0,1,0] -> (Z)[-1,0,1]","Z19208":"(*)[-1,0,1,0] -> (*)[-1,0,1]","Z19209":"Javascript encode NATO phonetic alphabet","Z19210":"replace character set, javascript","Z19211":"Vowel Replacement","Z19213":"String to Hex Javascript","Z19214":"hex to string (UTF-8)","Z19215":"left/inner/right mark replacement Javascript","Z19216":"Caesar cipher in Javascript","Z19217":"Is it a valid ISO 6709 code","Z19218":"is it a valid ISO 6709 code JS","Z19219":"Valid coordinates (Positive)","Z19220":"Valid coordinates (Negative)","Z19221":"Invalid latitude","Z19222":"Invalid longitude","Z19223":"Convert ISO 3166 country code to name","Z19224":"Convert ISO 3166 country code to name Javascript","Z19225":"US ISO name","Z19226":"US official name","Z19227":"Antarctica","Z19228":"Spanish plural Javascript","Z19229":"Spanish subject generator","Z19230":"Spanish Subject Generator Javascript","Z19231":"10 female manzanas is las manzanas","Z19232":"Count lexeme forms in lexeme","Z19233":"JavaScript implementation","Z19234":"Count matching lexeme forms in lexeme","Z19240":"JavaScript implementation of Z19234","Z19241":"first matching representation string from lexeme","Z19242":"JavaScript implementation of Z19241","Z19243":"Select lexeme forms from lexeme","Z19244":"JavaScript implementation of Z19243","Z19245":"L-en \"dog\" has one plural form","Z19246":"L-en \"syllabus\" has two plural forms","Z19247":"L-en \"syllabus\" has three forms in total","Z19248":"number of forms in lexeme","Z19249":"count all forms in lexeme, composition","Z19250":"L-en \"artichoke\" has two forms","Z19251":"L-en \"dog\" has one singular lexeme form","Z19252":"singular form of lexeme as monolingual text","Z19253":"singular form of L-en \"dog\" is \"dog\"","Z19254":"first monolingual text from multilingual text","Z19255":"extract [en]\"dog\" from [[en]\"dog\",[en-au]\"dingo\"]","Z19256":"first monolingual text, composition","Z19257":"singular form of lexeme, composition","Z19258":"plural of goose is geese","Z19259":"plural nominative of ആപ്പിൾ is ആപ്പിളുകൾ","Z19260":"plural form of lexeme as monolingual text","Z19261":"plural form of lexeme, composition","Z19262":"plural of L-en \"dog\" is \"dogs\"","Z19263":"first plural of L-es \"amigo\" is \"amigos\"","Z19264":"L-es \"amigo\" has four forms","Z19265":"Count lexeme senses in lexeme","Z19266":"Javascript implementation of lexeme senses count","Z19267":"same Wikidata property reference","Z19268":"same Wikidata property reference, composition","Z19269":"P31 = P31","Z19270":"Count of senses of L-en university","Z19271":"languages of lexeme form","Z19272":"languages of multilingual text","Z19273":"two languages [\"en\", \"en-au\"] in multilingual text","Z19274":"languages of multilingual text composition","Z19275":"languages of lexeme form, composition","Z19276":"languages of lexeme","Z19277":"L \"visualize/visualise\" has [\"en\", \"en-gb\"]","Z19278":"languages of lexeme, composition","Z19279":"multilingual text to list of monolingual texts","Z19280":"multilingual text to list of monolingual, composit","Z19281":"split multi into list of two mono variants","Z19282":"list of lexeme senses from lexeme","Z19283":"list of lexeme senses from L, composition","Z19284":"count lexeme senses in lexeme, composition","Z19285":"lexeme reference of lexeme","Z19286":"lexeme reference of lexeme, composition","Z19287":"same lexeme reference","Z19288":"same lexeme reference, composition","Z19289":"L \"visualize\" = L \"visualize\" (L11)","Z19290":"L1122 \"dog\" = L1122 \"dog\"","Z19291":"L\"dog\" != L\"cat\"","Z19292":"3^3=27 (Z17271)","Z19293":"lemmas of lexeme","Z19294":"lemmas of lexeme, composition","Z19295":"language of lexeme","Z19296":"language of lexeme, composition","Z19297":"language of L-en \"dog\" is English","Z19298":"lexical category of lexeme","Z19299":"lexical category of lexeme, composition","Z19300":"claims from lexeme","Z19301":"claims from lexeme, composition","Z19302":"lexeme forms from lexeme","Z19303":"lexeme forms from lexeme, composition","Z19304":"subject of Wikidata statement","Z19305":"subject of Wikidata statement, composition","Z19306":"predicate of Wikidata statement","Z19307":"predicate of Wikidata statement, composition","Z19308":"value of Wikidata statement","Z19309":"value of Wikidata statement, composition","Z19310":"Wikidata lexeme reference string","Z19311":"\"L5561\" ↤ function (L5561)","Z19312":"same multilingual text","Z19313":"same multilingual text, composition","Z19314":"identical multis each with text in en and en-au","Z19315":"lemmas of L-en \"dog\" are [en-\"dog\"]","Z19316":"same Wikidata item reference","Z19317":"same Wikidata item reference, composition","Z19318":"Q1 != Q42","Z19319":"Q42 == Q42","Z19320":"L-en \"dog\" is lexical noun (Q1084)","Z19321":"L-en \"dog\" contains claim from Collins OED: \"dog\"","Z19322":"Wikidata lexeme reference String, composition","Z19323":"\"L1122\" ↤ dog (L1122)","Z19325":"count substrings, JavaScript, loop-based, naive ","Z19326":"lemmas of lexeme, Python","Z19327":"lemmas are a Multilingual text","Z19328":"chien (L241) has forms: chien (F1) and chiens (F4)","Z19329":"noun lexeme is endocentric compound? composition","Z19330":"is noun lexeme?","Z19331":"(L32212) båt -> true","Z19332":"is noun lexeme? python","Z19333":"is noun lexeme? composition","Z19334":"Hindi cardinal","Z19335":"Hindi cardinal, python","Z19336":"0 = शून्य, Hindi","Z19337":"1 = एक, Hindi","Z19338":"101010101101, Hindi cardinal","Z19339":"error when number too large, Hindi cardinal","Z19340":"English lexeme plural matches pluralised singular","Z19341":"English plural test, composition","Z19342":"\"dog\" -> \"dogs\" successfully","Z19343":"Hindi ordinal","Z19344":"D'Hondt method","Z19345":"D'Hondt method (python)","Z19346":"Simple election result test","Z19347":"Only one party","Z19348":"item N from referenced list","Z19349":"1st item in the keys of Sign is a Key","Z19350":"item N from referenced list, composition","Z19351":"2nd form of dog (L1122) is the same as L1122-F2","Z19352":"Object has this Type","Z19353":"True has Boolean as its Type","Z19354":"Object has this Type, composition","Z19355":"svenska (L46376): language Type: Natural language","Z19356":"gooey → gooier","Z19357":"grey → greyer","Z19358":"bluey → bluier","Z19359":"plaguy → plaguier","Z19360":"az-vowel harmony","Z19361":"item 1 from multilingual text, composition","Z19362":"treey → treeier","Z19363":"Superlative of 'gooey' is 'gooiest'","Z19364":"Superlative of 'bluey' is 'bluiest'","Z19365":"Superlative of 'plaguy' is 'plaguiest'","Z19366":"Superlative of 'treey' is 'treeiest'","Z19367":"chequy → chequier","Z19368":"expensive → more expensive","Z19369":"Superlative of 'chequy' is 'chequiest'","Z19370":"English Numerical Prefix Latin","Z19371":"unicycle","Z19372":"millipede","Z19373":"English Numerical Prefix Latin Javascript","Z19374":"(JS) Remove repeated characters","Z19375":"(PY) Remove repeated characters","Z19376":"Banana becomes ban","Z19378":"last date of a given day in a month, Python","Z19379":"hardened form in Breton, JavaScript","Z19380":"simplify SMILES string","Z19381":"SMILES string, remove unneeded brackets","Z19382":"SMILES string, remove nested brackets","Z19383":"SMILES string, Multiple Chains","Z19384":"wrap with HTML tag","Z19385":"simple HTML tag wrap composition","Z19386":"Add <p> around text test","Z19387":"az-last vowel","Z19388":"az-last vowel in JavaScript","Z19389":"az-vowel harmony in JavaScript","Z19390":"horsey → horsier","Z19391":"Superlative of 'horsey' is 'horsiest'","Z19392":"roguey → roguier","Z19393":"Superlative of 'roguey' is 'roguiest'","Z19394":"Javascript English comparative adjective","Z19395":"expensive (L6080) has no comparative form","Z19396":"\"abc123\" matches \"^([a-z0-9]{5,})$\"","Z19397":"\"abc1\" does not match \"^([a-z0-9]{5,})$\"","Z19398":"\"Hello, world\" matches \"world\"","Z19399":"Simplify SMILES string, python","Z19400":"plural form of lexeme as monolingual string, JS","Z19401":"first plural of L-de \"Baum\" is \"Bäume\"","Z19402":"string-string typed map test","Z19403":"wrap with XML tag and attributes","Z19404":"wrap with XML tag and attributes, Python","Z19405":"wrap with HTML tag and attributes","Z19406":"write with HTML tag and attributes, composition","Z19407":"wrap text with <p> without attributes","Z19408":"wrap text with <p> and attributes","Z19409":"Javascript first natural number is in closed inter","Z19410":"Python first natural number is in closed interval","Z19411":"is square-free, javascript","Z19412":"SI Unit demo function","Z19413":"Javascript is FEN field 6","Z19414":"Javascript signed bitwise not","Z19415":"Luxembourgish cardinal javascript","Z1940":"Lango","Z1941":"Mansi","Z1942":"Batak Angkola","Z1943":"Batak Dairi","Z1944":"Sahap Simalungun","Z1945":"cakap Karo","Z1946":"Batak Alas-Kluet","Z19416":"Distance between Earth and Mars on a specific date","Z19417":"Distance between Earth and Mars, python","Z19418":"to HTML list item","Z19419":"to HTML list item, composition","Z19420":"HTML list item test","Z19421":"to HTML ordered list","Z19422":"to HTML ordered list, Python","Z19423":"to HTML list item, Python","Z19424":"to HTML ordered list, Javascript.","Z19425":"to HTML list item javascript.","Z19426":"Swedish noun, first declension, definite sing-, JS","Z19427":"Collatz conjecture function, javascript.","Z19428":"Indo-Arabic to Arabic numerals Javacript","Z19429":"number of prime divisors Javascript","Z19430":"Breton conjugation present conditional 2nd p... JS","Z19431":"natural number to octal (without prefix) JS","Z19432":"Lightness of Colour, Javascript","Z19433":"German noun, -(e)n declension JS ","Z19434":"Dutch plural Javascript","Z19435":"Base64 decode Javascript","Z19436":"sign to Gregorian era, javascript.","Z19437":"If is Boolean, javascript","Z19438":"number of digits, Javascript","Z19439":"string identity javascript","Z19441":"Mulberry 32 Random","Z19442":"Mulberry 32 Javascript","Z19443":"10, 20, 30 = 25","Z19444":"1,2,3 = 3","Z19445":"1000000000, 2000000000, 3000000000 =  2971373630","Z19446":"Double run Mulberry 32","Z19447":"Run function twice","Z19448":"10, 25, 30 = 27","Z19449":"Additive colours, javascript.","Z1947":"Magindanawn","Z1948":"Mampruli","Z1949":"Yerwa Kanuri","Z1950":"Anufo","Z19453":"language of lexeme, Javascript","Z19454":"Language of lexeme, python","Z19455":"replace at end javascript","Z19456":"\"aVeryLongTextWithLotsOfWords\" is camel case","Z19459":"Different length strings result in -1","Z19460":"Xorshift","Z19461":"Xorshift JS","Z19462":"is it a valid ISO 6709 code Python","Z19463":"Random boolean","Z19464":"Random bool composition","Z19465":"1 is true","Z19466":"10000 is false","Z19467":"Light Year to Parsec","Z19468":"Light Year to Parsec python","Z19469":"Light Year to Parsec composition","Z19470":"Base32 Encode JS","Z19471":"2 light years","Z19472":"Is or Has Malayalam Character","Z19473":"English and Malayam text","Z19474":"English text","Z19475":"Is or Has Malayam Character Python","Z19476":"Is or Has Malayalam Character, python","Z19477":"A+ and O+ are compatible","Z19478":"cost of car journey javascript","Z19479":"is it a different day in different time zones?","Z19480":"Javascript different day different time zones.","Z19481":"Today is tomorrow New Zealand","Z19482":"Today is not tomorrow New Zealand","Z19483":"Python different day different time zone","Z19484":"Malayalam Cardinal","Z19485":"Malayalam Cardinal Python","Z19486":"Mass replace given pipe separated string.","Z19487":"Mass replace given pipe separated string python.","Z19488":"Malayalam Alphabet","Z19489":"Parse JSON to List","Z19490":"Javascript Parse JSON to List","Z19491":"[\"a\", \"b\", \"c\", \"d\"] = [a, b, c, d]","Z19493":"14 = \"പതിനാല്\"","Z19494":"9 = \"ഒന്‍പത്\"","Z19495":"8 = \"എട്ട്\"","Z19496":"25 = \"ഇരുപത്തിയഞ്ച്\"","Z19497":"81 = \"എണ്‍പത്തിയൊന്ന്\"","Z19498":"234 = \"ഇരുന്നൂറ്റി മുപ്പത്തിനാല്\"","Z19499":"sort English adjectives","Z19500":"Big fat greek","Z19501":"Three nice little new sqaure blue Italian ceramic","Z19502":"beautiful tall thin round old black Japanese metal","Z19503":"Natural numbers in Malayalam Script","Z19508":"Natural numbers in Malayalam Script Python","Z19509":"minimum of natural number list","Z19510":"(#) sort list by increasing metric function","Z19511":"sort [\"abc\",\"de\",\"f\"] by increasing string length","Z19512":"priority level of English adjective","Z19513":"\"green\" is a colour, so priority 7","Z19514":"Simple tense of verb","Z19515":"Javascript tense verb","Z19516":"Future tense of പോകുക is L-ml പോകും","Z19517":"Past tense of Scrutinize is L-en Scrutinized","Z19518":"[] -> 0","Z19519":"[3] -> 3","Z19520":"[3,3] -> 3","Z19521":"[3,2] -> 2","Z19522":"[2,3] -> 2","Z19523":"[3,2,2,2,2,2,2,2,12302] -> 2","Z19524":"Composition for Simple tense of verb","Z19525":"-0 is also zero","Z19526":"JS minimum natural number","Z19527":"Python simple tense of verb","Z19528":"using same algorithm as Z19526","Z19529":"minimum of natural number list, composition","Z19530":"Return monolingual text from grammatical features","Z19531":"JS monolingual text from gramatical features","Z19532":"Fly's past participle is L-en flown","Z19533":"Malayalam Verb to Agent Noun","Z19534":"Python Malayalam Verb to Agent Noun","Z19535":"Map function with constant arguments","Z19536":"index of element on list with metric value","Z19537":"the 3rd item on the list has a string length of 2","Z19538":"index with metric value, composition","Z19539":"#1 is the first element with string length of 3","Z19540":"no element has string length 2, return 0","Z19541":"കളയുക (Throw away)","Z19542":"അവതരിപ്പിക്കുക (Present)","Z19543":"അഭിനയിക്കുക (Act out)","Z19544":"sort by metric function, composition","Z19545":"sort empty list","Z19546":"sort [\"hello\"] by string length","Z19547":"Minimum of N-list, reduce composition","Z19548":"Abracadabra","Z19549":"Mass replace given 2 lists","Z19550":"Interlace typed lists","Z19552":"Interlace Typed lists JS","Z19556":"Is year US election year","Z19557":"Is year US election year (python)","Z19558":"Too early (1776)","Z19559":"On border but valid (1788)","Z19560":"True exception (1789)","Z19561":"False Exception (1793)","Z19562":"4th element of [2,4,6,8] has a cube of 512","Z19563":"string lengths of [\"hello\",\"world\"] = [5,5]","Z19564":"Integer sqaure root, Javascript","Z19565":"Triple if","Z19566":"Triple if, composition","Z19567":"[F,F,\"a\",\"b\",\"c\"] = \"c\"","Z19568":"[T,F,\"a\",\"b\",\"c\"] = \"a\"","Z19569":"[F,T,\"a\",\"b\",\"c\"] = \"b\"","Z19570":"[T,T,\"a\",\"b\",\"c\"] = \"a\"","Z19571":"(sample) validator for floats","Z19572":"float validator, composition","Z19573":"NaN is valid","Z19574":"0.0 is valid","Z19575":"globglogabgalab1.0 is not valid","Z19576":"+1.0e10 is valid","Z19577":"-3.21E-10 is valid","Z19578":"\"1+1\" is not valid","Z19579":".999 is valid","Z19580":"1e6 is valid","Z19581":"1 is valid","Z19582":"0 is valid","Z19583":"(sample) validate rational number","Z19584":"Validate rational number, JS","Z19585":"Cannot divide by 0","Z19586":"equal Typed pairs","Z19587":"[\"Hello\",\"World\"] is equal to itself","Z19588":"[(N)1,\"first\"] is equal to itself","Z19589":"[(N)1,\"first\"] is not equal to [\"first\",(N)1]","Z19590":"check that Typed pairs have equal types and vals","Z19591":"first of [(N)1, \"first\"] is (N)1","Z19592":"second of [\"first\", (N)1] is (N)1","Z19593":"\"Hä, Bierbrei? Bäh!\"","Z19594":"[(N)3, \"third\"] = [(N)3, \"third\"]","Z19596":"Districts in Kerala","Z19597":"lexical category of lexeme, python","Z19598":"Rotate 2D array 90 degrees","Z19599":"Rotate 2D array 90 degrees python","Z19600":"W/ numbers","Z19601":"N-ifs","Z19602":"First true","Z19603":"First true, python","Z19604":"[F,T,F] -> 2","Z19605":"N-ifs using First True (Z19602)","Z19606":"[F,T,F,\"A\",\"B\",\"C\",\"D\"] = \"B\"","Z19607":"Properly tense every English verb","Z19608":"[F,F,F] -> 0","Z19609":"[F,F,F,\"A\",\"B\",\"C\",\"D\"] = \"D\"","Z19610":"Triple if with n-ifs","Z19611":"run until unary function matches target","Z19612":"turn to superscript","Z19613":"123 → ¹²³","Z19614":"abc → ᵃᵇᶜ","Z19615":"map all characters using an object","Z19616":"qqq -> ᵠᵠᵠ","Z19617":"Python's builtin min()","Z19618":"is sentence grammatically correct (en)","Z19623":"Closest city to point","Z19627":"if (integer), javascript","Z19628":"Composition, all true","Z19629":"Standard Arabic ordinal","Z19630":"Standard Arabic ordinal, python","Z19631":"Standard Arabic ordinal, input=0","Z19632":"Standard Arabic ordinal, input=21","Z19633":"Standard Arabic ordinal, input=1025","Z19635":"binary to int, composition","Z19636":"hexadecimal to natural number, composition","Z19637":"Current time, with natural number input","Z19638":"Current time, using Date.now","Z19639":"Random number, with additional natural number","Z19641":"Is point in polygon?","Z19642":"Is point in polygon? python","Z19643":"Cheyenne is in Wyoming","Z19644":"NYC is not in Wyoming","Z19645":"add periods between each triplet","Z19646":"123 stays","Z19647":"1234 → 1.234","Z19648":"1234567890 → 1.234.567.890","Z19649":"paper -> paperak","Z19650":"Singular ergative with soft r","Z19651":"gauza -> gauzak","Z19652":"Kafka -> Kafkak","Z19653":"Iterate through all characters","Z19654":"Add chars every n chars","Z19655":"Add chars every n chars Python","Z19656":"[\"ABCDEF\",1,\".\"] = \"A.B.C.D.E.F\"","Z19657":"Using [[WF:BROAD]]er function","Z19658":"convert a language object to a Russian adverb","Z19660":"Z1442/дуала > на языке дуала","Z19661":"Echo (string)","Z19662":"Echo string, javascript","Z19663":"echo \"Hello, world!\"","Z19664":"default digit string for unconfigured lang (dz)","Z19665":"Using Echo","Z19666":"a(4) = 2","Z19667":"JS 1-2 Thue-Morse sequence","Z19669":"en \"Hello, world!\" is valid, returns identical","Z19670":"2^(2-1) = 2","Z19671":"10^(10-1) = 1000000000","Z19672":"2^(2-2) = 1","Z19673":"10^(10-2) = 100000000","Z19674":"first digit of sqrt(2) is 1","Z19675":"10th digit of sqrt(2) is 2","Z19676":"primorials for prime numbers 11 to 47","Z19677":"Rational number","Z19678":"Python converter from Rational number","Z19679":"add rational numbers","Z19680":"Fraction +","Z19681":"Python Fraction to Rational number","Z19682":"truncate a rational number","Z19683":"7/2 -> 3","Z19684":"-14/3 -> -4","Z19685":"floor if > 0 else ceil","Z19686":"same Rational number","Z19687":"1/2=1/2","Z19688":"0/1=0/1","Z19689":"-2/4=-3/6","Z19690":"2/3 != -2/3","Z19691":"2/3 != 3/2","Z19692":"Python Fraction ==","Z19693":"1/2+2/8=3/4","Z19694":"negate rational number","Z19695":"negate q, python","Z19696":"0/1 stays","Z19697":"1/2 becomes -1/2","Z19698":"-2/8 becomes 2/8 or 1/4","Z19699":"subtract rational numbers","Z19700":"Negate second argument and multiply","Z19701":"JavaScript convert from Rational Number","Z19702":"JavaScript convert to Rational Number","Z19703":"using integer division for BigInt","Z19704":"manual addition in JS","Z19705":"3/9 + 2/6 = 2/3","Z19706":"multiply rational numbers","Z19707":"Python multiply fractions","Z19708":"divide rational numbers","Z19709":"invert second argument, multiply","Z19710":"Python divide","Z19711":"invert rational number","Z19712":"(1/2)^-1 = 2/1","Z19713":"(-4/3)^-1 = -3/4","Z19714":"Python, to the -1 power","Z19715":"(1/1)/(2/1) = 1/2","Z19716":"inverse, composition divide 1/this","Z19717":"sign of rational number","Z19718":"+1/2 is positive","Z19719":"JS return sign from type converter","Z19720":"-3/4 is negative","Z19721":"0/3 is neutral","Z19722":"numerator of simplified rational number","Z19723":"simplified numerator, javascript","Z19724":"denominator of simplified rational number","Z19725":"numerator of 3/4 is 3","Z19726":"numerator of -3/4 is 3","Z19727":"(simplified) numerator of 2/4 is 1","Z19728":"denominator, JS key 2","Z19729":"1/2 -> 2","Z19730":"-2/3 -> 3","Z19731":"2/8 -> 4","Z19732":"simplified numerator, gcd composition","Z19733":"numerator of unsimplified rational number","Z19734":"numerator of (1/2) is 1","Z19735":"unsimplified numerator of 2/4 is 2","Z19736":"max of rational numbers","Z19737":"unsimplified numerator, value by key composition","Z19738":"2/3, 4/3 -> 4/3","Z19739":"Python max()","Z19740":"min of rational numbers","Z19741":"simplified numerator, python","Z19742":"Python, min()","Z19743":"invert, direct composition","Z19744":"Integer as Rational number","Z19745":"invert, javascript switch key K1 and K2","Z19746":"(6/9)^-1 ~~ 3/2","Z19748":"5 -> 5/1","Z19749":"-2 to -2/1","Z19750":"same rational number, javascript","Z19751":"Greater than (rational numbers)","Z19752":"Greater than or equal to (rational numbers)","Z19753":"Less than (rational numbers)","Z19754":"Less than or equal to (rational numbers)","Z19756":"2/3 is greater than -2/3","Z19757":"2/3 is not greater than 2/3","Z19758":"2/3 is not greater than 4/3","Z19759":"Python >","Z19760":"2/3 is greater than or equal to -2/3","Z19761":"2/3 is greater than or equal to 2/3","Z19762":"2/3 is not greater than or equal to 4/3","Z19763":"Python >=","Z19764":"Python <","Z19765":"Python <=","Z19766":"2/3 is not less than -2/3","Z19767":"2/3 is not less than 2/3","Z19768":"2/3 is less than 4/3","Z19769":"error returned if number is too large","Z19770":"2/3 is not less than or equal to -2/3","Z19771":"2/3 is less than or equal to 2/3","Z19772":"2/3 is less than or equal to 4/3","Z19773":"4/7 - 5/21 = 1/3","Z19774":"777777777777777777777 / 7","Z19775":"999999999999999999999 / 9","Z19776":"111111111111111111111 / 7","Z19777":"+ 111111111111111111111 / 7 is positive","Z19778":"sign of q, value by key K1","Z19779":"7 / 111111111111111111111 denominator","Z19780":"python fraction denominator","Z19781":"two ratios with very large denominators are not =","Z19782":"similar large denominators","Z19783":"large similar denominators not >=","Z19784":"large similar denominators, <","Z19785":"large similar denominators, <=","Z19786":"negate -1/111111111111111111111","Z19787":"invert sign, keep other keys, composition","Z19788":"(-1/3)*(-2/5) = +2/15","Z19789":"777777777777777777777 / 7 unsimplified","Z19790":"777777777777777777777","Z19791":"(1+2)/777777777777777777777","Z19792":"(2-1)/777777777777777777777","Z19793":"(1-2)/777777777777777777777","Z19794":"python q1-q2","Z19795":"multiply rationals, composition","Z19796":"10^21 / (10^21 - 1)","Z19797":"compare similar large denominators","Z19798":"large similar denominators, min","Z19799":"negative large similar denominators, min","Z19800":"limit denominator","Z19801":"python limit_denominator","Z19802":"22/7 is an approximation to pi","Z19803":"(10^21 - 1) / (10^21)","Z19804":"1/14 is half way to 1/7, but just as close to 0","Z19805":"-1/14 also rounds toward 0 instead of 1/7","Z19806":"is rational number an integer","Z19807":"is q in Z, composition of denominator=1","Z19808":"-6/2 is an integer","Z19809":"3/1 is an integer","Z19810":"99/9 is an integer","Z19811":"0/2 is an integer","Z19812":"(10^21 - 1)/10^21 is not an integer","Z19813":"is q in Z, python .denominator==1","Z19814":"nearest rational with specified denominator","Z19815":"pi with denominator 10 is 31/10","Z19816":"pi with denominator 100 simplifies to 157/50","Z19817":"python Fraction & round","Z19819":"1/14 is half way between 0 and 1/7, rounds to 0","Z19820":"-1/14 is halfway between 0 and -1/7 rounds to 0","Z19821":"1/10 is half way to 1/5, rounds to 0","Z19822":"9/10 with denominator 2 simplifies to 1/1","Z19823":"11/10 with denominator 5 rounds to 6/5","Z19825":"unsimplified 22/20 should round the same as 11/10","Z19826":"multiply rational by natural number","Z19827":"Proposed renderer for Rational number","Z19828":"(1/2) * 5 = 5/2","Z19829":"(1/2) * 4 = 2/1","Z19830":"multiply q by n, composition","Z19831":"multiply q*n, python","Z19832":"render rational number, composition","Z19833":"average of two rationals","Z19834":"3/4","Z19835":"average of 0 and 3 is 3/2","Z19836":"−8/10","Z19837":"average of -1 and 1 is 0","Z19838":"0/1","Z19839":"average rationals, composition of add and /2","Z19840":"python q1+q2 / 2","Z19841":"rational to nearest integer, even integer tiebreak","Z19842":"1/2 rounds to 0","Z19843":"1/4 rounds to 0","Z19844":"-4/3 rounds to -1","Z19845":"3/2 rounds to 2","Z19846":"python round()","Z19847":"3/4 rounds to 1","Z19848":"rational from integer numerator and denominator","Z19849":"(+3)/(+4) = 3/4","Z19850":"q from n1/n2 python Fraction(n1,n2)","Z19851":"(-3)/(-4) = 3/4","Z19852":"(+3)/(-4) = -3/4","Z19853":"(0)/(+4) = 0/1","Z19854":"rational from Z numerator and N denominator","Z19855":"python Fraction(z,n)","Z19856":"(-1)/2 = -1/2","Z19857":"nearest rational with denominator, composition","Z19858":"format [sign, numerator, denominator] as string","Z19859":"format rational string, JS","Z19860":"(+,1,2) = \"1/2\"","Z19861":"(−,8,10) = \"−8/10\"","Z19862":"denominator of unsimplified rational number","Z19863":"unsimplified denominator, composition by key","Z19864":"(2/4) -> 4","Z19865":"rational render, composition of code formatter","Z19866":"proposed parser for rational number","Z19867":"\"1/2\" as rational","Z19868":"\"-1/2\" as rational","Z19869":"\"−1/2\" as rational","Z19870":"\"99/9\" as rational (unsimplified)","Z19871":"\"(-1)/(-2)\" as rational","Z19872":"\"(-1)/2\" as rational","Z19873":"\"0\" as rational","Z19874":"\"0/1\" as rational","Z19875":"\"0/(-2)\" as rational","Z19876":"\"2\" as rational","Z19877":"\"123\" as rational","Z19878":"\"-123\" as rational","Z19879":"\"0.8\" as rational","Z19880":"\"-0.75\" as rational","Z19881":"\"-0\" as rational","Z19882":"\"-0.33333\" as rational","Z19883":"\"7,5\" as rational","Z19884":"mixed number: –1 2/3 = –5/3","Z19885":"-(1/2) as rational","Z19886":"Split / and return natural numbers, removing -","Z19888":"\"-2/3\" gives [2,3]","Z19889":"Only parse ints and (im)proper fractions","Z19891":"86,42% = 8642/10000 (not 4321/5000)","Z19892":"same Rational number object","Z19893":"7/42 === 7/42 (not 1/6)","Z19894":"same Rational number representation, composition ","Z19895":"not (7/42 === 1/6)","Z19896":"Create rational number from list and sign","Z19897":"not ( +1/6 == -1/6 )","Z19899":"Composition, cleaner","Z19900":"same Rational number representation, if comp","Z19901":"sign of string representing rational number","Z19902":"\"1/2\" is positive","Z19903":"\"0\" represents neutral rational","Z19904":"\"-1/2\" is negative","Z19905":"\"−1/2\" is negative","Z19906":"\"(−1)/(−2)\" is positive","Z19907":"−0.5 is negative","Z19908":"\"-0\" is neutral","Z19910":"\"-2\" is negative","Z19911":"same Rational number object, list composition ","Z19912":"\"0/1\" is neutral","Z19913":"\"-0/1\" is neutral","Z19914":"Are rational numbers additive inverses?","Z19915":"same Rational number object, reify composition","Z19916":"1/3 and -1/3 are","Z19917":"0 and 0 are","Z19918":"1/2 and 1/2 are not","Z19919":"-2/4 and 1/3 are not","Z19920":"-2/4 and 1/2 are","Z19921":"Add and check if 0","Z19922":"Is rational number 0","Z19923":"0/1 is zero","Z19924":"sign of string representing q, python","Z19925":"0/2 is zero","Z19926":"-0/1 is zero","Z19927":"1/3 isn't zero","Z19928":"same Rational number object, inference composition","Z19929":"2/1 isn't zero","Z19930":"Composition, check numerator","Z19931":"Are rational numbers multiplicative inverse?","Z19932":"–3/999999999 === –3/999999999","Z19933":"unsimplified numerator of string rational","Z19934":"99/9 has unsimplified numerator 99","Z19935":"-0.75 has unsimplified numerator 75","Z19936":"\"86,42%\" numerator 8642","Z19937":"\"–1 2/3\" has numerator 5","Z19938":"\"123\" has numerator 123","Z19939":"\"(0)/(1)\" has numerator 0","Z19940":"\"1,000,000\" has numerator 1000000","Z19941":"(undefined) 3/0 is different from (undefined) 4/0","Z19942":"unsimplified numerator of q string, python","Z19943":"unsimplified denominator of string rational","Z19944":"\"99/9\" has denominator 9","Z19945":"\"-0.75\" has denominator 100","Z19946":"\"86,42%\" has denominator 10000","Z19947":"\"–1 2/3\" has denominator 3","Z19948":"unsimplified denominator of string, python","Z19949":"composition of underlying code helper functions","Z19950":"\"−1/2\" has numerator 1","Z19951":"\"–1 2/3\" is negative","Z19952":"Rational number as items of continued frac","Z19953":"exponentiate rational number","Z19954":"exponentiated rational number, python","Z19955":"2/1^3/1=8/1","Z19956":"25/4^1/2=5/2","Z19957":"18/2^18/9=81/1","Z19958":"1/2^-1/1=2/1","Z19959":"0/1^0/1=1/1","Z19960":"99/9^0/1=1/1","Z19961":"99/9^99/9=2567805035499/9","Z19962":"long denominator with separators","Z19963":"long numerator with separators","Z19964":"-999,999,999/1,000,000,000","Z19965":"True: (1/3)*(9/3) = 1/1","Z19966":"False: (3/4)*(-4/3) is -1/1","Z19967":"complementary probability","Z19968":"subtract (1/1 - probability)","Z19969":"1/4 -> 3/4","Z19970":"0 -> 1","Z19971":"1 -> 0","Z19972":"complementary probability, python","Z19973":"complementary probability, javascript","Z19974":"0/1 * 99/9 = 0/1","Z19975":"-3/5 * 1/1 = -3/5","Z19976":"1/2 * 2/1 = 1/1","Z19977":"average of -3/2 and -1/2 is -1/1","Z19978":"average of 1/2 and 1/3 is 5/12","Z19979":"0 -> 0/1","Z19980":"1/1 - 0/1 = 1/1","Z19981":"1/4 - 1/2 = -1/4","Z19982":"0/1 - (-1/4) = 1/4","Z19983":"(-1/2) - (-1/4) = -1/4","Z19984":"+1/4 is valid","Z19985":"neutral 0/1 is valid","Z19986":"-1/4 is valid","Z19987":"+4/3 is valid","Z19988":"-4/3 is valid","Z19989":"+2/2 is valid (but unsimplified)","Z19990":"+(0.1)/(0.2) has invalid natural numbers","Z19991":"neutral 1/2 is invalid","Z19992":"empty keys is invalid","Z19993":"empty sign is invalid","Z19994":"empty numerator is invalid","Z19995":"empty denominator is invalid","Z19996":"(0/1)^(6/7) = 0/1","Z19997":"2^(1/2) should be irrational","Z19998":"(-1)^(1/2) should be complex","Z19999":"(2/3)^(-2/1) = 9/4","Z20000":"Bayes' theorem conditional probability P(A|B)","Z20001":"Bayes', composition of multiply and divide","Z20002":"Bayes', python","Z20003":"A rare, B usually co-occurs but more common","Z20004":"A and B are both rare, but correlated","Z20005":"A and B are both common but never co-occur","Z20006":"Rational modulo","Z20007":"Python %","Z20008":"2/4%1/4=0","Z20009":"3/2%2/2=1/2","Z20010":"99/9%18/9=9/9","Z20011":"17/7%-2/7=-1/7","Z20012":"JS converter from Gregorian Year","Z20013":"Arabic Syriac to Latin month","Z20014":"Arabic Syriac to Latin month, Python impl","Z20015":"Arabic Syriac to Latin month, test input = أيلول","Z20016":"Type of 2/3 is Rational number","Z20017":"Arabic Syriac to Latin month, test input = تموز","Z20018":"Arabic Syriac to Latin month,  input = كانون الأول","Z20019":"–2/3 == –6/9 (object equality)","Z20020":"sort rational numbers","Z20021":"Python, using miracle sort","Z20022":"1/2,2/1 becomes 1/2,2/1","Z20023":"2/1,1/2 becomes 1/2,2/1","Z20024":"Arabic Latin to Syriac month","Z20025":"Arabic Latin to Syriac month, Python impl","Z20026":"Arabic Latin to Syriac month, test input = يناير","Z20027":"Arabic Latin to Syriac month, test input = أكتوبر","Z20028":"False: –2/3 === –28/42","Z20029":"strict equality, reified objects are equal objects","Z20030":"Type of L315:lexeme is Wikidata lexeme ","Z20031":"list’s Type is Monolingual text","Z20032":"floor of rational number","Z20033":"js, math.floor","Z20034":"floor(0/1) = 0","Z20035":"floor(1/1) = 1","Z20036":"multiply rational numbers, javascript","Z20037":"divide rational numbers, javascript","Z20038":"(2/3) / (5/7) = 14/15","Z20039":"(-1/2) / (-3/5) = +5/6","Z20040":"Bayes', javascript","Z20041":"Wikidata item reference ID string","Z20042":"\"Q111352\" from Q111352","Z20043":"Wikidata item reference ID string, composition","Z20044":"False: \"Q41\" from Q42","Z20045":"same Wikidata item reference, strict composition","Z20046":"Wikidata property id string","Z20047":"\"P5137\" ↤ P5137","Z20048":"Wikidata property id string, composition","Z20049":"same Wikidata property ref, strict composition ","Z20050":"composition, natural number division","Z20051":"floor(-1/2) = -1","Z20052":"floor(44/14) = 3","Z20053":"ceiling of rational number","Z20054":"ceil(0/1) = 0","Z20055":"ceil(1/1) = 1","Z20056":"ceil(-3/2) = -1","Z20057":"ceil(44/14) = 4","Z20058":"composition, floor divide integer","Z20059":"js, math.ceil","Z20060":"python, math.ceil","Z20061":"python, math.floor","Z20062":"floor of Rational number, floor divide composition","Z20063":"ceiling of rational, negate floor composition ","Z20064":"Average length of Lexeme's forms","Z20065":"is unit fraction","Z20066":"1/2 is unit fraction","Z20067":"-1/2 is not unit fraction","Z20068":"2/3 is not unit fraction","Z20069":"0/1 is not unit fraction","Z20070":"positive fraction and simplified numerator is 1","Z20071":"2/4 is equivalent to a unit fraction","Z20072":"-1/1 is not a positive unit fraction","Z20073":"python, numerator == 1","Z20074":"add resistances in parallel","Z20075":"2 ohm + 3 ohm + 6 ohm in parallel = 1 ohm","Z20076":"2 ohm in parallel = 2 effective ohm","Z20077":"2 + 8 ohms in parallel = 8/5 effective ohms","Z20078":"1/2 + 2/3 + 3/4 ohms in parallel = 6/29 eff. ohms","Z20079":"python, invert sum of reciprocals","Z20080":"sum the elements of a list of rational numbers","Z20081":"sum[1/2, 1/3, 1/6] = 1","Z20082":"sum[] = 0, rational numbers","Z20083":"sum[1/1, 2/1, 3/1] = 6/1","Z20084":"sum[1/2, -1/2] = 0","Z20085":"sum[1/2, -2/3] = -1/6","Z20086":"python, sum list of rational numbers","Z20087":"composition, invert sum of reciprocals","Z20088":"sum rational number list, recursive composition","Z20089":"reduce (list only)","Z20090":"reduce –2/3, 3/5] with add rational numbers: –1/15","Z20091":"left fold unless []","Z20092":"right fold with add rationals unless empty (=> 0)","Z20093":"100000000000000000000-1","Z20094":"Binomial probability mass function","Z20095":"single trial matches individual probability","Z20096":"single trial failure is (1-theta)","Z20097":"binomial probability, composition","Z20098":"1 success from 2 with 0.9 chance: 0.9 * 0.1 * 2","Z20099":"chance of exactly 5 heads from 10 fair coin flips","Z20100":"empty string when list is empty","Z20101":"[] defaults to –2/5","Z20102":"Q-sum: left fold with 1/0 default","Z20103":"multiply Q by N as n/1, composition","Z20104":"(–2/3) * 7 = –14/3","Z20105":"update hypothesis probability when cookie chosen","Z20106":"function undefined when P(B) = 0","Z20107":"(!) is error","Z20108":"(!) error, composition attempt","Z20109":"(!) Z1K1 is \"Z5\" javascript","Z20110":"7/0 returns an error","Z20111":"A is already known impossible","Z20112":"Rational number identity","Z20113":"–2/3 ↤ –6/9","Z20114":"Rational number identity, composition * 1","Z20115":"same Rational number, formal composition","Z20116":"Rational number object identity","Z20117":"Rational number object identity, echo composition","Z20118":"English Rational Number","Z20119":"-2/3 -> negative two-thirds","Z20120":"simplify, python return","Z20121":"simplify, javascript return","Z20122":"\"12,345\"=12345/1000 radix priority over separator","Z20123":"\"12,345,678\"=12345678/1","Z20124":"\"12 345\"=12345/1","Z20125":"\"12 345\" = 12345","Z20126":"English Rational Number, composition","Z20127":"1/2 -> one-half","Z20128":"0/1 -> zero-wholes","Z20129":"1/4 -> one-fourth","Z20130":"-2/4 -> negative two-forths","Z20131":"99/9 -> ninety-nine-ninths","Z20132":"English Rational Number from components","Z20134":"2/3 gives two-thirds","Z20135":"\"Italian\" is an origin, so priority 8","Z20136":"English Rational Number, with helper function","Z20137":"\"thickening\" is a purpose, so 11","Z20138":"\"brass\" is a material, so 9","Z20139":"\"three\" is a quantity, so 1","Z20140":"\"nice\" is an opinion, so 2","Z20141":"\"huge\" is a size, so 3","Z20142":"\"square\" is a shape, so 5","Z20143":"\"old\" is an age, so 6","Z20144":"\"oblate\" is a physical quality, so 4","Z20145":"\"analogue\" is a type (c.f. digital)","Z20146":"True: –6/8 === –6/8","Z20147":"strict object equality, composition (Q === Q)","Z20148":"0/3 -> zero-thirds","Z20149":"-66666/66666 -> negative sixty-six thousand ...","Z20150":"JS converter to Gregorian Year","Z20151":"Python converter from Gregorian Year","Z20152":"Python converter to Gregorian Year","Z20153":"is a string in | separated alternating lang string","Z20158":"is a district of Kerala State in Python","Z20159":"Gregorian year","Z20160":"Gregorian year to year number","Z20161":"2024 AD is 2024","Z20162":"500 BC is 500","Z20163":"if > 0 just return, else -1*year+1","Z20164":"Value by Key to get year","Z6040":"Wikidata statement rank","Z6041":"preferred","Z6042":"normal","Z6043":"deprecated","Z20165":"value by key index","Z20166":"same Gregorian year","Z20167":"Javascript ==","Z20168":"1 AD = 1 AD","Z20169":"1 AD != 1 BC","Z20170":"first Key of False is False","Z20171":"if >0 return year, else -1*year+1 in Python","Z20172":"next year","Z20173":"2025 follows 2024","Z20174":"332 BC follows 333 BC","Z20175":"value by key index, composition","Z20176":"X+1 Javascript","Z20177":"key 3 of –6/7 is 7","Z20178":"1BC is followed by 1AD","Z20179":"2BC is followed by 1BC","Z20180":"just add 1","Z20181":"is Gregorian year leap year?","Z20182":"is leap year, python %4 %100 %400 tests","Z20183":"2024 is a leap year","Z20184":"2000 is leap year","Z20185":"Gregorian era of Gregorian year","Z20186":"era of 60 BC is BC","Z20187":"era of 90 AD is AD","Z20188":"Gregorian era of year, composition, value by key","Z20189":"key 2 of 1066 CE is 1066","Z20190":"same Gregorian year, strict composition","Z20191":"same Gregorian year, object equality composition","Z20192":"Gregorian year as string (English)","Z20193":"Gregorian year as string, composition","Z20194":"🗿🗿🗿🗿🗿🗿","Z20195":"1 BC becomes \"1 BC\"","Z20196":"600 BC becomes \"600 BC\"","Z20197":"same Gregorian year, Python","Z20198":"String as Gregorian Year","Z20200":"\"512 BC\" gives 512 BC","Z20201":"\"512 BCE\" gives 512 BC","Z20202":"\"512 AD\" gives 512 AD","Z20203":"\"512 CE\" gives 512 AD","Z20204":"\"512\" gives 512 AD","Z20205":"\"-512\" gives 512 BC","Z20206":"rank of Wikidata statement","Z20207":"Value by key composition","Z20208":"Fetch value from nth claim from lexeme","Z20210":"L-en \"have\" is Q70235","Z20211":"\"5,120 BC\" gives 5120 BC","Z20212":"Does statement have predicate?","Z20213":"Wrapper for fetch lexeme","Z20215":"⚠️ 0 AD = 1 BC (in some encodings)","Z20216":"claims from L1122:dog include the 11th claim","Z20217":"L-fr \"trahir\" claims itself a group II verb","Z20219":"difference between Gregorian years","Z20220":"2000 to 2024 is 24 years","Z20221":"1 BC to 1 AD is 1 year","Z20222":"Gregorian year subtraction, javascript","Z20223":"Gregorian year subtraction, python","Z20224":"2024 to 2024 is 0 years","Z20225":"2024 to 1984 is -40 years","Z20226":"probability of union","Z20227":"probability of union, composition of + and -","Z20228":"1/2 + 1/2 - 1/4 = 3/4","Z20229":"P(A∪B), python + and -","Z20230":"P(A∪B), javascript","Z20231":"is verb lexeme?","Z20232":"is verb lexeme? composition","Z20233":"(L1052609) globo -> true","Z20234":"L9750:porter is in 1st group","Z527":"Unable to convert to canonical form","Z1951":"Sheshi Kham","Z20236":"Convert from Day of Roman Year, Javascript","Z20237":"\"Hello, world!\"+\"Hello|Hi|world|earth\"=\"Hi, earth\"","Z20238":"lexeme forms from lexeme, JavaScript","Z20239":"L31224:mensa has a list of forms (32)","Z20240":"display functions for Gregorian year","Z20241":"Display Gregorian year","Z20242":"display Gregorian year, composition from selector","Z20243":"\"2024 AD\" in English","Z20244":"select English display function for Gregorian year","Z20246":"300BC to 200AD is 499 years","Z20247":"200AD to 300BC is -499 years","Z20248":"1900 was not a leap year","Z20249":"5 BC was a leap year","Z20250":"2025 AD","Z20251":"fast leap check","Z20252":"1BC leaps","Z20253":"2025 will not be a leap year","Z20255":"2025 BC was a leap year","Z20256":"1582 was not a leap year","Z20257":"Gregorian year to ISO 8601 year integer","Z20258":"2024 is 2024","Z20259":"1 AD is 1","Z20260":"1 BC is 0","Z20261":"2 BC is -1","Z20262":"333 BC is -332","Z20263":"rely on internal conversion","Z20264":"use type conversion","Z20265":"if AD year, else 1-year","Z20266":"is integer divisible","Z20267":"123 is divisible by 3","Z20268":"0 is divisible by anything","Z20269":"7 is not divisible by 13","Z20270":"13 is not divisible by 7","Z20271":"-10 is divisible by 5","Z20272":"-18 is divisible by -9","Z20273":"is % === 0","Z20274":"x%y == 0","Z20275":"if %400 yes, if %100 no, else %4","Z20276":"using natural number divsibility","Z20277":"Is year (recorded) El Nino year","Z20278":"1911 was","Z20279":"1812 was too early to know","Z20280":"1911 BC was not","Z20281":"2023 was","Z20282":"2024 is not","Z20283":"2030 is in the future","Z20284":"N months after month, composition with add","Z20285":"Resolve string as object","Z20287":"Z10000(\"Hello, \", \"World!\")","Z20288":"Abstract reified True is True","Z20289":"🗿","Z20290":"starts on","Z20291":"Using Zeller's Congruence","Z20292":"2024 AD starts with Monday","Z20293":"2000 AD starts with Saturday","Z20294":"1900 AD starts with Monday","Z20295":"2023 AD starts with Sunday","Z20296":"1984 AD starts with Sunday","Z20297":"1776 AD starts with Monday","Z20298":"3000 AD starts with Wednesday","Z20299":"1 BC starts with Saturday","Z20300":"4 BC starts with Wednesday","Z20301":"2 AD starts with Tuesday","Z20302":"ends on","Z20303":"Composition of starts with","Z20304":"is leap year, first and last day composition","Z20305":"unless exception","Z20306":"unless exception, composition of if","Z20307":"Exception False, so \"not an exception\"","Z20309":"2024 ends on a Tuesday","Z20310":"ends on the same day unless it’s a leap year","Z20311":"starts on a, Python weekday for Jan 1st ","Z20313":"composition, the day before the start of next year","Z20314":"last year","Z20315":"last year, python -1","Z20316":"Javascript -1","Z20317":"before 2025 AD is 2024 AD","Z20318":"Before 1 AD is 1 BC","Z20319":"starts on day after end of previous year","Z20320":"Before 10 BC is 11 BC","Z20321":"Before 0 AD is 2 BC","Z20322":"Before 0 BC is 1 BC","Z20323":"Triangle of Power operation","Z20324":"composition, next/prev N times","Z20325":"next(next(Friday)) = Sunday","Z20326":"denominator zero, so \"undefined\"","Z20328":"2, 3, ? = 8","Z20329":"2, ?, 8 = 3","Z20330":"?, 3, 8 = 2","Z20331":"Wednesday+0 = Wednesday","Z20332":"Monday is four days before Friday","Z20333":"echo string unless matched, unless composition ","Z20334":"starts on, composition from ends on (same year)","Z20335":"use js Date","Z20337":"Convert to Day of Roman Year, Python","Z20338":"Convert to Day of Roman Year, Javascript","Z20339":"AD 0: same as 1 BC","Z20340":"L-bn \"আপনি\" is lexical personal pronoun (Q468801)","Z20341":"L-hi \"थोड़ा\" is lexical adjective (Q34698)","Z20342":"Day of Roman year","Z20343":"month from day of the Roman year","Z20344":"15 January is in January","Z20345":"value by key Z20342K1","Z20346":"return K1","Z20347":"Convert from Day of Roman calendar to Python","Z20348":"same Day of Roman Year","Z20349":"Javascript == on both keys","Z20350":"same day of Roman year, python ==","Z20351":"Composition with Object Equality","Z20352":"August 2 is August 2","Z20353":"return first key","Z20354":"25 December is in December","Z20355":"next day in a standard year","Z20356":"1 Jan is followed by 2 Jan","Z20357":"Day of Roman Year to Day number in year","Z20359":"January 15th is always the 15th day","Z20360":"December 31st is the 365th day in most years","Z20361":"December 31st is the 366th day in a leap year","Z20362":" Day number in year to Day of Roman Year","Z20364":"1 is January 1st","Z20365":"365 in non-leap year is 31 December","Z20366":"365 in leap year is 30 December","Z20367":"Move N dates","Z20369":"-1 in a leap year is December 30","Z20370":"367 in a leap year is January 1st","Z20371":"Day from Date + Year","Z20372":"1 January - 2 = 30 December","Z20373":"10 Feb + 18 = 28 Feb","Z20375":"10 Feb + 19 = 29 Feb (leap year)","Z20376":"10 Feb + 19 = 1 Mar (non leap year)","Z20377":"31 Dec + 1 = 1 Jan","Z20378":"(invalid) 0 Feb != 31 Jan","Z20379":"29 February != 1 March","Z20380":"is leap year, Gregorian Year composition","Z20381":"1300 AD a Julian leap, but not proleptic Gregorian","Z20382":"4000 AD leap, Herschel's proposal not yet accepted","Z20383":"\"0 AD\" gives 1 BC","Z20384":"\"-512 BC\" gives 512 BC?","Z20388":"day of month from date","Z20389":"day from key, composition","Z20390":"25 December is the 25th day of the month","Z20391":"integer to exact natural number or 0","Z20392":"Z to N with floor 0, composition","Z20393":"-3 -> 0","Z20394":"+3 -> 3","Z20395":"31 December is followed by 1 January","Z20396":"28 February is followed by 1 March (standard year)","Z20397":"next day in standard year, composition","Z20398":"30 April is followed by 1 May","Z20399":"next day in leap year","Z20400":"28 February is followed by 29 February","Z20401":"29 February is followed by 1 March","Z20402":"31 Dec is followed by 1 Jan","Z20403":"next day in leap year, composition","Z20404":"increase by N=1 days composition","Z20405":"increment N=1 days, composition","Z20406":"earlier in year","Z20407":"31 January is before 1 August","Z20408":"earlier in year, composition","Z20409":"10 February is before 29 February","Z20410":"28 February is not before 13 February","Z20411":"1 August is not before 31 January","Z20412":"is camel case in javascript","Z20413":"earlier in year, javascript","Z20414":"thisIs ATest is not camel case","Z20415":"earlier in year, python","Z20416":"2^100000","Z20417":"Compare day numbers","Z20418":"2^150000","Z20419":"2^150000 is even","Z20420":"Gregorian calendar date","Z20421":"day of the week","Z20422":"26 November 2024 was a Tuesday","Z20424":"Python converter from Gregorian calendar date","Z20425":"builtin weekday","Z20426":"English format Day of Roman Year","Z20428":"Dec 4 is 4 December","Z20429":"Aug 2 is 2 August","Z20430":"Same Gregorian calendar date","Z20431":"all 3 keys the same","Z20432":"26 November 2024 is 26 November 2024 ","Z20433":"26 November 100 BC is 26 November 100 BC","Z20434":"26 November 2024 isn't 27 November 2024 ","Z20435":"26 November 2024 isn't 26 December 2024 ","Z20436":"26 November 2024 isn't 26 November 2025","Z20437":"1 January 1000 isn't 1 January 1000 BC","Z20438":"JavaScript converter from Gregorian calendar year","Z20439":"JavaScript's Date.getDay()","Z20440":"next day","Z20441":"16 Jan 2001 was after Wikipedia day","Z20443":"Python converter to Gregorian calendar date","Z20444":"add datetime.timedelta","Z20445":"2 January 1000 BC is after 1 January 1000 BC","Z20446":"Remove invalid chars from Z13518K1","Z20448":"JavaScript converter to Gregorian calendar date","Z20449":"T380828 reproduction function","Z20450":"Reproduce T380828, Javascript.","Z20451":"Test to show error","Z20452":"is earlier in its month?","Z20453":"YYYY-12-16 is earlier in its month than YYYY-11-26","Z20454":"is earlier in its month, composition","Z20455":"is earlier in its month, Python","Z20456":"is earlier in the same month?","Z20457":"-12-25 < -12-26","Z20458":"False: same day","Z20459":"Is earlier in the same month, composition","Z20460":"False: same day (earlier month)","Z20461":"5 January is not in the same month as 6 December","Z20462":"Return self","Z20464":"⚠️ re-create bug or re-purpose","Z20465":"Basque ergative plural case declension","Z20466":"unibertsitate > unibertsitateek","Z20467":"Basque ablative animated plural","Z20468":"Basque directive allative inanimated","Z20469":"ablative inanimated singular basque","Z20470":"txakur -> txakurrek","Z20471":" Basque Directive allative Animated Singular","Z20473":"Basque inesive inanimated","Z20474":"paper -> paperek","Z20475":"Basque directive allative animated uncountable","Z20476":"Basque directive allative Animated plural","Z20477":"gauza -> gauzek","Z20478":"txakur -> txakurrerantz","Z20479":"txakur -> txakurrengandik","Z20480":"Basque allative animated singular","Z20481":"txori -> txoriengandik","Z20482":"paper -> paperetik","Z20483":"lagun -> lagunenganantz","Z20484":"Basque terminative allative animated uncountable","Z20485":"Basque terminative alliative animated singular","Z20487":"mediku -> medikuarenganantz","Z20488":"animalia -> animaliengandik","Z20491":"ikasle -> ikasleenganantz","Z20492":"akademia -> akademiatik","Z20493":"etxe -> etxetik","Z20495":"Basque terminative allative inanimated plural","Z20496":"txakur -> txakurrenganantz","Z20497":"inor -> inorenganaino","Z20498":"zuhaitz -> zuhaitzarenganaino","Z20499":"paper -> papererantz","Z20500":"paper -> paperenganantz","Z20501":"guraso -> gurasorenganantz","Z20502":"aita -> aitarenganantz","Z20504":"Hau -> Hauetaraino","Z20505":"txakur> txakurrarenganaino","Z20506":"oker / okerrerantz","Z20507":"alaba > alabarengainaino","Z20508":"etxe / etxerantz","Z20509":"Kale -> Kaleetaraino","Z20510":"presoner -> presonerarenganantz","Z20511":"Basque inesive animated singular","Z20512":"Basque allative inanimated singular","Z20514":"Hondartza -> Hondartzetaraino","Z20515":"Bilbo --- Bilbon","Z20516":"Arbela --- Arbelean","Z20517":"kale / kalerantz","Z20518":"tresor > tresorearenganaino","Z20519":"Ofizier > Ofizierenganantz","Z20520":"Arbel -> Arbeletaraino","Z20521":"ofizier","Z20522":"Taberna --- Tabernatan","Z20523":"Inesive animated singular - Basque","Z20524":"Etxe --- Etxeetan","Z20525":"aitona > aitonenganantz","Z20527":"Pisu --- Pisutan","Z20528":"txakur-> txakurrarenganantz","Z20529":"Plazer -> Plazeretaraino","Z20530":"Basque terminative allative inanimated singular","Z20531":"Ur --- Uretan","Z20532":"dendari -> dendariarenganatz","Z20533":"Txakur > Txakurrenganantz","Z20534":"Sua --- Sutan","Z20535":"-raino","Z20536":"Paper -> Paperetaraino","Z20537":"Paper - paperean","Z20538":"Plater -> Plateretaraino","Z20539":"Izar --- Izarretan","Z20540":"Maren>Marenenganaino","Z20541":"Plater --- Platerean","Z20542":"izaki-->izakiarengana","Z20543":"etxe > etxera","Z20544":"Eskola -> Eskoletaraino","Z20545":"Aitor -> Aitorrengan","Z20546":"paper-->paperarengana","Z20547":"autobus > autobusera","Z20548":"txakur-->txakurrarengana","Z20549":"ni>nireganaino","Z20550":"emakume-->emakumearengana","Z20551":"Erregina > Erreginarenganantz","Z20552":"Basque ablative singular (inanimated)","Z20553":"Azpeitia > Azpeitira","Z20555":"inor -> inorrengan","Z20556":"Iruñea > Iruñera","Z20557":"alaba-->alabarengana","Z20558":"ablative animated plural basque","Z20559":"Directive allative animated singular","Z20561":"NON KASUA","Z20563":"zeru > zerura","Z20565":"hondartza > hondartzara","Z1952":"Bamun (Bamu script)","Z1953":"Likpakpaanl","Z1954":"Min Dong Chinese (Traditional Han script)","Z1955":"Min Dong Chinese (Latin script)","Z20568":"setDate(getDate+1)","Z20569":"1 Feb 3000 BC follows 31 Jan 3000 BC","Z20570":"Switch eras","Z20571":"Testing function for Gregorian Calendar Date","Z20573":"Tic tac toe AI","Z20575":"clear best move","Z20577":"Safely eval python expression","Z20579":"4>3 becomes true","Z20580":"123+456 becomes 579","Z20581":"2*7+1=15","Z20582":"3^2=9","Z20583":"\"---------\", 3, \";)\" becomes \"---;)---;)---\"","Z20584":"rational from sign and natural numbers","Z20585":"direct construction composition","Z20586":"(-)(3)/(4) = -3/4","Z20587":"python embed in Fraction()","Z20588":"Gregorian year from components","Z20589":"AD + 32 = AD 32","Z20590":"direct construction of Gregorian year","Z20591":"Day of Roman year from components","Z20592":"January + 31 = January 31","Z20593":"direct construction of Day of Roman year","Z20594":"ikusmen -> ikusmenetik","Z20595":"ikusmen -> ikusmenetik","Z20596":"frantses -> frantsesetik","Z20597":"Intro for year in English","Z20598":"2023 intro","Z20599":"Intro for year in English composition via joining","Z20600":"parenthesize","Z20601":"hello -> (hello)","Z20602":"\"  \" -> (  )","Z20603":"text with space","Z20604":"empty -> ()","Z20605":"() -> (())","Z20606":"use join list of strings without delimiter","Z20607":"get names","Z20609":"English label of Z4 is \"Type\"","Z20610":"Generate year number of sequence string","Z20611":"Intro for year in English, Python","Z20612":"German indef noun phrase from noun and adjective","Z20613":"eine trockene Brezel","Z20614":"ein schöner Hut","Z20615":"agree adjective with noun","Z20616":"grammatical gender from Lexeme","Z20617":"Convert Arabic Hijri month name to a Number","Z20618":"dagbani possessive","Z20619":"Dagbani possessive, python","Z20620":"Hijri Arabic month to Number, impl in python","Z20621":"Hijri month to Number test, محرم","Z20622":"negate dagbani verb","Z20624":"Hijri month name to Number, javascript impl","Z20625":"100,000 random characters","Z20626":"100,000 random characters 2","Z20627":"100,000 random characters 3","Z20628":"Validate Day of Roman year","Z20630":"31 November -> 30 November","Z20631":"30 November -> 30 November","Z20632":"0 December -> 1 December","Z20633":"Baum in German is masculine","Z20634":"P36 statement has predicate P36","Z20635":"P1376 statement is no P36 statement","Z20636":"property = predicate of statement","Z20637":"is grammatical gender statement","Z20638":"P5185 statement is","Z20639":"P10338 statement is not","Z20640":"does statement have predicate P5185","Z20641":"map filter get claims","Z20642":"eine schöne Katze","Z20643":"is feminine grammatical gender","Z20644":"German Baum is not feminine","Z20645":"Croatian voda is feminine","Z20646":"French musique is feminine","Z20647":"grammatical gender from Lexeme same as [feminine]","Z20648":"Numbers of day in a month","Z20649":"Numbers of days on a month","Z20650":"August, 1982","Z20651":"February, 2000","Z20652":"February, 1990","Z20653":"Validate string to list of string options","Z20655":"\"Sold\" is closer to \"Sell\" than \"Buy\"","Z20656":"Intro for Day of Roman year in English","Z20658":"1 November","Z20659":"get dot product","Z20660":"get dot product, python","Z20661":"[1,2] • [3,4] = 11","Z20662":"Zip lists","Z20663":"zip, python","Z20664":"adjective to adverb rules (regular), python","Z20665":"Scottish Gaelic lenited form","Z20666":"Scottish Gaelic standard to lenited word, python","Z20667":"caraid -> charaid","Z20668":"dùn -> dhùn","Z20669":"caesar cipher (Dagbani alphabet)","Z20671":"\"yi\", 2 is \"ʒk\"","Z20672":"You become they in 21 moves","Z20673":"Gloss of Lexeme Sense as text of language","Z20675":"Green, the color, is L-dag dozim","Z20676":"sporag stays","Z20677":"Alasdair stays","Z20678":"Glaschu -> Ghlaschu (works for capitalisation)","Z20679":"Two Sum","Z20680":"Two Sum, python","Z20681":"[1,2,3], 5 = [2,3]","Z20682":"[3,2,1], 5 = [1,2]","Z20683":"N-ifs, loop until true","Z20684":"[F,F,\"a\",\"b\",\"c\"] = \"c\".","Z20685":"[T,T,T,T,T,T,T,1,1,1,1,1,1,1,2]","Z20686":"[F,F,F,F,F,F,F,1,1,1,1,1,1,1,2] = 2","Z20687":"occurrence of first almost equal substring","Z20688":"Python, with zfunction","Z20689":"\"bcdffg\" starts looking like \"abcdefg\" at 1","Z20690":"is void, python","Z20691":"is void, javascript","Z20692":"is valid pinyin","Z20693":"\"pīnyīn\" is valid pinyin","Z20694":"a string without diacritics is not valid pinyin","Z20695":"string with capitalizations is valid pinyin","Z20696":"string with spacing is valid pinyin","Z20697":"string with characters inbetween is not valid","Z20698":"German adjective and noun","Z20699":"kleine Katze","Z20700":"kleines Haus","Z20701":"adj agree w/ noun + noun","Z20702":"French indefinite noun phrase from noun, adjective","Z20703":"orange/orange -> \"une orange orange\"","Z20704":"Italian indefinite noun","Z20705":"une banane mûre","Z20706":"indefinite noun phrase in Persian","Z20707":"Spanish indef noun phrase from noun and adjective","Z20708":"abricot/bleu-violet -> un abricot bleu-violet","Z20709":"una banana matura","Z20710":"un avocado maturo","Z20711":"orange/bleu-violet -> une orange bleu-violet","Z20712":"un plat français","Z20713":"un plátano maduro","Z20714":"Dutch indefinite adjective noun phrase","Z20715":"Hindi indefinite niun","Z20716":"Composition attempt","Z20717":"test for feminine manzana","Z20718":"ek meetha kela","Z20719":"'Old banana' in Persian","Z20720":"returns 'een klein huis' in dutch","Z20721":"'Bad apple' in Persian","Z20722":"returns 'een kleine mening' in dutch","Z20723":"Bad hard-coded true","Z20724":"'old banana' ","Z20725":"dutch phrase 'klein huis'","Z20726":"spanish indef noun phrase composition","Z20727":"Intro for year in German","Z20728":"Intro for 2023 in German","Z20729":"translation of Z20611 to German","Z20730":"Nth day of week of month","Z20732":"Thanksgiving was on the 28th in 2024","Z20733":"how many days between two days in the Roman year","Z20734":"2 days between 28 Feb & 1 Mar (leap)","Z20735":"14 days from Jan 1 to Jan 15","Z20736":"1 day between 28 Feb & 1 Mar (non-leap)","Z20737":"from start to end it's 364 days in a common year","Z20738":"subtracting day number of first date from second date","Z20739":"compare all three keys","Z20740":"Is date palindrome","Z20741":"Distance between the Earth and the Moon on date","Z20742":"distance between Earth and Moon, python","Z20744":"Days until ","Z20746":"10 Dec 2024-11 Dec 2024 is 1","Z20747":"10 Dec 2024-9 Dec 2024 is -1","Z20748":"31 Dec 2024-30 Nov 2024 = 31","Z20749":"10 Dec 2024-10 Dec 2025=-365","Z20750":"Move N days","Z20751":"Move N days, Python","Z20752":"10 Dec 2024 + 1 = 11 Dec 2024","Z20753":"31 Dec 2024 - 31 = 30 Nov 2024","Z20754":"31 Dec 2024 + 100 = 10 Apr 2025","Z20756":"age","Z20758":"Today (as of creation)","Z20759":"Tomorrow (as of creation)","Z20760":"Intro to a person","Z20761":"Intro to a person's article in Dagbani Wikipedia, ","Z20762":"Intro to a person's article in Dagbani Wikipedia","Z20763":"Hijri Arabic month to a number","Z20764":"age, composition of year subtraction","Z20766":"2000 intro","Z20767":"intro for year (dagwiki)","Z20768":"(WIP) Intro for year in Dagbani, Python","Z20769":"catch error","Z20770":"date (dagwiki)","Z20771":"Date on Dagwiki, python","Z20772":"10 February 2024","Z20773":"date (enwiki)","Z20774":"date (enwiki), python","Z20775":"10 February 2024 is 10 February 2024","Z20776":"date (dewiki)","Z20777":"date (dewiki), python","Z20779":"config of functions for date","Z20780":"display date","Z20781":"display date, composition with selector ","Z20782":"date (enwiki, mdy)","Z20783":"date (enwiki, mdy), python","Z20784":"10 May 2024 is May 10, 2024","Z20785":"date (frwiki)","Z20786":"date (frwiki), python","Z20787":"10 May 2024 is 10 mai 2024","Z20788":"date (multilingual)","Z20789":"date (multilingual), python","Z20790":"10 May 2024 is 10/5/2024","Z20791":"date (huwiki)","Z20793":"10 May 2024 is 2024. május 10","Z20794":"date (eswiki)","Z20795":"date (eswiki), python","Z20796":"25 December 2024-25 December 2023 = 1","Z20797":"25 December 2024-25 December 4=2020","Z20798":"24 December 2024-25 December 2023=0","Z20799":"Test in BC era","Z20800":"5 BC to 33 AD","Z20801":"date (ruwiki)","Z20802":"date (ruwiki), python","Z20803":"10 May 2024 is 10 Май 2024","Z20804":"age, javascript","Z20805":"1 Jan 1 AD - 31 Dec 1 BC=1","Z20806":"Throw error","Z20807":"raise python","Z20808":"parse Gregorian Calendar Date","Z20809":"parse Gregorian Calendar Date, python","Z20810":"25-12-2024 is 25 December 2024","Z20811":"25/12/2024 is 25 December 2024","Z20812":"25 12 2024 is 25 December 2024","Z20813":"25 12 -4 is 25 December 3 BC","Z20814":"25/12/-4 is 25 December 3 BC","Z20815":"parse Gregorian Calendar Date, javascript","Z20816":"next day with weekday","Z20817":"next day with weekday, python","Z20818":"Thursday is one day after feinmas","Z20819":"Feinmas is already Wednesday","Z20820":"Feinmas '24","Z20821":"Feinmas '25","Z20822":"days until Feinmas '24","Z20823":"composition of Z20744 and Feinmas","Z20824":"incomplete but so it doesnt' time out","Z20825":"Floating point special value","Z20826":"solve Josephus problem","Z20827":"J(1)=1","Z20828":"J(1024)=1","Z20829":"positive zero","Z20830":"J(41)=19","Z20831":"negative zero","Z20832":"positive infinity","Z20833":"negative infinity","Z20834":"not a number","Z20835":"signaling not a number","Z20836":"quiet not a number","Z20837":"no special value","Z20838":"float64","Z20839":"Josehus python","Z20840":"JavaScript converter to float64","Z20841":"rounding down","Z20842":"BigInt(floor)","Z20843":"Float 1","Z20844":"float as string","Z20846":"Float 2","Z20847":"Float 3","Z20848":"JS converter from float64","Z20849":"add floats","Z20850":"same float64","Z20851":"JS ===","Z20852":"1.0+1.0=2.0","Z20853":"JS +","Z20854":"Rational number as float","Z20855":"rational number as float, javascript","Z20856":"percent completed","Z20861":"4.0+-1.0=3.0","Z20862":"pi","Z20863":"volume of a rectangular prism","Z20864":"3 multiplications","Z20865":"1, 1, 1 is just 1","Z20866":"0, 1.5, 3 is just 0","Z20867":"1, 2, 3 is 3! or 6","Z20868":"0.5, 0.5, 0.5 is 0.5^3 or 0.125","Z20869":"multiply 3 times","Z20870":"volume of a pyramid","Z20871":"1/3rd the volume of a prism","Z20872":"1,1,1 is 1/3","Z20873":"1, 2, 3 is 3!/3 or 2","Z20874":"0, 0, 0 is 0","Z20875":"Python converter to float64","Z20876":"math.floor","Z20877":"area of a rectangle","Z20878":"Multiply length and width","Z20879":"1, 1 is 1","Z20880":"1, 0.5 is 0.5","Z20881":"2, 0.5 is 1","Z20882":"0, 0 is 0","Z20884":"Addition","Z20885":"Python converter from float64","Z20886":"float +","Z20887":"Convert and return","Z20888":"1/2 is 0.5","Z20889":"0/1 is positive 0","Z20890":"(testing) e","Z20893":"√2","Z20894":"Golden ratio","Z1956":"Fur","Z20896":"Intro for year functions","Z20897":"Make sure errors are correct","Z20898":"Intro for year","Z20900":"age, python","Z20902":"square root","Z20903":"math.sqrt","Z20904":"√2 = √2","Z20905":"√0 = +0","Z20906":"√½ = (√2)/2","Z20907":"13900th","Z20908":"Math.sqrt(Number/Number)","Z20909":"√1 = 1","Z20910":"√(2⁴⁰) = 2²⁰","Z20911":"9000th","Z20912":"√(2⁸⁹-1)≙√(M₁₀-1)","Z20913":"√(7/123456789)","Z20914":"Nth prime, python minor optimized","Z20915":"string to float64","Z20917":"\"1\" to float64","Z20918":"\"1.0\" to float64","Z20919":"\"1e0\" to float64","Z20920":"\"0\" to float64","Z20921":"\"inf\"","Z20922":"\"1e1000\"","Z20923":"nan","Z20924":"float64 equality","Z20925":"same toLocaleString()","Z20926":"1 and 1.0 is same","Z20927":"inf and 1e1000 is same","Z20928":"0 and -0 is not same","Z20929":"nan and nan is same","Z20930":"1 == 1.0","Z20931":"inf == 1e1000","Z20932":"0 == -0","Z20933":"nan != nan","Z20934":"python equality (convert to str)","Z20935":"python equality (float64)","Z20936":"natural number to float64","Z20937":"integer to float64","Z20940":"less than (float64)","Z20941":"less than or equals to (float64)","Z20942":"using rational to float","Z20943":"greater than (float64)","Z20944":"greater than or equals to (float64)","Z20945":"not equals to (float64)","Z20951":"sine","Z20952":"cosine","Z20953":"tangent","Z20954":"cotangent","Z20955":"secant","Z20956":"cosecant","Z20957":"arcsine","Z20958":"arccosine","Z20959":"arctangent","Z20960":"arccotangent","Z20961":"arcsecant","Z20962":"arccosecant","Z20963":"hyperbolic sine","Z20964":"hyperbolic cosine ","Z20965":"hyperbolic tangent ","Z20966":"hyperbolic cotangent","Z20967":"hyperbolic secant ","Z20968":"hyperbolic cosecant ","Z20969":"inverse hyperbolic sine","Z20970":"inverse hyperbolic cosine","Z20971":"inverse hyperbolic tangent ","Z20972":"inverse hyperbolic cotangent ","Z20973":"inverse hyperbolic secant ","Z20974":"inverse hyperbolic cosecant ","Z20975":"sine f64, python","Z20981":"arcsine, python","Z21000":"float as percent","Z21001":"exp","Z21002":"float as percent, python","Z21003":"ln","Z21004":"log2","Z21005":"log10","Z21006":"cube root ","Z21007":"erf","Z21008":"erfc","Z21009":"gamma","Z21010":"log gamma","Z21011":"0.21 is 21%","Z21012":"radians to degrees","Z21013":"degrees to radians","Z21014":"pi is 314.2%","Z21016":"-1 is -100%","Z21020":"math.cbrt","Z21021":"0.1 is 10%","Z21027":"degrees to radians, in Python","Z21028":"pow","Z21029":"0.1049 is 10.5%","Z21031":"float64 subtraction","Z21032":"float64 multiplication","Z21033":"float64 division","Z21037":"log","Z21040":"gamma(10)=362880","Z21041":"absolute value (float64)","Z21043":"ceiling","Z21045":"positive 0 is 0%","Z21046":"float as percent, javascript","Z21047":"round float","Z21049":"pi to 2 is 3.14","Z21050":"float as percent, composition","Z21051":"0.9999 is 100%","Z21052":"0.999 is 99.9%","Z21065":"60 s is 1 min","Z21066":"1/1800 hr is 2 s","Z21067":"1 m is 1250/381 ft","Z21068":"1 mi is 80467/50 m","Z21069":"1 C is 274.15 K","Z21070":"convert (float)","Z21071":"float as rational","Z21072":"return fractions.Fraction","Z21073":"convert (float), composition","Z21074":"first = पहला, Hindi","Z21075":"second = दूसरा, Hindi","Z21078":"third = तीसरा, Hindi","Z21079":"fourth = चौथा, Hindi","Z21081":"sixth = छठा, Hindi","Z21082":"sha1(\"\")","Z21083":"17592186044471=2^44+55 is prime","Z21084":"Hindi cardinal + वाँ, with exceptions","Z21085":"twentieth = बीसवाँ, Hindi","Z21086":"1/8 B is 1 b","Z21087":"1 Gb is 125 MB","Z21088":"100 B is 0.1kB","Z21089":"1 m2 is 10000 cm2","Z21090":"1 m3 is 1000000000 mm3","Z21091":"1 ft3 in m3","Z21092":"1 ft2 in m2","Z21093":"1000 Pa is 1 kPa","Z21094":"150000 Pa is 1.5 bar","Z21095":"1 bar in atm","Z21096":"1 psi in Pa","Z21097":"1 μPa is 1000 nPa","Z21100":"round rational as decimal and return string","Z21101":"float, round, str, python","Z21103":"prettily display unit","Z21104":"regex sub","Z21105":"is string 1","Z21106":"is string 1, python","Z21107":"\"1\" is 1","Z21108":"\"1.0\" is 1","Z21109":"\"1/1\" is 1","Z21110":"\"2\" is not 1","Z21111":"\"1/2\" is not 1","Z21112":"\"0\" is not 1","Z21113":"\"1.1\" is not 1","Z21114":"mm3 becomes \"mm<sup>3</sup>\"","Z21115":"km11 becomes km<sup>11</sup>","Z21116":"1 kWh is 3.6 MJ","Z21117":"3.6 km/hr is 1 m/s","Z21118":"0.001 kWh/hr is 1 J/s","Z21119":"1/12 y is 1 mo","Z21120":"\"\" is not 1","Z21121":"Convert ","Z21122":"Convert, python ","Z21123":"8 h (0.3 d)","Z21125":"2 km/h (1 mph)","Z21126":"1 m<sup>2</sup> (100 dm<sup>2</sup>)","Z21128":"Feinmas is today","Z21129":"Hungarian comparison","Z21131":"Spanish comparison","Z21132":"(!) apply","Z21134":"join(\"a\", \"b\") = \"ab\"","Z21135":"Spanish cardinal, JS","Z21136":"sign of floating point number","Z21137":"sign of float64, composition value by key","Z21138":"sign(pi) is positive","Z21139":"exponent of floating point number","Z21140":"exponent of float64, composition value by key","Z21141":"exponent(pi) = 1","Z21142":"significand of floating point number","Z21143":"significand of float64, composition value by key","Z21144":"significand(pi) = 2,570,638,124,657,944","Z21145":"special value of floating point","Z21146":"special value of float64, composition value by key","Z21147":"special(pi) = no special value","Z21148":"display float64 as hex string","Z21149":"pi = \"400921FB54442D18\"","Z21150":"float64 as hex, python","Z21151":"positive zero = \"0000000000000000\"","Z21152":"negative zero = \"8000000000000000\"","Z21153":"+∞ = \"7FF0000000000000\"","Z21154":"−∞ = \"FFF0000000000000\"","Z21155":"sNaN = \"7FF0000000000001\"","Z21156":"qNaN = \"7FF8000000000001\"","Z21157":"-2 = \"C000000000000000\"","Z21158":"display float64 as binary string","Z21159":"float64 to binary, composition via Natural number","Z21160":"pi = \"0 10000000000 10010010000111111011010101000\"","Z21161":"strict same object composition","Z21162":"all four keys equal","Z21163":"convert biased exponent bits to integer exponent","Z21164":"composition binary to N, then subtract bias","Z21165":"\"01111111111\" is 0","Z21166":"\"10000000101\" is 6","Z21167":"\"11111111110\" is 1023","Z21168":"\"00000000001\" is -1022","Z21169":"type of function output","Z21170":"type of function output, value by key Z8K2","Z21171":"add floats returns float64 type","Z21172":"list of types of function inputs","Z21173":"add floats has inputs [float64, float64]","Z21174":"type of argument declaration","Z21175":"composition of value by key Z17K1","Z21176":"(!) dummy argument declaration: Boolean","Z21177":"get list of argument declarations","Z21178":"composition of value by key Z8K1","Z21179":"composition of get arguments and map type of arg","Z21180":"function call of test case","Z21181":"composition of value by key Z20K2","Z21182":"function called by test case","Z21183":"compose value by key Z20K2.Z7K1","Z21184":"Spanish description from lexemes","Z21187":"sieve of Erastothenes","Z21188":"sieve of Erastothenes, basic - python","Z21189":"1 kg (2.205 lb)","Z21190":"1.2345 m100 (1.2345 m100)","Z21191":"1 mm<sup>2</sup> (0.00 m<sup>2</sup>)","Z21192":"0 C (30 F)","Z21193":"function this implementation is implementing","Z21194":"function of implementation, value by key Z14K1","Z21195":"object label for December in English is \"December\"","Z21196":"English label for Z16693 is \"add Integers\"","Z21197":"0 C (32 F)","Z21198":"Add quote to typed pair","Z21199":"quote and return, python","Z21200":"\"Z99\" is Z99(\"Z99\")","Z21201":"choose \"G'day, mate!\" for Australian English","Z21203":"Quote with other function","Z21204":"Object label in language from reference","Z21206":"Month following December is \"January\" in English","Z21207":"quoting of December is quoted December","Z21208":"Servan","Z21210":"10 is [2, 3, 5, 7]","Z21211":"1 is empty","Z21212":"longer list length","Z21214":"[empty list, 1], false","Z21215":"[5 elm list, 4] is true","Z21216":"3-arg apply","Z21218":"Apply if(true,1,2) = 1","Z21219":"time quoted function call","Z21220":"time from Z823","Z21221":"division by zero","Z21222":"Zero denominators","Z21223":"cube root(1) = 1","Z21224":"cube root(0)=0","Z21225":"cube root(8)=2","Z21226":"cube root(-8)=-2","Z21227":"Math.cbrt","Z21228":"cube root(2)","Z21229":"Z19658 composition","Z21230":"convert a language lexeme in Russian to an adverb","Z21231":"хинди -> на языке хинди","Z21232":"Z21230 composition","Z21233":"Tester for \"Language code to language\"","Z21234":"Z21233 composition","Z21235":"en > Z1002","Z21236":"Throw if not of lang, run otherwise","Z21239":"Octavia Butler > void","Z21240":"convert a language code to a Russian adverb","Z21241":"en > по-английски","Z21242":"dua  > на языке дуала","Z21243":"оливье > \"\"","Z21244":"kv > на коми","Z21245":"Resistor 4–band code","Z21246":"brown, black, red, gold resistor is 1000 ohms","Z21247":"violet, green, yellow, gold resistor is 750000 ohm","Z21248":"orange, blue, gold, gold resistor is 3.6 ohm","Z21249":"Rational number as percentage","Z21250":"convert to float and take percentage","Z21251":"1/1 is 100%","Z21252":"1/2 is 50%","Z21253":"2/1 is 200%","Z21254":"1/1000 is 0.1%","Z21255":"501/1000 is 50.1%","Z21256":"4–band resistor code, python","Z21257":"VT, vt, white, pink resistor is 77 giga-ohms","Z21258":"sleep n ms","Z21260":"Ranged type","Z21263":"create rational Ranged type"}